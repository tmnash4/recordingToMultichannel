(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.ambisonics = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
    'use strict';
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');
    
    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
    
    var _createClass2 = require('babel-runtime/helpers/createClass');
    
    var _createClass3 = _interopRequireDefault(_createClass2);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    ////////////////////////////////////////////////////////////////////
    //  Archontis Politis
    //  archontis.politis@aalto.fi
    //  David Poirier-Quinot
    //  davipoir@ircam.fr
    ////////////////////////////////////////////////////////////////////
    //
    //  JSAmbisonics a JavaScript library for higher-order Ambisonics
    //  The library implements Web Audio blocks that perform
    //  typical ambisonic processing operations on audio signals.
    //
    ////////////////////////////////////////////////////////////////////
    
    //////////////////////////
    /* HOA BINAURAL DECODER */
    //////////////////////////
    
    var binDecoder = function () {
        function binDecoder(audioCtx, order) {
            (0, _classCallCheck3.default)(this, binDecoder);
    
    
            this.initialized = false;
    
            this.ctx = audioCtx;
            this.order = order;
            this.nCh = (order + 1) * (order + 1);
            this.decFilters = new Array(this.nCh);
            this.decFilterNodes = new Array(this.nCh);
            // input and output nodes
            this.in = this.ctx.createChannelSplitter(this.nCh);
            this.out = this.ctx.createChannelMerger(2);
            this.out.channelCountMode = 'explicit';
            this.out.channelCount = 1;
            // downmixing gains for left and right ears
            this.gainMid = this.ctx.createGain();
            this.gainSide = this.ctx.createGain();
            this.invertSide = this.ctx.createGain();
            this.gainMid.gain.value = 1;
            this.gainSide.gain.value = 1;
            this.invertSide.gain.value = -1;
            // convolver nodes
            for (var i = 0; i < this.nCh; i++) {
                this.decFilterNodes[i] = this.ctx.createConvolver();
                this.decFilterNodes[i].normalize = false;
            }
            // initialize convolvers to plain cardioids
            this.resetFilters();
            // create audio connections
            for (var i = 0; i < this.nCh; i++) {
                this.in.connect(this.decFilterNodes[i], i, 0);
                var n = Math.floor(Math.sqrt(i));
                var m = i - n * n - n;
                if (m >= 0) this.decFilterNodes[i].connect(this.gainMid);else this.decFilterNodes[i].connect(this.gainSide);
            }
            this.gainMid.connect(this.out, 0, 0);
            this.gainSide.connect(this.out, 0, 0);
    
            this.gainMid.connect(this.out, 0, 1);
            this.gainSide.connect(this.invertSide, 0, 0);
            this.invertSide.connect(this.out, 0, 1);
    
            this.initialized = true;
        }
    
        (0, _createClass3.default)(binDecoder, [{
            key: 'updateFilters',
            value: function updateFilters(audioBuffer) {
                // assign filters to convolvers
                for (var i = 0; i < this.nCh; i++) {
                    this.decFilters[i] = this.ctx.createBuffer(1, audioBuffer.length, audioBuffer.sampleRate);
                    this.decFilters[i].getChannelData(0).set(audioBuffer.getChannelData(i));
    
                    this.decFilterNodes[i].buffer = this.decFilters[i];
                }
            }
        }, {
            key: 'resetFilters',
            value: function resetFilters() {
                // overwrite decoding filters (plain cardioid virtual microphones)
                var cardGains = new Array(this.nCh);
                cardGains.fill(0);
                cardGains[0] = 0.5;
                cardGains[1] = 0.5 / Math.sqrt(3);
                for (var i = 0; i < this.nCh; i++) {
                    // ------------------------------------
                    // This works for Chrome and Firefox:
                    // this.decFilters[i] = this.ctx.createBuffer(1, 1, this.ctx.sampleRate);
                    // this.decFilters[i].getChannelData(0).set([cardGains[i]]);
                    // ------------------------------------
                    // Safari forces us to use this:
                    this.decFilters[i] = this.ctx.createBuffer(1, 64, this.ctx.sampleRate);
                    // and will send gorgeous crancky noise bursts for any value below 64
                    for (var j = 0; j < 64; j++) {
                        this.decFilters[i].getChannelData(0)[j] = 0.0;
                    }
                    this.decFilters[i].getChannelData(0)[0] = cardGains[i];
                    // ------------------------------------
                    this.decFilterNodes[i].buffer = this.decFilters[i];
                }
            }
        }]);
        return binDecoder;
    }();
    
    exports.default = binDecoder;
    
    },{"babel-runtime/helpers/classCallCheck":28,"babel-runtime/helpers/createClass":29}],2:[function(require,module,exports){
    'use strict';
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');
    
    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
    
    var _createClass2 = require('babel-runtime/helpers/createClass');
    
    var _createClass3 = _interopRequireDefault(_createClass2);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    ////////////////////////////////////////////////////////////////////
    //  Archontis Politis
    //  archontis.politis@aalto.fi
    //  David Poirier-Quinot
    //  davipoir@ircam.fr
    ////////////////////////////////////////////////////////////////////
    //
    //  JSAmbisonics a JavaScript library for higher-order Ambisonics
    //  The library implements Web Audio blocks that perform
    //  typical ambisonic processing operations on audio signals.
    //
    ////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////
    //
    //  binDecoder for 2D use
    //  adapted by Thomas Deppisch
    //  thomas.deppisch93@gmail.com
    //
    ////////////////////////////////////////////////////////////////////
    /////////////////////////////
    /* HOA BINAURAL DECODER 2D */
    /////////////////////////////
    
    var binDecoder2D = function () {
        function binDecoder2D(audioCtx, order) {
            (0, _classCallCheck3.default)(this, binDecoder2D);
    
    
            this.initialized = false;
    
            this.ctx = audioCtx;
            this.order = order;
            this.nCh = 2 * order + 1;
            this.decFilters = new Array(this.nCh);
            this.decFilterNodes = new Array(this.nCh);
            // input and output nodes
            this.in = this.ctx.createChannelSplitter(this.nCh);
            this.out = this.ctx.createChannelMerger(2);
            this.out.channelCountMode = 'explicit';
            this.out.channelCount = 1;
            // downmixing gains for left and right ears
            this.gainMid = this.ctx.createGain();
            this.gainSide = this.ctx.createGain();
            this.invertSide = this.ctx.createGain();
            this.gainMid.gain.value = 1;
            this.gainSide.gain.value = 1;
            this.invertSide.gain.value = -1;
            // convolver nodes
            for (var i = 0; i < this.nCh; i++) {
                this.decFilterNodes[i] = this.ctx.createConvolver();
                this.decFilterNodes[i].normalize = false;
            }
            // initialize convolvers to plain cardioids
            this.resetFilters();
            // create audio connections
            for (var i = 0; i < this.nCh; i++) {
                this.in.connect(this.decFilterNodes[i], i, 0);
                if (i % 2 == 0) this.decFilterNodes[i].connect(this.gainMid); //even numbers to mid signal
                else this.decFilterNodes[i].connect(this.gainSide); //odd numbers to side signal
            }
            this.gainMid.connect(this.out, 0, 0);
            this.gainSide.connect(this.out, 0, 0);
    
            this.gainMid.connect(this.out, 0, 1);
            this.gainSide.connect(this.invertSide, 0, 0);
            this.invertSide.connect(this.out, 0, 1);
    
            this.initialized = true;
        }
    
        (0, _createClass3.default)(binDecoder2D, [{
            key: 'updateFilters',
            value: function updateFilters(audioBuffer) {
                // assign filters to convolvers
                for (var i = 0; i < this.nCh; i++) {
                    this.decFilters[i] = this.ctx.createBuffer(1, audioBuffer.length, audioBuffer.sampleRate);
                    this.decFilters[i].getChannelData(0).set(audioBuffer.getChannelData(i));
    
                    this.decFilterNodes[i].buffer = this.decFilters[i];
                }
            }
        }, {
            key: 'resetFilters',
            value: function resetFilters() {
                // overwrite decoding filters (plain cardioid virtual microphones)
                var cardGains = new Array(this.nCh);
                cardGains.fill(0);
                cardGains[0] = 0.5;
                cardGains[1] = 0.5 / Math.sqrt(3);
                for (var i = 0; i < this.nCh; i++) {
                    // ------------------------------------
                    // This works for Chrome and Firefox:
                    // this.decFilters[i] = this.ctx.createBuffer(1, 1, this.ctx.sampleRate);
                    // this.decFilters[i].getChannelData(0).set([cardGains[i]]);
                    // ------------------------------------
                    // Safari forces us to use this:
                    this.decFilters[i] = this.ctx.createBuffer(1, 64, this.ctx.sampleRate);
                    // and will send gorgeous crancky noise bursts for any value below 64
                    for (var j = 0; j < 64; j++) {
                        this.decFilters[i].getChannelData(0)[j] = 0.0;
                    }
                    this.decFilters[i].getChannelData(0)[0] = cardGains[i];
                    // ------------------------------------
                    this.decFilterNodes[i].buffer = this.decFilters[i];
                }
            }
        }]);
        return binDecoder2D;
    }();
    
    exports.default = binDecoder2D;
    
    },{"babel-runtime/helpers/classCallCheck":28,"babel-runtime/helpers/createClass":29}],3:[function(require,module,exports){
    "use strict";
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.fuma2acn = exports.n3d2sn3d = exports.sn3d2n3d = exports.acn2wxyz = exports.wxyz2acn = undefined;
    
    var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");
    
    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    ////////////////////////////////////////////////////////////////////
    //  Archontis Politis
    //  archontis.politis@aalto.fi
    //  David Poirier-Quinot
    //  davipoir@ircam.fr
    ////////////////////////////////////////////////////////////////////
    //
    //  JSAmbisonics a JavaScript library for higher-order Ambisonics
    //  The library implements Web Audio blocks that perform
    //  typical ambisonic processing operations on audio signals.
    //
    ////////////////////////////////////////////////////////////////////
    
    ///////////////////////////////////
    /* FOA B-FORMAT TO ACN/N3D CONVERTER */
    ///////////////////////////////////
    var wxyz2acn = exports.wxyz2acn = function wxyz2acn(audioCtx) {
        (0, _classCallCheck3.default)(this, wxyz2acn);
    
    
        this.ctx = audioCtx;
        this.in = this.ctx.createChannelSplitter(4);
        this.out = this.ctx.createChannelMerger(4);
        this.gains = new Array(4);
    
        for (var i = 0; i < 4; i++) {
            this.gains[i] = this.ctx.createGain();
            if (i == 0) this.gains[i].gain.value = Math.SQRT2;else this.gains[i].gain.value = Math.sqrt(3);
    
            this.gains[i].connect(this.out, 0, i);
        }
        this.in.connect(this.gains[0], 0, 0);
        this.in.connect(this.gains[3], 1, 0);
        this.in.connect(this.gains[1], 2, 0);
        this.in.connect(this.gains[2], 3, 0);
    };
    
    ///////////////////////////////////
    /* ACN/N3D TO FOA B-FORMAT CONVERTER */
    ///////////////////////////////////
    
    
    var acn2wxyz = exports.acn2wxyz = function acn2wxyz(audioCtx) {
        (0, _classCallCheck3.default)(this, acn2wxyz);
    
    
        this.ctx = audioCtx;
        this.in = this.ctx.createChannelSplitter(4);
        this.out = this.ctx.createChannelMerger(4);
        this.gains = new Array(4);
    
        for (var i = 0; i < 4; i++) {
            this.gains[i] = this.ctx.createGain();
            if (i == 0) this.gains[i].gain.value = Math.SQRT1_2;else this.gains[i].gain.value = 1 / Math.sqrt(3);
    
            this.gains[i].connect(this.out, 0, i);
        }
        this.in.connect(this.gains[0], 0, 0);
        this.in.connect(this.gains[2], 1, 0);
        this.in.connect(this.gains[3], 2, 0);
        this.in.connect(this.gains[1], 3, 0);
    };
    
    ///////////////////////////////////
    /* ACN/SN3D TO ACN/N3D CONVERTER */
    ///////////////////////////////////
    
    
    var sn3d2n3d = exports.sn3d2n3d = function sn3d2n3d(audioCtx, order) {
        (0, _classCallCheck3.default)(this, sn3d2n3d);
    
    
        this.ctx = audioCtx;
        this.order = order;
        this.nCh = (order + 1) * (order + 1);
        this.in = this.ctx.createChannelSplitter(this.nCh);
        this.out = this.ctx.createChannelMerger(this.nCh);
        this.gains = new Array(this.nCh);
    
        for (var i = 0; i < this.nCh; i++) {
            var n = Math.floor(Math.sqrt(i));
    
            this.gains[i] = this.ctx.createGain();
            this.gains[i].gain.value = Math.sqrt(2 * n + 1);
    
            this.in.connect(this.gains[i], i, 0);
            this.gains[i].connect(this.out, 0, i);
        }
    };
    
    ///////////////////////////////////
    /* ACN/N3D TO ACN/SN3D CONVERTER */
    ///////////////////////////////////
    
    
    var n3d2sn3d = exports.n3d2sn3d = function n3d2sn3d(audioCtx, order) {
        (0, _classCallCheck3.default)(this, n3d2sn3d);
    
    
        this.ctx = audioCtx;
        this.order = order;
        this.nCh = (order + 1) * (order + 1);
        this.in = this.ctx.createChannelSplitter(this.nCh);
        this.out = this.ctx.createChannelMerger(this.nCh);
        this.gains = new Array(this.nCh);
    
        for (var i = 0; i < this.nCh; i++) {
            var n = Math.floor(Math.sqrt(i));
    
            this.gains[i] = this.ctx.createGain();
            this.gains[i].gain.value = 1 / Math.sqrt(2 * n + 1);
    
            this.in.connect(this.gains[i], i, 0);
            this.gains[i].connect(this.out, 0, i);
        }
    };
    
    ///////////////////////////////
    /* FUMA TO ACN/N3D CONVERTER */
    ///////////////////////////////
    
    
    var fuma2acn = exports.fuma2acn = function fuma2acn(audioCtx, order) {
        (0, _classCallCheck3.default)(this, fuma2acn);
    
    
        if (order > 3) {
            console.log("FuMa specifiction is supported up to 3rd order");
            order = 3;
        }
    
        // re-mapping indices from FuMa channels to ACN
        // var index_fuma2acn = [0, 2, 3, 1, 8, 6, 4, 5, 7, 15, 13, 11, 9, 10, 12, 14];
        // //                    W  Y  Z  X  V  T  R  S  U  Q   O   M   K  L   N   P
    
        // gains for each FuMa channel to N3D, after re-mapping channels
        var gains_fuma2n3d = [Math.sqrt(2), // W
        Math.sqrt(3), // Y
        Math.sqrt(3), // Z
        Math.sqrt(3), // X
        Math.sqrt(15) / 2, // V
        Math.sqrt(15) / 2, // T
        Math.sqrt(5), // R
        Math.sqrt(15) / 2, // S
        Math.sqrt(15) / 2, // U
        Math.sqrt(35 / 8), // Q
        Math.sqrt(35) / 3, // O
        Math.sqrt(224 / 45), // M
        Math.sqrt(7), // K
        Math.sqrt(224 / 45), // L
        Math.sqrt(35) / 3, // N
        Math.sqrt(35 / 8)]; // P
    
        this.ctx = audioCtx;
        this.order = order;
        this.nCh = (order + 1) * (order + 1);
        this.in = this.ctx.createChannelSplitter(this.nCh);
        this.out = this.ctx.createChannelMerger(this.nCh);
        this.gains = [];
        this.remapArray = [];
    
        // get channel remapping values order 0-1
        this.remapArray.push(0, 2, 3, 1); // manually handle until order 1
    
        // get channel remapping values order 2-N
        if (order > 1) {
            var o = 0;
            var m;
            for (var i = 0; i < this.nCh; i++) {
                m = [];
                if (i >= (o + 1) * (o + 1)) {
                    o += 1;
                    for (var j = (o + 1) * (o + 1); j < (o + 2) * (o + 2); j++) {
                        if ((j + o % 2) % 2 == 0) {
                            m.push(j);
                        } else {
                            m.unshift(j);
                        }
                    }
                    this.remapArray = this.remapArray.concat(m);
                }
            }
        }
    
        // connect inputs/outputs (kept separated for clarity's sake)
        for (var i = 0; i < this.nCh; i++) {
            this.gains[i] = this.ctx.createGain();
            this.gains[i].gain.value = gains_fuma2n3d[i];
            this.in.connect(this.gains[i], this.remapArray[i], 0);
            this.gains[i].connect(this.out, 0, i);
        }
    };
    
    },{"babel-runtime/helpers/classCallCheck":28}],4:[function(require,module,exports){
    'use strict';
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');
    
    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
    
    var _createClass2 = require('babel-runtime/helpers/createClass');
    
    var _createClass3 = _interopRequireDefault(_createClass2);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    ////////////////////////////////////////////////////////////////////
    //  Archontis Politis
    //  archontis.politis@aalto.fi
    //  David Poirier-Quinot
    //  davipoir@ircam.fr
    ////////////////////////////////////////////////////////////////////
    //
    //  JSAmbisonics a JavaScript library for higher-order Ambisonics
    //  The library implements Web Audio blocks that perform
    //  typical ambisonic processing operations on audio signals.
    //
    ////////////////////////////////////////////////////////////////////
    
    /////////////////////////////
    /* MULTI-CHANNEL CONVOLVER */
    /////////////////////////////
    
    var convolver = function () {
        function convolver(audioCtx, order) {
            (0, _classCallCheck3.default)(this, convolver);
    
    
            this.initialized = false;
    
            this.ctx = audioCtx;
            this.order = order;
            this.nCh = (order + 1) * (order + 1);
            this.encFilters = new Array(this.nCh);
            this.encFilterNodes = new Array(this.nCh);
            // input and output nodes
            this.in = this.ctx.createGain();
            this.in.channelCountMode = 'explicit';
            this.in.channelCount = 1;
            this.out = this.ctx.createChannelMerger(this.nCh);
            // convolver nodes
            for (var i = 0; i < this.nCh; i++) {
                this.encFilterNodes[i] = this.ctx.createConvolver();
                this.encFilterNodes[i].normalize = false;
            }
            // create audio connections
            for (var i = 0; i < this.nCh; i++) {
                this.in.connect(this.encFilterNodes[i]);
                this.encFilterNodes[i].connect(this.out, 0, i);
            }
    
            this.initialized = true;
        }
    
        (0, _createClass3.default)(convolver, [{
            key: 'updateFilters',
            value: function updateFilters(audioBuffer) {
                // assign filters to convolvers
                for (var i = 0; i < this.nCh; i++) {
                    this.encFilters[i] = this.ctx.createBuffer(1, audioBuffer.length, audioBuffer.sampleRate);
                    this.encFilters[i].getChannelData(0).set(audioBuffer.getChannelData(i));
    
                    this.encFilterNodes[i].buffer = this.encFilters[i];
                }
            }
        }]);
        return convolver;
    }();
    
    exports.default = convolver;
    
    },{"babel-runtime/helpers/classCallCheck":28,"babel-runtime/helpers/createClass":29}],5:[function(require,module,exports){
    "use strict";
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");
    
    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
    
    var _createClass2 = require("babel-runtime/helpers/createClass");
    
    var _createClass3 = _interopRequireDefault(_createClass2);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    ////////////////////////////////////////////////////////////////////
    //  Archontis Politis
    //  archontis.politis@aalto.fi
    //  David Poirier-Quinot
    //  davipoir@ircam.fr
    ////////////////////////////////////////////////////////////////////
    //
    //  JSAmbisonics a JavaScript library for higher-order Ambisonics
    //  The library implements Web Audio blocks that perform
    //  typical ambisonic processing operations on audio signals.
    //
    ////////////////////////////////////////////////////////////////////
    
    ///////////////////////////
    /* HOA AMBISONIC DECODER */
    ///////////////////////////
    
    var utils = require("./utils.js");
    
    var decoder = function () {
        function decoder(audioCtx, order) {
            (0, _classCallCheck3.default)(this, decoder);
    
    
            // locals
            this.ctx = audioCtx;
            this.order = order;
            this.nCh = (order + 1) * (order + 1);
            this.nSpk = 0;
            this._decodingMatrix = [];
            this._spkSphPosArray = [];
    
            // Input and output nodes
            this.in = this.ctx.createChannelSplitter(this.nCh);
            this.out = this.ctx.createChannelMerger(1); // dummy
    
            // dummy init array
            this._spkSphPosArray = this._getDefaultSpkConfig(this.order);
            this._updateDecodeMtx(this._spkSphPosArray);
        }
    
        // spkSphPosArray in spherical coordinates: [ [azim1, elev1, dist1], ... [azimN, elevN, distN] ]
    
    
        (0, _createClass3.default)(decoder, [{
            key: "_updateDecodeMtx",
    
    
            // internal method to calculate Ambisonic decoding matrix and define new ambisonic gain nodes and values
            value: function _updateDecodeMtx(spkSphPosArray) {
    
                // update output
                this.nSpk = spkSphPosArray.length;
                this.out = this.ctx.createChannelMerger(this.nSpk);
    
                // get decoding matrix
                this._decodingMatrix = utils.getAmbisonicDecMtx(spkSphPosArray, this.order);
    
                // assign ambisonic gains to gain matrix + connect new graph
                this.mtxGain = new Array(this.nCh);
                for (var i = 0; i < this.nCh; i++) {
                    this.mtxGain[i] = new Array(this.nSpk);
                    for (var j = 0; j < this.nSpk; j++) {
                        // create / setup gain
                        var g = this.ctx.createGain();
                        g.gain.value = this._decodingMatrix[j][i];
                        // connect graph
                        this.in.connect(g, i, 0);
                        g.connect(this.out, 0, j);
                        // save to local
                        this.mtxGain[i][j] = g;
                    }
                }
            }
    
            // get default speaker configuration for orders 1, 2, 3
    
        }, {
            key: "_getDefaultSpkConfig",
            value: function _getDefaultSpkConfig(order) {
                var spkSphPosArray = [];
                switch (order) {
                    case 1:
                        // default first order: octahedron
                        spkSphPosArray = [[0, 0, 1], [90, 0, 1], [180, 0, 1], [270, 0, 1], [0, 90, 1], [0, -90, 1]];
                        break;
                    case 2:
                        // default second order: icosahedron
                        spkSphPosArray = [[180.0000, -31.7161, 0.5878], [180.0000, 31.7161, 0.5878], [-121.7161, 0, 0.5878], [121.7161, 0, 0.5878], [-90.0000, -58.2839, 0.5878], [-90.0000, 58.2839, 0.5878], [90.0000, -58.2839, 0.5878], [90.0000, 58.2839, 0.5878], [-58.2839, 0, 0.5878], [58.2839, 0, 0.5878], [0, -31.7161, 0.5878], [0, 31.7161, 0.5878]];
                        break;
                    case 3:
                        // default third order: dodecahedron
                        spkSphPosArray = [[-159.0931, 0, 0.5352], [159.0931, 0, 0.5352], [-135.0000, -35.2644, 0.5352], [-135.0000, 35.2644, 0.5352], [135.0000, -35.2644, 0.5352], [135.0000, 35.2644, 0.5352], [180.0000, -69.0931, 0.5352], [180.0000, 69.0931, 0.5352], [-90.0000, -20.9069, 0.5352], [-90.0000, 20.9069, 0.5352], [90.0000, -20.9069, 0.5352], [90.0000, 20.9069, 0.5352], [0, -69.0931, 0.5352], [0, 69.0931, 0.5352], [-45.0000, -35.2644, 0.5352], [-45.0000, 35.2644, 0.5352], [45.0000, -35.2644, 0.5352], [45.0000, 35.2644, 0.5352], [-20.9069, 0, 0.5352], [20.9069, 0, 0.5352]];
                        break;
                    default:
                        console.error("unsupported default order:", order);
                }
                return spkSphPosArray;
            }
        }, {
            key: "speakerPos",
            set: function set(spkSphPosArray) {
                // set default array
                if (spkSphPosArray === undefined) {
                    spkSphPosArray = this._getDefaultSpkConfig(this.order);
                }
                this._spkSphPosArray = spkSphPosArray;
                // discard old output
                this.out.disconnect();
                // update output / decode matrix 
                this._updateDecodeMtx(spkSphPosArray);
            },
            get: function get() {
                return this._spkSphPosArray;
            }
        }]);
        return decoder;
    }();
    
    exports.default = decoder;
    
    },{"./utils.js":25,"babel-runtime/helpers/classCallCheck":28,"babel-runtime/helpers/createClass":29}],6:[function(require,module,exports){
    'use strict';
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');
    
    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
    
    var _createClass2 = require('babel-runtime/helpers/createClass');
    
    var _createClass3 = _interopRequireDefault(_createClass2);
    
    require('get-float-time-domain-data');
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    var intensityAnalyser = function () {
        function intensityAnalyser(audioCtx) {
            (0, _classCallCheck3.default)(this, intensityAnalyser);
    
    
            this.ctx = audioCtx;
            this.fftSize = 2048;
            // Input and output nodes
            this.in = this.ctx.createChannelSplitter(4);
            this.out = this.ctx.createChannelMerger(4);
            // Gains to go from ACN/N3D to pressure-velocity (WXYZ)
            this.gains = new Array(3);
            for (var i = 0; i < 3; i++) {
                this.gains[i] = this.ctx.createGain();
                this.gains[i].gain.value = 1 / Math.sqrt(3);
            }
            // Initialize analyzer buffers
            this.analysers = new Array(4);
            this.analBuffers = new Array(4);
            for (i = 0; i < 4; i++) {
                this.analysers[i] = this.ctx.createAnalyser();
                this.analysers[i].fftSize = this.fftSize;
                this.analysers[i].smoothingTimeConstant = 0;
                this.analBuffers[i] = new Float32Array(this.fftSize);
            }
            // Create connections
            this.in.connect(this.out, 0, 0);
            this.in.connect(this.analysers[0], 0, 0);
    
            this.in.connect(this.gains[1], 1, 0);
            this.in.connect(this.gains[2], 2, 0);
            this.in.connect(this.gains[0], 3, 0);
            for (i = 0; i < 3; i++) {
                this.gains[i].connect(this.analysers[i + 1], 0, 0);
                this.gains[i].connect(this.out, 0, i + 1);
            }
        }
    
        (0, _createClass3.default)(intensityAnalyser, [{
            key: 'updateBuffers',
            value: function updateBuffers() {
                // Get latest time-domain data
                for (var i = 0; i < 4; i++) {
                    this.analysers[i].getFloatTimeDomainData(this.analBuffers[i]);
                }
            }
        }, {
            key: 'computeIntensity',
            value: function computeIntensity() {
                // Compute correlations and energies of channels
                var iX = 0;
                var iY = 0;
                var iZ = 0;
                var WW = 0;
                var XX = 0;
                var YY = 0;
                var ZZ = 0;
                var I, I_norm, E, Psi, azim, elev;
                // Accumulators for correlations and energies
                for (var i = 0; i < this.fftSize; i++) {
    
                    iX = iX + this.analBuffers[0][i] * this.analBuffers[1][i];
                    iY = iY + this.analBuffers[0][i] * this.analBuffers[2][i];
                    iZ = iZ + this.analBuffers[0][i] * this.analBuffers[3][i];
                    WW = WW + this.analBuffers[0][i] * this.analBuffers[0][i];
                    XX = XX + this.analBuffers[1][i] * this.analBuffers[1][i];
                    YY = YY + this.analBuffers[2][i] * this.analBuffers[2][i];
                    ZZ = ZZ + this.analBuffers[3][i] * this.analBuffers[3][i];
                }
                I = [iX, iY, iZ]; // intensity
                I_norm = Math.sqrt(I[0] * I[0] + I[1] * I[1] + I[2] * I[2]); // intensity magnitude
                E = (WW + XX + YY + ZZ) / 2; // energy
                Psi = 1 - I_norm / (E + 10e-8); // diffuseness
                azim = Math.atan2(iY, iX) * 180 / Math.PI;
                elev = Math.atan2(I[2], Math.sqrt(I[0] * I[0] + I[1] * I[1])) * 180 / Math.PI;
    
                var params = [azim, elev, Psi, E];
                return params;
            }
        }]);
        return intensityAnalyser;
    }(); ////////////////////////////////////////////////////////////////////
    //  Archontis Politis
    //  archontis.politis@aalto.fi
    //  David Poirier-Quinot
    //  davipoir@ircam.fr
    ////////////////////////////////////////////////////////////////////
    //
    //  JSAmbisonics a JavaScript library for higher-order Ambisonics
    //  The library implements Web Audio blocks that perform
    //  typical ambisonic processing operations on audio signals.
    //
    ////////////////////////////////////////////////////////////////////
    
    //////////////////////////////////////////
    /* PRESSURE-VELOCITY INTENSITY ANALYZER */
    //////////////////////////////////////////
    
    // for Safari support where audioContext.Analyser.getFloatTimeDomainData is not defined for now
    
    
    exports.default = intensityAnalyser;
    
    },{"babel-runtime/helpers/classCallCheck":28,"babel-runtime/helpers/createClass":29,"get-float-time-domain-data":60}],7:[function(require,module,exports){
    'use strict';
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');
    
    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
    
    var _createClass2 = require('babel-runtime/helpers/createClass');
    
    var _createClass3 = _interopRequireDefault(_createClass2);
    
    require('get-float-time-domain-data');
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    var intensityAnalyser2D = function () {
        function intensityAnalyser2D(audioCtx) {
            (0, _classCallCheck3.default)(this, intensityAnalyser2D);
    
    
            this.ctx = audioCtx;
            this.fftSize = 2048;
            // Input and output nodes
            this.in = this.ctx.createChannelSplitter(3);
            this.out = this.ctx.createChannelMerger(3);
            // Gains to go from ACN/N3D to pressure-velocity (WXY)
            this.gains = new Array(2);
            for (var i = 0; i < 2; i++) {
                this.gains[i] = this.ctx.createGain();
                this.gains[i].gain.value = 1 / Math.sqrt(3);
            }
            // Initialize analyzer buffers
            this.analysers = new Array(3);
            this.analBuffers = new Array(3);
            for (i = 0; i < 3; i++) {
                this.analysers[i] = this.ctx.createAnalyser();
                this.analysers[i].fftSize = this.fftSize;
                this.analysers[i].smoothingTimeConstant = 0;
                this.analBuffers[i] = new Float32Array(this.fftSize);
            }
            // Create connections
            this.in.connect(this.out, 0, 0); //W
            this.in.connect(this.analysers[0], 0, 0);
    
            this.in.connect(this.gains[1], 1, 0); //X
            this.in.connect(this.gains[0], 2, 0); //Y
            for (i = 0; i < 2; i++) {
                this.gains[i].connect(this.analysers[i + 1], 0, 0);
                this.gains[i].connect(this.out, 0, i + 1);
            }
        }
    
        (0, _createClass3.default)(intensityAnalyser2D, [{
            key: 'updateBuffers',
            value: function updateBuffers() {
                // Get latest time-domain data
                for (var i = 0; i < 3; i++) {
                    this.analysers[i].getFloatTimeDomainData(this.analBuffers[i]);
                }
            }
        }, {
            key: 'computeIntensity',
            value: function computeIntensity() {
                // Compute correlations and energies of channels
                var iX = 0;
                var iY = 0;
                var WW = 0;
                var XX = 0;
                var YY = 0;
                var I, I_norm, E, Psi, azim, elev;
                // Accumulators for correlations and energies
                for (var i = 0; i < this.fftSize; i++) {
                    iX = iX + this.analBuffers[0][i] * this.analBuffers[1][i];
                    iY = iY + this.analBuffers[0][i] * this.analBuffers[2][i];
                    WW = WW + this.analBuffers[0][i] * this.analBuffers[0][i];
                    XX = XX + this.analBuffers[1][i] * this.analBuffers[1][i];
                    YY = YY + this.analBuffers[2][i] * this.analBuffers[2][i];
                }
                I = [iX, iY]; // intensity
                I_norm = Math.sqrt(I[0] * I[0] + I[1] * I[1]); // intensity magnitude
                E = (WW + XX + YY) / 2; // energy
                Psi = 1 - I_norm / (E + 10e-8); // diffuseness
                azim = -Math.atan2(iY, iX) * 180 / Math.PI;
                elev = 0;
    
                var params = [azim, elev, Psi, E];
                return params;
            }
        }]);
        return intensityAnalyser2D;
    }(); ////////////////////////////////////////////////////////////////////
    //  Archontis Politis
    //  archontis.politis@aalto.fi
    //  David Poirier-Quinot
    //  davipoir@ircam.fr
    ////////////////////////////////////////////////////////////////////
    //
    //  JSAmbisonics a JavaScript library for higher-order Ambisonics
    //  The library implements Web Audio blocks that perform
    //  typical ambisonic processing operations on audio signals.
    //
    ////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////
    //
    //  intensityAnalyser for 2D use
    //  adapted by Thomas Deppisch
    //  thomas.deppisch93@gmail.com
    //
    ////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////
    /* PRESSURE-VELOCITY INTENSITY ANALYZER for 2D Ambisonics */
    ////////////////////////////////////////////////////////////
    
    // for Safari support where audioContext.Analyser.getFloatTimeDomainData is not defined for now
    
    
    exports.default = intensityAnalyser2D;
    
    },{"babel-runtime/helpers/classCallCheck":28,"babel-runtime/helpers/createClass":29,"get-float-time-domain-data":60}],8:[function(require,module,exports){
    'use strict';
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');
    
    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
    
    var _createClass2 = require('babel-runtime/helpers/createClass');
    
    var _createClass3 = _interopRequireDefault(_createClass2);
    
    var _sphericalHarmonicTransform = require('spherical-harmonic-transform');
    
    var jshlib = _interopRequireWildcard(_sphericalHarmonicTransform);
    
    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    var monoEncoder = function () {
        function monoEncoder(audioCtx, order) {
            (0, _classCallCheck3.default)(this, monoEncoder);
    
    
            this.initialized = false;
    
            this.ctx = audioCtx;
            this.order = order;
            this.nCh = (order + 1) * (order + 1);
            this.azim = 0;
            this.elev = 0;
            this.gains = new Array(this.nCh);
            this.gainNodes = new Array(this.nCh);
            this.in = this.ctx.createGain();
            this.in.channelCountMode = 'explicit';
            this.in.channelCount = 1;
            this.out = this.ctx.createChannelMerger(this.nCh);
            // Initialize encoding gains
            for (var i = 0; i < this.nCh; i++) {
                this.gainNodes[i] = this.ctx.createGain();
                this.gainNodes[i].channelCountMode = 'explicit';
                this.gainNodes[i].channelCount = 1;
            }
            this.updateGains();
            // Make audio connections
            for (var i = 0; i < this.nCh; i++) {
                this.in.connect(this.gainNodes[i]);
                this.gainNodes[i].connect(this.out, 0, i);
            }
    
            this.initialized = true;
        }
    
        (0, _createClass3.default)(monoEncoder, [{
            key: 'updateGains',
            value: function updateGains() {
                var N = this.order;
                var g_enc = jshlib.computeRealSH(N, [[this.azim * Math.PI / 180, this.elev * Math.PI / 180]]);
    
                for (var i = 0; i < this.nCh; i++) {
                    this.gains[i] = g_enc[i][0];
                    this.gainNodes[i].gain.value = this.gains[i];
                }
            }
        }]);
        return monoEncoder;
    }(); ////////////////////////////////////////////////////////////////////
    //  Archontis Politis
    //  archontis.politis@aalto.fi
    //  David Poirier-Quinot
    //  davipoir@ircam.fr
    ////////////////////////////////////////////////////////////////////
    //
    //  JSAmbisonics a JavaScript library for higher-order Ambisonics
    //  The library implements Web Audio blocks that perform
    //  typical ambisonic processing operations on audio signals.
    //
    ////////////////////////////////////////////////////////////////////
    
    /////////////////
    /* HOA ENCODER */
    /////////////////
    
    exports.default = monoEncoder;
    
    },{"babel-runtime/helpers/classCallCheck":28,"babel-runtime/helpers/createClass":29,"spherical-harmonic-transform":83}],9:[function(require,module,exports){
    'use strict';
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');
    
    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
    
    var _createClass2 = require('babel-runtime/helpers/createClass');
    
    var _createClass3 = _interopRequireDefault(_createClass2);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    ////////////////////////////////////////////////////////////////////
    //  Archontis Politis
    //  archontis.politis@aalto.fi
    //  David Poirier-Quinot
    //  davipoir@ircam.fr
    ////////////////////////////////////////////////////////////////////
    //
    //  JSAmbisonics a JavaScript library for higher-order Ambisonics
    //  The library implements Web Audio blocks that perform
    //  typical ambisonic processing operations on audio signals.
    //
    ////////////////////////////////////////////////////////////////////
    //
    //  monoEncoder for 2D use
    //  adapted by Thomas Deppisch
    //  thomas.deppisch93@gmail.com
    //
    ////////////////////////////////////////////////////////////////////
    ////////////////////
    /* HOA 2D ENCODER */
    ///////////////////
    
    var utils = require("./utils.js");
    
    var monoEncoder2D = function () {
        function monoEncoder2D(audioCtx, order) {
            (0, _classCallCheck3.default)(this, monoEncoder2D);
    
    
            this.initialized = false;
    
            this.ctx = audioCtx;
            this.order = order;
            this.nCh = 2 * order + 1;
            this.azim = 0;
            this.elev = 0;
            this.gains = new Array(this.nCh);
            this.gainNodes = new Array(this.nCh);
            this.in = this.ctx.createGain();
            this.in.channelCountMode = 'explicit';
            this.in.channelCount = 1;
            this.out = this.ctx.createChannelMerger(this.nCh);
            // Initialize encoding gains
            for (var i = 0; i < this.nCh; i++) {
                this.gainNodes[i] = this.ctx.createGain();
                this.gainNodes[i].channelCountMode = 'explicit';
                this.gainNodes[i].channelCount = 1;
            }
            this.updateGains();
            // Make audio connections
            for (var i = 0; i < this.nCh; i++) {
                this.in.connect(this.gainNodes[i]);
                this.gainNodes[i].connect(this.out, 0, i);
            }
    
            this.initialized = true;
        }
    
        (0, _createClass3.default)(monoEncoder2D, [{
            key: 'updateGains',
            value: function updateGains() {
                var N = this.order;
                var g_enc = utils.getCircHarmonics(N, [this.azim]);
    
                for (var i = 0; i < this.nCh; i++) {
                    this.gainNodes[i].gain.value = g_enc[i][0];
                }
            }
        }]);
        return monoEncoder2D;
    }();
    
    exports.default = monoEncoder2D;
    
    },{"./utils.js":25,"babel-runtime/helpers/classCallCheck":28,"babel-runtime/helpers/createClass":29}],10:[function(require,module,exports){
    "use strict";
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");
    
    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
    
    var _createClass2 = require("babel-runtime/helpers/createClass");
    
    var _createClass3 = _interopRequireDefault(_createClass2);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    ////////////////////////////////////////////////////////////////////
    //  Archontis Politis
    //  archontis.politis@aalto.fi
    //  David Poirier-Quinot
    //  davipoir@ircam.fr
    ////////////////////////////////////////////////////////////////////
    //
    //  JSAmbisonics a JavaScript library for higher-order Ambisonics
    //  The library implements Web Audio blocks that perform
    //  typical ambisonic processing operations on audio signals.
    //
    ////////////////////////////////////////////////////////////////////
    
    ///////////////////////
    /* HOA ORDER LIMITER */
    ///////////////////////
    
    var orderLimiter = function () {
        function orderLimiter(audioCtx, orderIn, orderOut) {
            (0, _classCallCheck3.default)(this, orderLimiter);
    
    
            this.ctx = audioCtx;
            this.orderIn = orderIn;
            if (orderOut < orderIn) this.orderOut = orderOut;else this.orderOut = orderIn;
    
            this.nChIn = (this.orderIn + 1) * (this.orderIn + 1);
            this.nChOut = (this.orderOut + 1) * (this.orderOut + 1);
            this.in = this.ctx.createChannelSplitter(this.nChIn);
            this.out = this.ctx.createChannelMerger(this.nChOut);
    
            for (var i = 0; i < this.nChOut; i++) {
                this.in.connect(this.out, i, i);
            }
        }
    
        (0, _createClass3.default)(orderLimiter, [{
            key: "updateOrder",
            value: function updateOrder(orderOut) {
    
                if (orderOut <= this.orderIn) {
                    this.orderOut = orderOut;
                } else return;
    
                this.nChOut = (this.orderOut + 1) * (this.orderOut + 1);
                this.out.disconnect();
                this.out = this.ctx.createChannelMerger(this.nChOut);
    
                for (var i = 0; i < this.nChOut; i++) {
                    this.in.connect(this.out, i, i);
                }
            }
        }]);
        return orderLimiter;
    }();
    
    exports.default = orderLimiter;
    
    },{"babel-runtime/helpers/classCallCheck":28,"babel-runtime/helpers/createClass":29}],11:[function(require,module,exports){
    "use strict";
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");
    
    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
    
    var _createClass2 = require("babel-runtime/helpers/createClass");
    
    var _createClass3 = _interopRequireDefault(_createClass2);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    ////////////////////////////////////////////////////////////////////
    //  Archontis Politis
    //  archontis.politis@aalto.fi
    //  David Poirier-Quinot
    //  davipoir@ircam.fr
    ////////////////////////////////////////////////////////////////////
    //
    //  JSAmbisonics a JavaScript library for higher-order Ambisonics
    //  The library implements Web Audio blocks that perform
    //  typical ambisonic processing operations on audio signals.
    //
    ////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////
    //
    //  orderLimiter for 2D use
    //  adapted by Thomas Deppisch
    //  thomas.deppisch93@gmail.com
    //
    ////////////////////////////////////////////////////////////////////
    /////////////////////////
    /* HOA ORDER LIMITER 2D*/
    /////////////////////////
    
    var orderLimiter2D = function () {
        function orderLimiter2D(audioCtx, orderIn, orderOut) {
            (0, _classCallCheck3.default)(this, orderLimiter2D);
    
    
            this.ctx = audioCtx;
            this.orderIn = orderIn;
            if (orderOut < orderIn) this.orderOut = orderOut;else this.orderOut = orderIn;
    
            this.nChIn = 2 * this.orderIn + 1;
            this.nChOut = 2 * this.orderOut + 1;
            this.in = this.ctx.createChannelSplitter(this.nChIn);
            this.out = this.ctx.createChannelMerger(this.nChOut);
    
            for (var i = 0; i < this.nChOut; i++) {
                this.in.connect(this.out, i, i);
            }
        }
    
        (0, _createClass3.default)(orderLimiter2D, [{
            key: "updateOrder",
            value: function updateOrder(orderOut) {
    
                if (orderOut <= this.orderIn) {
                    this.orderOut = orderOut;
                } else return;
    
                this.nChOut = 2 * this.orderOut + 1;
                this.out.disconnect();
                this.out = this.ctx.createChannelMerger(this.nChOut);
    
                for (var i = 0; i < this.nChOut; i++) {
                    this.in.connect(this.out, i, i);
                }
            }
        }]);
        return orderLimiter2D;
    }();
    
    exports.default = orderLimiter2D;
    
    },{"babel-runtime/helpers/classCallCheck":28,"babel-runtime/helpers/createClass":29}],12:[function(require,module,exports){
    'use strict';
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');
    
    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
    
    var _createClass2 = require('babel-runtime/helpers/createClass');
    
    var _createClass3 = _interopRequireDefault(_createClass2);
    
    var _sphericalHarmonicTransform = require('spherical-harmonic-transform');
    
    var jshlib = _interopRequireWildcard(_sphericalHarmonicTransform);
    
    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    var orderWeight = function () {
        function orderWeight(audioCtx, order) {
            (0, _classCallCheck3.default)(this, orderWeight);
    
    
            this.ctx = audioCtx;
            this.order = order;
    
            this.nCh = (this.order + 1) * (this.order + 1);
            this.in = this.ctx.createChannelSplitter(this.nCh);
            this.out = this.ctx.createChannelMerger(this.nCh);
    
            this.gains = new Array(this.nCh);
            this.orderGains = new Array(this.order + 1);
            this.orderGains.fill(1);
    
            // initialize gains and connections
            for (var i = 0; i < this.nCh; i++) {
                this.gains[i] = this.ctx.createGain();
    
                this.in.connect(this.gains[i], i, 0);
                this.gains[i].connect(this.out, 0, i);
            }
        }
    
        (0, _createClass3.default)(orderWeight, [{
            key: 'updateOrderGains',
            value: function updateOrderGains() {
    
                var n;
                for (var i = 0; i < this.nCh; i++) {
    
                    n = Math.floor(Math.sqrt(i));
                    this.gains[i].gain.value = this.orderGains[n];
                }
            }
        }, {
            key: 'computeMaxRECoeffs',
            value: function computeMaxRECoeffs() {
    
                var N = this.order;
                this.orderGains[0] = 1;
                var leg_n_minus1 = 0;
                var leg_n_minus2 = 0;
                var leg_n = 0;
                for (var n = 1; n <= N; n++) {
                    leg_n = jshlib.recurseLegendrePoly(n, [Math.cos(2.406809 / (N + 1.51))], leg_n_minus1, leg_n_minus2);
                    this.orderGains[n] = leg_n[0][0];
    
                    leg_n_minus2 = leg_n_minus1;
                    leg_n_minus1 = leg_n;
                }
            }
        }]);
        return orderWeight;
    }(); ////////////////////////////////////////////////////////////////////
    //  Archontis Politis
    //  archontis.politis@aalto.fi
    //  David Poirier-Quinot
    //  davipoir@ircam.fr
    ////////////////////////////////////////////////////////////////////
    //
    //  JSAmbisonics a JavaScript library for higher-order Ambisonics
    //  The library implements Web Audio blocks that perform
    //  typical ambisonic processing operations on audio signals.
    //
    ////////////////////////////////////////////////////////////////////
    
    /////////////////////////
    /* HOA ORDER WEIGHTING */
    /////////////////////////
    
    exports.default = orderWeight;
    
    },{"babel-runtime/helpers/classCallCheck":28,"babel-runtime/helpers/createClass":29,"spherical-harmonic-transform":83}],13:[function(require,module,exports){
    'use strict';
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');
    
    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
    
    var _createClass2 = require('babel-runtime/helpers/createClass');
    
    var _createClass3 = _interopRequireDefault(_createClass2);
    
    require('get-float-time-domain-data');
    
    var _numeric = require('numeric');
    
    var numeric = _interopRequireWildcard(_numeric);
    
    var _sphericalHarmonicTransform = require('spherical-harmonic-transform');
    
    var jshlib = _interopRequireWildcard(_sphericalHarmonicTransform);
    
    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    var utils = require('./utils.js'); ////////////////////////////////////////////////////////////////////
    //  Archontis Politis
    //  archontis.politis@aalto.fi
    //  David Poirier-Quinot
    //  davipoir@ircam.fr
    ////////////////////////////////////////////////////////////////////
    //
    //  JSAmbisonics a JavaScript library for higher-order Ambisonics
    //  The library implements Web Audio blocks that perform
    //  typical ambisonic processing operations on audio signals.
    //
    ////////////////////////////////////////////////////////////////////
    
    /////////////////////////////////
    /* HOA POWERMAP ANALYZER */
    /////////////////////////////////
    
    ////// NOT COMPLETED YET !!! ///////
    
    // for Safari support where audioContext.Analyser.getFloatTimeDomainData is not defined for now
    
    var powermapAnalyser = function () {
        function powermapAnalyser(audioCtx, order, mode) {
            (0, _classCallCheck3.default)(this, powermapAnalyser);
    
    
            this.ctx = audioCtx;
            this.order = order;
            this.nCh = (order + 1) * (order + 1);
            this.fftSize = 2048;
            this.analysers = new Array(this.nCh);
            this.analBuffers = new Array(this.nCh);
            // Input and output nodes
            this.in = this.ctx.createChannelSplitter(this.nCh);
            this.out = this.ctx.createChannelMerger(this.nCh);
            // Initialize analyzer buffers
            for (var i = 0; i < this.nCh; i++) {
                this.analysers[i] = this.ctx.createAnalyser();
                this.analysers[i].fftSize = this.fftSize;
                this.analysers[i].smoothingTimeConstant = 0;
                this.analBuffers[i] = new Float32Array(this.fftSize);
            }
            // Create connections
            for (var _i = 0; _i < this.nCh; _i++) {
                this.in.connect(this.out, _i, _i);
                this.in.connect(this.analysers[_i], _i, 0);
            }
    
            // Initialise t-Design for power map
            var td_dirs_deg = utils.getTdesign(4 * order);
            this.td_dirs_rad = utils.deg2rad(td_dirs_deg);
            // SH sampling matrix
            this.SHmtx = jshlib.computeRealSH(this.order, this.td_dirs_rad);
            this.mode = mode;
            //        this.nCoeffs = (2*this.order+1)*(2*this.order+1)
            //        this.powerCoeffs = new Array( this.nCoeffs );
            //        this.powerCoeffs.fill(0);
            //        // Smoothing coefficient
            //        this.smoothCoeff = 0.5;
        }
    
        (0, _createClass3.default)(powermapAnalyser, [{
            key: 'updateBuffers',
            value: function updateBuffers() {
                // Get latest time-domain data
                for (var i = 0; i < this.nCh; i++) {
                    this.analysers[i].getFloatTimeDomainData(this.analBuffers[i]);
                }
            }
        }, {
            key: 'computePowermap',
            value: function computePowermap() {
    
                var nDirs = this.td_dirs_rad.length;
                // reconstruction
                var data = numeric.dot(numeric.transpose(this.SHmtx), this.analBuffers);
                // compute directional power
                var powerValues = new Array(nDirs);
                // Accumulators for energies
                for (var i = 0; i < nDirs; i++) {
                    for (var n = 0; n < this.fftSize; n++) {
                        var tmp_pwr = 0;
                        tmp_pwr = tmp_pwr + data[i][n] * data[i][n];
                    }
                    var tmp_pwr = tmp_pwr / this.fftSize;
                    powerValues[i] = [this.td_dirs_rad[i][0], this.td_dirs_rad[i][1], tmp_pwr];
                }
    
                if (this.mode == 0) return powerValues;else if (this.mode == 1) {
                    // Re-encode directional energy to SH coefficients
                    var powerCoeffs = jshlib.forwardSHT(2 * this.order, powerValues);
                    return powerCoeffs;
                }
    
                //        // Smooth coefficients
                //        for (var i = 0; i < this.nCoeffs; i++) this.powerCoeffs[i] = this.smoothCoeff*this.powerCoeffs[i] + (1-this.smoothCoeff)*powerCoeffs[i];
                //        
                //        return this.powerCoeffs;
            }
        }]);
        return powermapAnalyser;
    }();
    
    exports.default = powermapAnalyser;
    
    },{"./utils.js":25,"babel-runtime/helpers/classCallCheck":28,"babel-runtime/helpers/createClass":29,"get-float-time-domain-data":60,"numeric":65,"spherical-harmonic-transform":83}],14:[function(require,module,exports){
    'use strict';
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');
    
    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
    
    var _createClass2 = require('babel-runtime/helpers/createClass');
    
    var _createClass3 = _interopRequireDefault(_createClass2);
    
    require('get-float-time-domain-data');
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    var rmsAnalyser = function () {
        function rmsAnalyser(audioCtx, order) {
            (0, _classCallCheck3.default)(this, rmsAnalyser);
    
    
            this.ctx = audioCtx;
            this.order = order;
            this.nCh = (order + 1) * (order + 1);
            this.fftSize = 2048;
            // Input and output nodes
            this.in = this.ctx.createChannelSplitter(this.nCh);
            this.out = this.ctx.createChannelMerger(this.nCh);
            // Initialize analyzer buffers
            this.analysers = new Array(this.nCh);
            this.analBuffers = new Array(this.nCh);
            for (var i = 0; i < this.nCh; i++) {
                this.analysers[i] = this.ctx.createAnalyser();
                this.analysers[i].fftSize = this.fftSize;
                this.analysers[i].smoothingTimeConstant = 0;
                this.analBuffers[i] = new Float32Array(this.fftSize);
                // Create connections
                this.in.connect(this.analysers[i], i, 0);
                this.analysers[i].connect(this.out, 0, i);
            }
        }
    
        (0, _createClass3.default)(rmsAnalyser, [{
            key: 'updateBuffers',
            value: function updateBuffers() {
                // Get latest time-domain data
                for (var i = 0; i < this.nCh; i++) {
                    this.analysers[i].getFloatTimeDomainData(this.analBuffers[i]);
                }
            }
        }, {
            key: 'computeRMS',
            value: function computeRMS() {
    
                var rms_values = new Array(this.nCh);
                rms_values.fill(0);
                // Accumulators for energies
                for (var i = 0; i < this.nCh; i++) {
                    for (var n = 0; n < this.fftSize; n++) {
                        rms_values[i] = rms_values[i] + this.analBuffers[i][n] * this.analBuffers[i][n];
                    }
                    rms_values[i] = Math.sqrt(rms_values[i] / this.fftSize);
                }
                return rms_values;
            }
        }]);
        return rmsAnalyser;
    }(); ////////////////////////////////////////////////////////////////////
    //  Archontis Politis
    //  archontis.politis@aalto.fi
    //  David Poirier-Quinot
    //  davipoir@ircam.fr
    ////////////////////////////////////////////////////////////////////
    //
    //  JSAmbisonics a JavaScript library for higher-order Ambisonics
    //  The library implements Web Audio blocks that perform
    //  typical ambisonic processing operations on audio signals.
    //
    ////////////////////////////////////////////////////////////////////
    
    //////////////////////////////////////////
    /* RMS AMPLITUDE ANALYZER */
    //////////////////////////////////////////
    
    // for Safari support where audioContext.Analyser.getFloatTimeDomainData is not defined for now
    
    
    exports.default = rmsAnalyser;
    
    },{"babel-runtime/helpers/classCallCheck":28,"babel-runtime/helpers/createClass":29,"get-float-time-domain-data":60}],15:[function(require,module,exports){
    "use strict";
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");
    
    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
    
    var _createClass2 = require("babel-runtime/helpers/createClass");
    
    var _createClass3 = _interopRequireDefault(_createClass2);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    ////////////////////////////////////////////////////////////////////
    //  Archontis Politis
    //  archontis.politis@aalto.fi
    //  David Poirier-Quinot
    //  davipoir@ircam.fr
    ////////////////////////////////////////////////////////////////////
    //
    //  JSAmbisonics a JavaScript library for higher-order Ambisonics
    //  The library implements Web Audio blocks that perform
    //  typical ambisonic processing operations on audio signals.
    //
    ////////////////////////////////////////////////////////////////////
    
    /////////////////
    /* HOA MIRROR */
    /////////////////
    
    var sceneMirror = function () {
        function sceneMirror(audioCtx, order) {
            (0, _classCallCheck3.default)(this, sceneMirror);
    
    
            this.ctx = audioCtx;
            this.order = order;
            this.nCh = (order + 1) * (order + 1);
            this.mirrorPlane = 0;
            // Input and output nodes
            this.in = this.ctx.createChannelSplitter(this.nCh);
            this.out = this.ctx.createChannelMerger(this.nCh);
            // Initialize mirroring gains to unity (no reflection) and connect
            this.gains = new Array(this.nCh);
            for (var q = 0; q < this.nCh; q++) {
                this.gains[q] = this.ctx.createGain();
                this.gains[q].gain.value = 1;
                // Create connections
                this.in.connect(this.gains[q], q, 0);
                this.gains[q].connect(this.out, 0, q);
            }
        }
    
        (0, _createClass3.default)(sceneMirror, [{
            key: "reset",
            value: function reset() {
    
                for (var q = 0; q < this.nCh; q++) {
                    this.gains[q].gain.value = 1;
                }
            }
        }, {
            key: "mirror",
            value: function mirror(planeNo) {
    
                switch (planeNo) {
                    case 0:
                        this.mirrorPlane = 0;
                        this.reset();
                        break;
                    case 1:
                        // mirroring on yz-plane (front-back)
                        this.reset();
                        this.mirrorPlane = 1;
                        var q;
                        for (var n = 0; n <= this.order; n++) {
                            for (var m = -n; m <= n; m++) {
                                q = n * n + n + m;
                                if (m < 0 && m % 2 == 0 || m > 0 && m % 2 == 1) this.gains[q].gain.value = -1;
                            }
                        }
                        break;
                    case 2:
                        // mirroring on xz-plane (left-right)
                        this.reset();
                        this.mirrorPlane = 2;
                        var q;
                        for (var n = 0; n <= this.order; n++) {
                            for (var m = -n; m <= n; m++) {
                                q = n * n + n + m;
                                if (m < 0) this.gains[q].gain.value = -1;
                            }
                        }
                        break;
                    case 3:
                        // mirroring on xy-plane (up-down)
                        this.reset();
                        this.mirrorPlane = 3;
                        var q;
                        for (var n = 0; n <= this.order; n++) {
                            for (var m = -n; m <= n; m++) {
                                q = n * n + n + m;
                                if ((m + n) % 2 == 1) this.gains[q].gain.value = -1;
                            }
                        }
                        break;
                    default:
                        console.log("The mirroring planes can be either 1 (yz), 2 (xz), 3 (xy), or 0 (no mirroring). Value set to 0.");
                        this.mirrorPlane = 0;
                        this.reset();
                }
            }
        }]);
        return sceneMirror;
    }();
    
    exports.default = sceneMirror;
    
    },{"babel-runtime/helpers/classCallCheck":28,"babel-runtime/helpers/createClass":29}],16:[function(require,module,exports){
    "use strict";
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");
    
    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
    
    var _createClass2 = require("babel-runtime/helpers/createClass");
    
    var _createClass3 = _interopRequireDefault(_createClass2);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    ////////////////////////////////////////////////////////////////////
    //  Archontis Politis
    //  archontis.politis@aalto.fi
    //  David Poirier-Quinot
    //  davipoir@ircam.fr
    ////////////////////////////////////////////////////////////////////
    //
    //  JSAmbisonics a JavaScript library for higher-order Ambisonics
    //  The library implements Web Audio blocks that perform
    //  typical ambisonic processing operations on audio signals.
    //
    ////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////
    //
    //  sceneMirror for 2D use
    //  adapted by Thomas Deppisch
    //  thomas.deppisch93@gmail.com
    //
    ////////////////////////////////////////////////////////////////////
    //////////////////
    /* HOA MIRROR 2D*/
    //////////////////
    
    var sceneMirror2D = function () {
        function sceneMirror2D(audioCtx, order) {
            (0, _classCallCheck3.default)(this, sceneMirror2D);
    
    
            this.ctx = audioCtx;
            this.order = order;
            this.nCh = 2 * order + 1;
            this.mirrorPlane = 0;
            // Input and output nodes
            this.in = this.ctx.createChannelSplitter(this.nCh);
            this.out = this.ctx.createChannelMerger(this.nCh);
            // Initialize mirroring gains to unity (no reflection) and connect
            this.gains = new Array(this.nCh);
            for (var q = 0; q < this.nCh; q++) {
                this.gains[q] = this.ctx.createGain();
                this.gains[q].gain.value = 1;
                // Create connections
                this.in.connect(this.gains[q], q, 0);
                this.gains[q].connect(this.out, 0, q);
            }
        }
    
        (0, _createClass3.default)(sceneMirror2D, [{
            key: "reset",
            value: function reset() {
    
                for (var q = 0; q < this.nCh; q++) {
                    this.gains[q].gain.value = 1;
                }
            }
        }, {
            key: "mirror",
            value: function mirror(planeNo) {
    
                switch (planeNo) {
                    case 0:
                        this.mirrorPlane = 0;
                        this.reset();
                        break;
                    case 1:
                        // mirroring on yz-plane (front-back)
                        this.reset();
                        this.mirrorPlane = 1;
                        for (var i = 2; i < this.nCh; i++) {
                            this.gains[i].gain.value = -1;
                            if (i % 2 != 0) i = i + 2;
                        }
                        break;
                    case 2:
                        // mirroring on xz-plane (left-right)
                        this.reset();
                        this.mirrorPlane = 2;
                        for (var i = 0; i < this.nCh; i++) {
                            if (i % 2 != 0) this.gains[i].gain.value = -1;
                        }
                        break;
                    case 3:
                        // mirroring on xy-plane (up-down)
                        console.log("up-down mirroring in 2D mode not possible");
                        break;
                    default:
                        console.log("The mirroring planes can be either 1 (yz), 2 (xz) or 0 (no mirroring). Value set to 0.");
                        this.mirrorPlane = 0;
                        this.reset();
                }
            }
        }]);
        return sceneMirror2D;
    }();
    
    exports.default = sceneMirror2D;
    
    },{"babel-runtime/helpers/classCallCheck":28,"babel-runtime/helpers/createClass":29}],17:[function(require,module,exports){
    'use strict';
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');
    
    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
    
    var _createClass2 = require('babel-runtime/helpers/createClass');
    
    var _createClass3 = _interopRequireDefault(_createClass2);
    
    var _sphericalHarmonicTransform = require('spherical-harmonic-transform');
    
    var jshlib = _interopRequireWildcard(_sphericalHarmonicTransform);
    
    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    var sceneRotator = function () {
        function sceneRotator(audioCtx, order) {
            (0, _classCallCheck3.default)(this, sceneRotator);
    
    
            this.ctx = audioCtx;
            this.order = order;
            this.nCh = (order + 1) * (order + 1);
            this.yaw = 0;
            this.pitch = 0;
            this.roll = 0;
            this.rotMtx = numeric.identity(this.nCh);
            this.rotMtxNodes = new Array(this.order);
            // Input and output nodes
            this.in = this.ctx.createChannelSplitter(this.nCh);
            this.out = this.ctx.createChannelMerger(this.nCh);
    
            // Initialize rotation gains to identity matrix
            for (var n = 1; n <= this.order; n++) {
    
                var gains_n = new Array(2 * n + 1);
                for (var i = 0; i < 2 * n + 1; i++) {
                    gains_n[i] = new Array(2 * n + 1);
                    for (var j = 0; j < 2 * n + 1; j++) {
                        gains_n[i][j] = this.ctx.createGain();
                        if (i == j) gains_n[i][j].gain.value = 1;else gains_n[i][j].gain.value = 0;
                    }
                }
                this.rotMtxNodes[n - 1] = gains_n;
            }
    
            // Create connections
            this.in.connect(this.out, 0, 0); // zeroth order ch. does not rotate
    
            var band_idx = 1;
            for (n = 1; n <= this.order; n++) {
                for (i = 0; i < 2 * n + 1; i++) {
                    for (j = 0; j < 2 * n + 1; j++) {
                        this.in.connect(this.rotMtxNodes[n - 1][i][j], band_idx + j, 0);
                        this.rotMtxNodes[n - 1][i][j].connect(this.out, 0, band_idx + i);
                    }
                }
                band_idx = band_idx + 2 * n + 1;
            }
        }
    
        (0, _createClass3.default)(sceneRotator, [{
            key: 'updateRotMtx',
            value: function updateRotMtx() {
    
                var yaw = this.yaw * Math.PI / 180;
                var pitch = this.pitch * Math.PI / 180;
                var roll = this.roll * Math.PI / 180;
    
                this.rotMtx = jshlib.getSHrotMtx(jshlib.yawPitchRoll2Rzyx(yaw, pitch, roll), this.order);
    
                var band_idx = 1;
                for (var n = 1; n < this.order + 1; n++) {
    
                    for (var i = 0; i < 2 * n + 1; i++) {
                        for (var j = 0; j < 2 * n + 1; j++) {
                            this.rotMtxNodes[n - 1][i][j].gain.value = this.rotMtx[band_idx + i][band_idx + j];
                        }
                    }
                    band_idx = band_idx + 2 * n + 1;
                }
            }
        }]);
        return sceneRotator;
    }(); ////////////////////////////////////////////////////////////////////
    //  Archontis Politis
    //  archontis.politis@aalto.fi
    //  David Poirier-Quinot
    //  davipoir@ircam.fr
    ////////////////////////////////////////////////////////////////////
    //
    //  JSAmbisonics a JavaScript library for higher-order Ambisonics
    //  The library implements Web Audio blocks that perform
    //  typical ambisonic processing operations on audio signals.
    //
    ////////////////////////////////////////////////////////////////////
    
    /////////////////
    /* HOA ROTATOR */
    /////////////////
    
    exports.default = sceneRotator;
    
    },{"babel-runtime/helpers/classCallCheck":28,"babel-runtime/helpers/createClass":29,"spherical-harmonic-transform":83}],18:[function(require,module,exports){
    "use strict";
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");
    
    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
    
    var _createClass2 = require("babel-runtime/helpers/createClass");
    
    var _createClass3 = _interopRequireDefault(_createClass2);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    ////////////////////////////////////////////////////////////////////
    //  Archontis Politis
    //  archontis.politis@aalto.fi
    //  David Poirier-Quinot
    //  davipoir@ircam.fr
    ////////////////////////////////////////////////////////////////////
    //
    //  JSAmbisonics a JavaScript library for higher-order Ambisonics
    //  The library implements Web Audio blocks that perform
    //  typical ambisonic processing operations on audio signals.
    //
    ////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////
    //
    //  sceneRotator for 2D use
    //  adapted by Thomas Deppisch
    //  thomas.deppisch93@gmail.com
    //
    ////////////////////////////////////////////////////////////////////
    ////////////////////
    /* HOA ROTATOR 2D */
    ///////////////////
    
    var sceneRotator2D = function () {
        function sceneRotator2D(audioCtx, order) {
            (0, _classCallCheck3.default)(this, sceneRotator2D);
    
    
            this.ctx = audioCtx;
            this.order = order;
            this.nCh = 2 * order + 1;
            this.yaw = 0;
    
            // Input and output nodes
            this.in = this.ctx.createChannelSplitter(this.nCh);
            this.out = this.ctx.createChannelMerger(this.nCh);
    
            this.rotMtxNodes = new Array(2 * this.order);
            this.in.connect(this.out, 0, 0); // W channel does not rotate
    
            //initialize gain nodes
            for (var i = 0; i < 2 * this.order; i = i + 2) {
                // every output needs two gain nodes
                var tempGainArr = new Array(2);
                tempGainArr[0] = this.ctx.createGain();
                tempGainArr[1] = this.ctx.createGain();
                var tempGainArr2 = new Array(2);
                tempGainArr2[0] = this.ctx.createGain();
                tempGainArr2[1] = this.ctx.createGain();
    
                this.rotMtxNodes[i] = tempGainArr;
                this.rotMtxNodes[i + 1] = tempGainArr2;
                //Input Channels: [W,Y,X,Y2,X2,Y3,X3,...]
                this.in.connect(this.rotMtxNodes[i][0], i + 1, 0);
                this.rotMtxNodes[i][0].connect(this.out, 0, i + 1);
                this.in.connect(this.rotMtxNodes[i][1], i + 2, 0);
                this.rotMtxNodes[i][1].connect(this.out, 0, i + 1);
    
                this.in.connect(this.rotMtxNodes[i + 1][0], i + 1, 0);
                this.rotMtxNodes[i + 1][0].connect(this.out, 0, i + 2);
                this.in.connect(this.rotMtxNodes[i + 1][1], i + 2, 0);
                this.rotMtxNodes[i + 1][1].connect(this.out, 0, i + 2);
            }
            // initialize rotation matrix
            this.updateRotMtx();
        }
    
        (0, _createClass3.default)(sceneRotator2D, [{
            key: "updateRotMtx",
            value: function updateRotMtx() {
                var azim = this.yaw * Math.PI / 180;
                var j = 1;
                for (var i = 0; i < 2 * this.order; i = i + 2) {
                    // channels are ACN ordered!
                    this.rotMtxNodes[i][0].gain.value = Math.cos(j * azim);
                    this.rotMtxNodes[i][1].gain.value = Math.sin(j * azim);
                    this.rotMtxNodes[i + 1][0].gain.value = -Math.sin(j * azim);
                    this.rotMtxNodes[i + 1][1].gain.value = Math.cos(j * azim);
                    j++;
                }
            }
        }]);
        return sceneRotator2D;
    }();
    
    exports.default = sceneRotator2D;
    
    },{"babel-runtime/helpers/classCallCheck":28,"babel-runtime/helpers/createClass":29}],19:[function(require,module,exports){
    "use strict";
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");
    
    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
    
    var _createClass2 = require("babel-runtime/helpers/createClass");
    
    var _createClass3 = _interopRequireDefault(_createClass2);
    
    var _sphericalHarmonicTransform = require("spherical-harmonic-transform");
    
    var jshlib = _interopRequireWildcard(_sphericalHarmonicTransform);
    
    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    var virtualMic = function () {
        function virtualMic(audioCtx, order) {
            (0, _classCallCheck3.default)(this, virtualMic);
    
    
            this.initialized = false;
    
            this.ctx = audioCtx;
            this.order = order;
            this.nCh = (order + 1) * (order + 1);
            this.azim = 0;
            this.elev = 0;
            this.vmicGains = new Array(this.nCh);
            this.vmicGainNodes = new Array(this.nCh);
            this.vmicCoeffs = new Array(this.order + 1);
            this.vmicPattern = "hypercardioid";
            this.in = this.ctx.createChannelSplitter(this.nCh);
            this.out = this.ctx.createGain();
    
            // Initialize vmic to forward facing hypercardioid
            for (var i = 0; i < this.nCh; i++) {
                this.vmicGainNodes[i] = this.ctx.createGain();
            }
            this.SHxyz = new Array(this.nCh);
            this.SHxyz.fill(0);
            this.updatePattern();
            this.updateOrientation();
    
            // Create connections
            for (i = 0; i < this.nCh; i++) {
                this.in.connect(this.vmicGainNodes[i], i, 0);
                this.vmicGainNodes[i].connect(this.out);
            }
    
            this.initialized = true;
        }
    
        (0, _createClass3.default)(virtualMic, [{
            key: "updatePattern",
            value: function updatePattern() {
    
                function computeCardioidCoeffs(N) {
                    var coeffs = new Array(N + 1);
                    for (var n = 0; n <= N; n++) {
                        coeffs[n] = jshlib.factorial(N) * jshlib.factorial(N) / (jshlib.factorial(N + n + 1) * jshlib.factorial(N - n));
                    }
                    return coeffs;
                }
    
                function computeHypercardCoeffs(N) {
                    var coeffs = new Array(N + 1);
                    var nSH = (N + 1) * (N + 1);
                    for (var n = 0; n <= N; n++) {
                        coeffs[n] = 1 / nSH;
                    }
                    return coeffs;
                }
    
                function computeSupercardCoeffs(N) {
                    switch (N) {
                        case 1:
                            var coeffs = [0.3660, 0.2113];
                            break;
                        case 2:
                            var coeffs = [0.2362, 0.1562, 0.0590];
                            break;
                        case 3:
                            var coeffs = [0.1768, 0.1281, 0.0633, 0.0175];
                            break;
                        case 4:
                            var coeffs = [0.1414, 0.1087, 0.0623, 0.0247, 0.0054];
                            break;
                        default:
                            console.error("Orders should be in the range of 1-4 at the moment.");
                            return;
                    }
                    return coeffs;
                }
    
                function computeMaxRECoeffs(N) {
                    var coeffs = new Array(N + 1);
                    coeffs[0] = 1;
                    var leg_n_minus1 = 0;
                    var leg_n_minus2 = 0;
                    var leg_n = 0;
                    for (var n = 1; n < N + 1; n++) {
                        leg_n = jshlib.recurseLegendrePoly(n, [Math.cos(2.406809 / (N + 1.51))], leg_n_minus1, leg_n_minus2);
                        coeffs[n] = leg_n[0][0];
    
                        leg_n_minus2 = leg_n_minus1;
                        leg_n_minus1 = leg_n;
                    }
                    // compute normalization factor
                    var norm = 0;
                    for (var n = 0; n <= N; n++) {
                        norm += coeffs[n] * (2 * n + 1);
                    }
                    for (var n = 0; n <= N; n++) {
                        coeffs[n] = coeffs[n] / norm;
                    }
                    return coeffs;
                }
    
                switch (this.vmicPattern) {
                    case "cardioid":
                        // higher-order cardioid given by: (1/2)^N * ( 1+cos(theta) )^N
                        this.vmicCoeffs = computeCardioidCoeffs(this.order);
                        break;
                    case "supercardioid":
                        // maximum front-back energy ratio
                        this.vmicCoeffs = computeSupercardCoeffs(this.order);
                        break;
                    case "hypercardioid":
                        // maximum directivity factor
                        // (this is the classic plane/wave decomposition beamformer,
                        // also termed "regular" in spherical beamforming literature)
                        this.vmicCoeffs = computeHypercardCoeffs(this.order);
                        break;
                    case "max_rE":
                        // quite similar to maximum front-back rejection
                        this.vmicCoeffs = computeMaxRECoeffs(this.order);
                        break;
                    default:
                        this.vmicPattern = "hypercardioid";
                        this.vmicCoeffs = computeHypercardCoeffs(this.order);
                }
    
                this.updateGains();
            }
        }, {
            key: "updateOrientation",
            value: function updateOrientation() {
    
                var azim = this.azim * Math.PI / 180;
                var elev = this.elev * Math.PI / 180;
    
                var tempSH = jshlib.computeRealSH(this.order, [[azim, elev]]);
    
                for (var i = 0; i < this.nCh; i++) {
                    this.SHxyz[i] = tempSH[i][0];
                }
    
                this.updateGains();
            }
        }, {
            key: "updateGains",
            value: function updateGains() {
    
                var q;
                for (var n = 0; n <= this.order; n++) {
                    for (var m = -n; m <= n; m++) {
                        q = n * n + n + m;
                        this.vmicGains[q] = this.vmicCoeffs[n] * this.SHxyz[q];
                    }
                }
    
                for (var i = 0; i < this.nCh; i++) {
                    this.vmicGainNodes[i].gain.value = this.vmicGains[i];
                }
            }
        }]);
        return virtualMic;
    }(); ////////////////////////////////////////////////////////////////////
    //  Archontis Politis
    //  archontis.politis@aalto.fi
    //  David Poirier-Quinot
    //  davipoir@ircam.fr
    ////////////////////////////////////////////////////////////////////
    //
    //  JSAmbisonics a JavaScript library for higher-order Ambisonics
    //  The library implements Web Audio blocks that perform
    //  typical ambisonic processing operations on audio signals.
    //
    ////////////////////////////////////////////////////////////////////
    
    /////////////////////////////////
    /* HOA VIRTUAL MICROPHONE */
    /////////////////////////////////
    
    exports.default = virtualMic;
    
    },{"babel-runtime/helpers/classCallCheck":28,"babel-runtime/helpers/createClass":29,"spherical-harmonic-transform":83}],20:[function(require,module,exports){
    "use strict";
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");
    
    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
    
    var _createClass2 = require("babel-runtime/helpers/createClass");
    
    var _createClass3 = _interopRequireDefault(_createClass2);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    ////////////////////////////////////////////////////////////////////
    //  Archontis Politis
    //  archontis.politis@aalto.fi
    //  David Poirier-Quinot
    //  davipoir@ircam.fr
    ////////////////////////////////////////////////////////////////////
    //
    //  JSAmbisonics a JavaScript library for higher-order Ambisonics
    //  The library implements Web Audio blocks that perform
    //  typical ambisonic processing operations on audio signals.
    //
    ////////////////////////////////////////////////////////////////////
    
    ////////////////
    /* HOA LOADER */
    ////////////////
    
    var HOAloader = function () {
        function HOAloader(context, order, url, callback) {
            (0, _classCallCheck3.default)(this, HOAloader);
    
            this.context = context;
            this.order = order;
            this.nCh = (order + 1) * (order + 1);
            this.nChGroups = Math.ceil(this.nCh / 8);
            this.buffers = new Array();
            this.loadCount = 0;
            this.loaded = false;
            this.onLoad = callback;
            this.urls = new Array(this.nChGroups);
    
            var fileExt = url.slice(url.length - 3, url.length);
            this.fileExt = fileExt;
    
            for (var i = 0; i < this.nChGroups; i++) {
    
                if (i == this.nChGroups - 1) {
                    this.urls[i] = url.slice(0, url.length - 4) + "_" + pad(i * 8 + 1, 2) + "-" + pad(this.nCh, 2) + "ch." + fileExt;
                } else {
                    this.urls[i] = url.slice(0, url.length - 4) + "_" + pad(i * 8 + 1, 2) + "-" + pad(i * 8 + 8, 2) + "ch." + fileExt;
                }
            }
    
            function pad(num, size) {
                return ('000000000' + num).substr(-size);
            }
        }
    
        (0, _createClass3.default)(HOAloader, [{
            key: "loadBuffers",
            value: function loadBuffers(url, index) {
                // Load buffer asynchronously
                var request = new XMLHttpRequest();
                request.open("GET", url, true);
                request.responseType = "arraybuffer";
    
                var scope = this;
    
                request.onload = function () {
                    // Asynchronously decode the audio file data in request.response
                    scope.context.decodeAudioData(request.response, function (buffer) {
                        if (!buffer) {
                            alert('error decoding file data: ' + url);
                            return;
                        }
                        scope.buffers[index] = buffer;
                        scope.loadCount++;
                        if (scope.loadCount == scope.nChGroups) {
                            scope.loaded = true;
                            scope.concatBuffers();
                            console.log("HOAloader: all buffers loaded and concatenated");
                            scope.onLoad(scope.concatBuffer);
                        }
                    }, function (error) {
                        alert("Browser cannot decode audio data:  " + url + "\n\nError: " + error + "\n\n(If you re using Safari and get a null error, this is most likely due to Apple's shady plan going on to stop the .ogg format from easing web developer's life :)");
                    });
                };
    
                request.onerror = function () {
                    alert('HOAloader: XHR error');
                };
    
                request.send();
            }
        }, {
            key: "load",
            value: function load() {
                for (var i = 0; i < this.nChGroups; ++i) {
                    this.loadBuffers(this.urls[i], i);
                }
            }
        }, {
            key: "concatBuffers",
            value: function concatBuffers() {
    
                if (!this.loaded) return;
    
                var nCh = this.nCh;
                var nChGroups = this.nChGroups;
    
                var length = this.buffers[0].length;
                this.buffers.forEach(function (b) {
                    length = Math.max(length, b.length);
                });
                var srate = this.buffers[0].sampleRate;
    
                // Detect if the 8-ch audio file is OGG, then remap 8-channel files to the correct
                // order cause Chrome and Firefox messes it up when loading. Other browsers have not
                // been tested with OGG files. 8ch Wave files work fine for both browsers.
                var remap8ChanFile = [1, 2, 3, 4, 5, 6, 7, 8];
                if (this.fileExt.toLowerCase() == "ogg") {
                    console.log("Loading of 8chan OGG files [Chrome/Firefox]: remap channels to correct order!");
                    remap8ChanFile = [1, 3, 2, 7, 8, 5, 6, 4];
                    //remap8ChanFile = [1,3,2,8,6,7,4,5];
                }
    
                this.concatBuffer = this.context.createBuffer(nCh, length, srate);
                for (var i = 0; i < nChGroups; i++) {
                    for (var j = 0; j < this.buffers[i].numberOfChannels; j++) {
                        this.concatBuffer.getChannelData(i * 8 + j).set(this.buffers[i].getChannelData(remap8ChanFile[j] - 1));
                    }
                }
            }
        }]);
        return HOAloader;
    }();
    
    exports.default = HOAloader;
    
    },{"babel-runtime/helpers/classCallCheck":28,"babel-runtime/helpers/createClass":29}],21:[function(require,module,exports){
    "use strict";
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");
    
    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
    
    var _createClass2 = require("babel-runtime/helpers/createClass");
    
    var _createClass3 = _interopRequireDefault(_createClass2);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    ////////////////////////////////////////////////////////////////////
    //  Archontis Politis (Aalto University)
    //  archontis.politis@aalto.fi
    //  David Poirier-Quinot (IRCAM)
    //  davipoir@ircam.fr
    ////////////////////////////////////////////////////////////////////
    //
    //  JSAmbisonics a JavaScript library for higher-order Ambisonics
    //  The library implements Web Audio blocks that perform
    //  typical ambisonic processing operations on audio signals.
    //
    ////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////
    //
    //  HRIRloader for 2D use
    //  adapted by Thomas Deppisch
    //  thomas.deppisch93@gmail.com
    //
    ////////////////////////////////////////////////////////////////////
    ///////////////////
    /* HRIR LOADER 2D*/
    ///////////////////
    
    var utils = require("./utils.js");
    
    var HRIRloader2D_local = function () {
        function HRIRloader2D_local(context, order, callback) {
            (0, _classCallCheck3.default)(this, HRIRloader2D_local);
    
            this.context = context;
            this.order = order;
            this.nCh = 2 * order + 1;
            // function called when filters loaded
            this.onLoad = callback;
            // define required virtual speaker positions based on Ambisonic order
            this.vls_dirs_deg = utils.sampleCircle(2 * this.order + 2); //2n+2 virtual speakers for 2D
            this.nVLS = this.vls_dirs_deg.length;
            // angular resolution for fast lookup to closest HRIR to a given direction
            this.nearestLookupRes = [5, 5];
        }
    
        (0, _createClass3.default)(HRIRloader2D_local, [{
            key: "load",
            value: function load(setUrl) {
    
                var self = this;
                // setup the request
                var requestHrir = new XMLHttpRequest();
                requestHrir.open("GET", setUrl, true);
                requestHrir.responseType = "json";
                requestHrir.onload = function () {
                    // load useful HRIR stuff from JSON
                    self.parseHrirFromJSON(requestHrir.response);
                    // construct lookup table for fast closest HRIR finding
                    self.nearestLookup = utils.createNearestLookup(self.hrir_dirs_deg, self.nearestLookupRes);
                    // find closest indices to VLS
                    var nearestIdx = utils.findNearest(self.vls_dirs_deg, self.nearestLookup, self.nearestLookupRes);
                    // get closest HRIRs to the VLS design
                    self.nearest_dirs_deg = self.getClosestDirs(nearestIdx, self.hrir_dirs_deg);
                    self.vls_hrirs = self.getClosestHrirFilters(nearestIdx, self.hrirs);
                    // compute ambisonic decoding filters
                    self.computeDecFilters();
                };
                requestHrir.send(); // Send the Request and Load the File
            }
        }, {
            key: "parseHrirFromJSON",
            value: function parseHrirFromJSON(hrirSet) {
                var self = this;
                this.fs = hrirSet.leaves[6].data[0]; // samplerate of the set
                this.nHrirs = hrirSet.leaves[4].data.length; // number of HRIR measurements
                this.nSamples = hrirSet.leaves[8].data[0][1].length; // length of HRIRs
                // parse azimuth-elevation of HRIRs
                this.hrir_dirs_deg = [];
                hrirSet.leaves[4].data.forEach(function (element) {
                    self.hrir_dirs_deg.push([element[0], element[1]]);
                });
                // parse HRIR buffers
                this.hrirs = [];
                hrirSet.leaves[8].data.forEach(function (element) {
                    var left = new Float64Array(element[0]);
                    var right = new Float64Array(element[1]);
                    self.hrirs.push([left, right]);
                });
            }
        }, {
            key: "getClosestDirs",
            value: function getClosestDirs(nearestIdx, hrir_dirs_deg) {
                // getClosestHrirFilters(target_dirs_deg, hrir_dirs_deg, INFO) {
                var nDirs = nearestIdx.length;
                var nearest_dirs_deg = [];
                for (var i = 0; i < nDirs; i++) {
                    // get available positions (in the HRIR set) nearest from the required speakers positions
                    nearest_dirs_deg.push(hrir_dirs_deg[nearestIdx[i]]);
                }
                return nearest_dirs_deg;
                //        if (INFO) {
                //            // compare required vs. present positions in HRIR filter
                //            let angularDistDeg = 0;
                //            for (let i = 0; i < nDirs; i++) {
                //                if (this.target_dirs_deg[i][0] < 0) this.target_dirs_deg[i][0] += 360.0;
                //                angularDistDeg += Math.sqrt(
                //                                            Math.pow(this.target_dirs_deg[i][0] - grantedFilterPos[i][0], 2) +
                //                                            Math.pow(this.target_dirs_deg[i][1] - grantedFilterPos[i][1], 2));
                //                // console.log('asked / granted pos: ', this.wishedSpeakerPos[i], '/', grantedFilterPos[i]);
                //            }
                //            console.log('summed / average angular dist between target and actual pos:',
                //                        Math.round(angularDistDeg*100)/100, 'deg /',
                //                        Math.round( (angularDistDeg/this.wishedSpeakerPos.length) *100)/100, 'deg');
                //        }
            }
        }, {
            key: "getClosestHrirFilters",
            value: function getClosestHrirFilters(nearestIdx, hrirs) {
    
                var nDirs = nearestIdx.length;
                var nearest_hrirs = [];
                for (var i = 0; i < nDirs; i++) {
                    // get respective hrirs
                    nearest_hrirs.push(hrirs[nearestIdx[i]]);
                }
                return nearest_hrirs;
            }
        }, {
            key: "computeDecFilters",
            value: function computeDecFilters() {
    
                // max rE optimization
                var a_n = [];
                a_n.push(1);
                for (var i = 1; i < this.order + 1; i++) {
                    a_n.push(Math.cos(i * Math.PI / (2 * this.order + 2)));
                    a_n.push(Math.cos(i * Math.PI / (2 * this.order + 2)));
                }
                var diagA = numeric.diag(a_n);
                // get decoding matrix
                this.decodingMatrix = numeric.transpose(utils.getCircHarmonics(this.order, utils.getColumn(this.vls_dirs_deg, 0)));
                this.decodingMatrix = numeric.dot(this.decodingMatrix, diagA);
                // normalise to number of speakers
                this.decodingMatrix = numeric.mul(2 * Math.PI / this.vls_dirs_deg.length, this.decodingMatrix);
                // convert hrir filters to hoa filters
                this.hoaBuffer = this.getHoaFilterFromHrirFilter(this.nCh, this.nSamples, this.fs, this.vls_hrirs, this.decodingMatrix);
                // pass resulting hoa filters to user callback
                this.onLoad(this.hoaBuffer);
            }
        }, {
            key: "getHoaFilterFromHrirFilter",
            value: function getHoaFilterFromHrirFilter(nCh, nSamples, sampleRate, hrirs, decodingMatrix) {
                // create empty buffer ready to receive hoa filters
                if (nSamples > hrirs[0][0].length) nSamples = hrirs[0][0].length;
                var hoaBuffer = this.context.createBuffer(nCh, nSamples, sampleRate);
    
                // sum weighted HRIR over Ambisonic channels to create HOA IRs
                for (var i = 0; i < nCh; i++) {
                    var concatBufferArrayLeft = new Float32Array(nSamples);
                    for (var j = 0; j < hrirs.length; j++) {
                        for (var k = 0; k < nSamples; k++) {
                            concatBufferArrayLeft[k] += decodingMatrix[j][i] * hrirs[j][0][k];
                        }
                    }
                    hoaBuffer.getChannelData(i).set(concatBufferArrayLeft);
                }
                return hoaBuffer;
            }
        }]);
        return HRIRloader2D_local;
    }();
    
    exports.default = HRIRloader2D_local;
    
    },{"./utils.js":25,"babel-runtime/helpers/classCallCheck":28,"babel-runtime/helpers/createClass":29}],22:[function(require,module,exports){
    'use strict';
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');
    
    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
    
    var _createClass2 = require('babel-runtime/helpers/createClass');
    
    var _createClass3 = _interopRequireDefault(_createClass2);
    
    var _serveSofaHrir = require('serve-sofa-hrir');
    
    var serveSofaHrir = _interopRequireWildcard(_serveSofaHrir);
    
    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    var utils = require("./utils.js"); ////////////////////////////////////////////////////////////////////
    //  Archontis Politis (Aalto University)
    //  archontis.politis@aalto.fi
    //  David Poirier-Quinot (IRCAM)
    //  davipoir@ircam.fr
    ////////////////////////////////////////////////////////////////////
    //
    //  JSAmbisonics a JavaScript library for higher-order Ambisonics
    //  The library implements Web Audio blocks that perform
    //  typical ambisonic processing operations on audio signals.
    //
    ////////////////////////////////////////////////////////////////////
    
    /////////////////
    /* HRIR LOADER */
    /////////////////
    
    var HRIRloader_ircam = function () {
        function HRIRloader_ircam(context, order, callback) {
            (0, _classCallCheck3.default)(this, HRIRloader_ircam);
    
            this.context = context;
            this.order = order;
            this.nCh = (order + 1) * (order + 1);
    
            // fonction called when filters loaded
            this.onLoad = callback;
    
            // instantiate hrtfset from serve-sofa-hrtf lib
            this.hrtfSet = new serveSofaHrir.HrtfSet({ audioContext: this.context, coordinateSystem: 'sofaSpherical' });
    
            // define required speakers (hence hrirs) positions based on Ambisonic order
            this.wishedSpeakerPos = utils.getTdesign(2 * this.order);
        }
    
        (0, _createClass3.default)(HRIRloader_ircam, [{
            key: 'load',
            value: function load(setUrl) {
                var _this = this;
    
                this.hrtfSet.load(setUrl).then(function () {
    
                    // extract hrir buffers of interest from the database
                    var grantedFilterPos = [];
                    _this.hrirBuffer = [];
                    for (var i = 0; i < _this.wishedSpeakerPos.length; i++) {
                        // get available positions (in the db) nearest from the required speakers positions
                        grantedFilterPos.push(_this.hrtfSet.nearest(_this.wishedSpeakerPos[i]).position);
                        // get related hrir
                        _this.hrirBuffer.push(_this.hrtfSet.nearest(_this.wishedSpeakerPos[i]).fir);
                    }
    
                    // DEBUG //////////////////////////////////////////////////////
                    // compare required vs. present positions in HRIR filter
                    var angularDistDeg = 0;
                    for (var _i = 0; _i < _this.wishedSpeakerPos.length; _i++) {
                        if (_this.wishedSpeakerPos[_i][0] < 0) _this.wishedSpeakerPos[_i][0] += 360.0;
                        angularDistDeg += Math.sqrt(Math.pow(_this.wishedSpeakerPos[_i][0] - grantedFilterPos[_i][0], 2) + Math.pow(_this.wishedSpeakerPos[_i][1] - grantedFilterPos[_i][1], 2));
                        // console.log('asked / granted pos: ', this.wishedSpeakerPos[i], '/', grantedFilterPos[i]);
                    }
                    console.log('summed / average angular dist between asked and present pos:', Math.round(angularDistDeg * 100) / 100, 'deg /', Math.round(angularDistDeg / _this.wishedSpeakerPos.length * 100) / 100, 'deg');
                    // DEBUG END //////////////////////////////////////////////////
    
                    // get decoding matrix
                    _this.decodingMatrix = utils.getAmbisonicDecMtx(grantedFilterPos, _this.order);
    
                    // convert hrir filters to hoa filters
                    _this.hoaBuffer = _this.getHoaFilterFromHrirFilter();
    
                    // pass resulting hoa filters to user callback
                    _this.onLoad(_this.hoaBuffer);
                });
            }
        }, {
            key: 'getHoaFilterFromHrirFilter',
            value: function getHoaFilterFromHrirFilter() {
                // create empty buffer ready to receive hoa filters
                var hrirBufferLength = this.hrirBuffer[0].length; // assuming they all have the same
                var hrirBufferSampleRate = this.hrirBuffer[0].sampleRate; // same
                var hoaBuffer = this.context.createBuffer(this.nCh, hrirBufferLength, hrirBufferSampleRate);
    
                // sum weighted HRIR over Ambisonic channels to create HOA IRs
                for (var i = 0; i < this.nCh; i++) {
                    var concatBufferArrayLeft = new Float32Array(hrirBufferLength);
                    for (var j = 0; j < this.hrirBuffer.length; j++) {
                        for (var k = 0; k < hrirBufferLength; k++) {
                            concatBufferArrayLeft[k] += this.decodingMatrix[j][i] * this.hrirBuffer[j].getChannelData(0)[k];
                        }
                    }
                    hoaBuffer.getChannelData(i).set(concatBufferArrayLeft);
                }
    
                return hoaBuffer;
            }
        }]);
        return HRIRloader_ircam;
    }();
    
    exports.default = HRIRloader_ircam;
    
    },{"./utils.js":25,"babel-runtime/helpers/classCallCheck":28,"babel-runtime/helpers/createClass":29,"serve-sofa-hrir":74}],23:[function(require,module,exports){
    "use strict";
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");
    
    var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
    
    var _createClass2 = require("babel-runtime/helpers/createClass");
    
    var _createClass3 = _interopRequireDefault(_createClass2);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    ////////////////////////////////////////////////////////////////////
    //  Archontis Politis (Aalto University)
    //  archontis.politis@aalto.fi
    //  David Poirier-Quinot (IRCAM)
    //  davipoir@ircam.fr
    ////////////////////////////////////////////////////////////////////
    //
    //  JSAmbisonics a JavaScript library for higher-order Ambisonics
    //  The library implements Web Audio blocks that perform
    //  typical ambisonic processing operations on audio signals.
    //
    ////////////////////////////////////////////////////////////////////
    
    /////////////////
    /* HRIR LOADER */
    /////////////////
    
    var utils = require("./utils.js");
    
    var HRIRloader_local = function () {
        function HRIRloader_local(context, order, callback) {
            (0, _classCallCheck3.default)(this, HRIRloader_local);
    
            this.context = context;
            this.order = order;
            this.nCh = (order + 1) * (order + 1);
            // function called when filters loaded
            this.onLoad = callback;
            // define required virtual speaker positions based on Ambisonic order
            this.vls_dirs_deg = utils.getTdesign(2 * this.order);
            this.nVLS = this.vls_dirs_deg.length;
            // angular resolution for fast lookup to closest HRIR to a given direction
            this.nearestLookupRes = [5, 5];
        }
    
        (0, _createClass3.default)(HRIRloader_local, [{
            key: "load",
            value: function load(setUrl) {
    
                var self = this;
                // setup the request
                var requestHrir = new XMLHttpRequest();
                requestHrir.open("GET", setUrl, true);
                requestHrir.responseType = "json";
                requestHrir.onload = function () {
                    // load useful HRIR stuff from JSON
                    self.parseHrirFromJSON(requestHrir.response);
                    // construct lookup table for fast closest HRIR finding
                    self.nearestLookup = utils.createNearestLookup(self.hrir_dirs_deg, self.nearestLookupRes);
                    // find closest indices to VLS
                    var nearestIdx = utils.findNearest(self.vls_dirs_deg, self.nearestLookup, self.nearestLookupRes);
                    // get closest HRIRs to the VLS design
                    self.nearest_dirs_deg = self.getClosestDirs(nearestIdx, self.hrir_dirs_deg);
                    self.vls_hrirs = self.getClosestHrirFilters(nearestIdx, self.hrirs);
                    // compute ambisonic decoding filters
                    self.computeDecFilters();
                };
                requestHrir.send(); // Send the Request and Load the File
            }
        }, {
            key: "parseHrirFromJSON",
            value: function parseHrirFromJSON(hrirSet) {
                var self = this;
                this.fs = hrirSet.leaves[6].data[0]; // samplerate of the set
                this.nHrirs = hrirSet.leaves[4].data.length; // number of HRIR measurements
                this.nSamples = hrirSet.leaves[8].data[0][1].length; // length of HRIRs
                // parse azimuth-elevation of HRIRs
                this.hrir_dirs_deg = [];
                hrirSet.leaves[4].data.forEach(function (element) {
                    self.hrir_dirs_deg.push([element[0], element[1]]);
                });
                // parse HRIR buffers
                this.hrirs = [];
                hrirSet.leaves[8].data.forEach(function (element) {
                    var left = new Float64Array(element[0]);
                    var right = new Float64Array(element[1]);
                    self.hrirs.push([left, right]);
                });
            }
        }, {
            key: "getClosestDirs",
            value: function getClosestDirs(nearestIdx, hrir_dirs_deg) {
                // getClosestHrirFilters(target_dirs_deg, hrir_dirs_deg, INFO) {
                var nDirs = nearestIdx.length;
                var nearest_dirs_deg = [];
                for (var i = 0; i < nDirs; i++) {
                    // get available positions (in the HRIR set) nearest from the required speakers positions
                    nearest_dirs_deg.push(hrir_dirs_deg[nearestIdx[i]]);
                }
                return nearest_dirs_deg;
                //        if (INFO) {
                //            // compare required vs. present positions in HRIR filter
                //            let angularDistDeg = 0;
                //            for (let i = 0; i < nDirs; i++) {
                //                if (this.target_dirs_deg[i][0] < 0) this.target_dirs_deg[i][0] += 360.0;
                //                angularDistDeg += Math.sqrt(
                //                                            Math.pow(this.target_dirs_deg[i][0] - grantedFilterPos[i][0], 2) +
                //                                            Math.pow(this.target_dirs_deg[i][1] - grantedFilterPos[i][1], 2));
                //                // console.log('asked / granted pos: ', this.wishedSpeakerPos[i], '/', grantedFilterPos[i]);
                //            }
                //            console.log('summed / average angular dist between target and actual pos:',
                //                        Math.round(angularDistDeg*100)/100, 'deg /',
                //                        Math.round( (angularDistDeg/this.wishedSpeakerPos.length) *100)/100, 'deg');
                //        }
            }
        }, {
            key: "getClosestHrirFilters",
            value: function getClosestHrirFilters(nearestIdx, hrirs) {
    
                var nDirs = nearestIdx.length;
                var nearest_hrirs = [];
                for (var i = 0; i < nDirs; i++) {
                    // get respective hrirs
                    nearest_hrirs.push(hrirs[nearestIdx[i]]);
                }
                return nearest_hrirs;
            }
        }, {
            key: "computeDecFilters",
            value: function computeDecFilters() {
    
                // get decoding matrix
                this.decodingMatrix = utils.getAmbisonicDecMtx(this.nearest_dirs_deg, this.order);
                // convert hrir filters to hoa filters
                this.hoaBuffer = this.getHoaFilterFromHrirFilter(this.nCh, this.nSamples, this.fs, this.vls_hrirs, this.decodingMatrix);
                // pass resulting hoa filters to user callback
                this.onLoad(this.hoaBuffer);
            }
        }, {
            key: "getHoaFilterFromHrirFilter",
            value: function getHoaFilterFromHrirFilter(nCh, nSamples, sampleRate, hrirs, decodingMatrix) {
                // create empty buffer ready to receive hoa filters
                if (nSamples > hrirs[0][0].length) nSamples = hrirs[0][0].length;
                var hoaBuffer = this.context.createBuffer(nCh, nSamples, sampleRate);
    
                // sum weighted HRIR over Ambisonic channels to create HOA IRs
                for (var i = 0; i < nCh; i++) {
                    var concatBufferArrayLeft = new Float32Array(nSamples);
                    for (var j = 0; j < hrirs.length; j++) {
                        for (var k = 0; k < nSamples; k++) {
                            concatBufferArrayLeft[k] += decodingMatrix[j][i] * hrirs[j][0][k];
                        }
                    }
                    hoaBuffer.getChannelData(i).set(concatBufferArrayLeft);
                }
                return hoaBuffer;
            }
        }]);
        return HRIRloader_local;
    }();
    
    exports.default = HRIRloader_local;
    
    },{"./utils.js":25,"babel-runtime/helpers/classCallCheck":28,"babel-runtime/helpers/createClass":29}],24:[function(require,module,exports){
    'use strict';
    
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.utils = exports.converters = exports.HRIRloader_ircam = exports.HRIRloader2D_local = exports.HRIRloader_local = exports.HOAloader = exports.intensityAnalyser2D = exports.intensityAnalyser = exports.powermapAnalyser = exports.rmsAnalyser = exports.virtualMic = exports.convolver = exports.decoder = exports.binDecoder2D = exports.binDecoder = exports.sceneMirror2D = exports.sceneMirror = exports.sceneRotator2D = exports.sceneRotator = exports.orderWeight = exports.orderLimiter2D = exports.orderLimiter = exports.monoEncoder2D = exports.monoEncoder = undefined;
    
    var _ambiMonoEncoder = require('./ambi-monoEncoder');
    
    Object.defineProperty(exports, 'monoEncoder', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_ambiMonoEncoder).default;
      }
    });
    
    var _ambiMonoEncoder2D = require('./ambi-monoEncoder2D');
    
    Object.defineProperty(exports, 'monoEncoder2D', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_ambiMonoEncoder2D).default;
      }
    });
    
    var _ambiOrderLimiter = require('./ambi-orderLimiter');
    
    Object.defineProperty(exports, 'orderLimiter', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_ambiOrderLimiter).default;
      }
    });
    
    var _ambiOrderLimiter2D = require('./ambi-orderLimiter2D');
    
    Object.defineProperty(exports, 'orderLimiter2D', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_ambiOrderLimiter2D).default;
      }
    });
    
    var _ambiOrderWeight = require('./ambi-orderWeight');
    
    Object.defineProperty(exports, 'orderWeight', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_ambiOrderWeight).default;
      }
    });
    
    var _ambiSceneRotator = require('./ambi-sceneRotator');
    
    Object.defineProperty(exports, 'sceneRotator', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_ambiSceneRotator).default;
      }
    });
    
    var _ambiSceneRotator2D = require('./ambi-sceneRotator2D');
    
    Object.defineProperty(exports, 'sceneRotator2D', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_ambiSceneRotator2D).default;
      }
    });
    
    var _ambiSceneMirror = require('./ambi-sceneMirror');
    
    Object.defineProperty(exports, 'sceneMirror', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_ambiSceneMirror).default;
      }
    });
    
    var _ambiSceneMirror2D = require('./ambi-sceneMirror2D');
    
    Object.defineProperty(exports, 'sceneMirror2D', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_ambiSceneMirror2D).default;
      }
    });
    
    var _ambiBinauralDecoder = require('./ambi-binauralDecoder');
    
    Object.defineProperty(exports, 'binDecoder', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_ambiBinauralDecoder).default;
      }
    });
    
    var _ambiBinauralDecoder2D = require('./ambi-binauralDecoder2D');
    
    Object.defineProperty(exports, 'binDecoder2D', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_ambiBinauralDecoder2D).default;
      }
    });
    
    var _ambiDecoder = require('./ambi-decoder');
    
    Object.defineProperty(exports, 'decoder', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_ambiDecoder).default;
      }
    });
    
    var _ambiConvolver = require('./ambi-convolver');
    
    Object.defineProperty(exports, 'convolver', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_ambiConvolver).default;
      }
    });
    
    var _ambiVirtualMic = require('./ambi-virtualMic');
    
    Object.defineProperty(exports, 'virtualMic', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_ambiVirtualMic).default;
      }
    });
    
    var _ambiRmsAnalyser = require('./ambi-rmsAnalyser');
    
    Object.defineProperty(exports, 'rmsAnalyser', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_ambiRmsAnalyser).default;
      }
    });
    
    var _ambiPowermapAnalyser = require('./ambi-powermapAnalyser');
    
    Object.defineProperty(exports, 'powermapAnalyser', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_ambiPowermapAnalyser).default;
      }
    });
    
    var _ambiIntensityAnalyser = require('./ambi-intensityAnalyser');
    
    Object.defineProperty(exports, 'intensityAnalyser', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_ambiIntensityAnalyser).default;
      }
    });
    
    var _ambiIntensityAnalyser2D = require('./ambi-intensityAnalyser2D');
    
    Object.defineProperty(exports, 'intensityAnalyser2D', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_ambiIntensityAnalyser2D).default;
      }
    });
    
    var _hoaLoader = require('./hoa-loader');
    
    Object.defineProperty(exports, 'HOAloader', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_hoaLoader).default;
      }
    });
    
    var _hrirLoader_local = require('./hrir-loader_local');
    
    Object.defineProperty(exports, 'HRIRloader_local', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_hrirLoader_local).default;
      }
    });
    
    var _hrirLoader2D_local = require('./hrir-loader2D_local');
    
    Object.defineProperty(exports, 'HRIRloader2D_local', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_hrirLoader2D_local).default;
      }
    });
    
    var _hrirLoader_ircam = require('./hrir-loader_ircam');
    
    Object.defineProperty(exports, 'HRIRloader_ircam', {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_hrirLoader_ircam).default;
      }
    });
    
    var _ambiConverters = require('./ambi-converters');
    
    var _converters = _interopRequireWildcard(_ambiConverters);
    
    var _utils2 = require('./utils');
    
    var _utils = _interopRequireWildcard(_utils2);
    
    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    var converters = exports.converters = _converters;
    
    var utils = exports.utils = _utils;
    
    },{"./ambi-binauralDecoder":1,"./ambi-binauralDecoder2D":2,"./ambi-converters":3,"./ambi-convolver":4,"./ambi-decoder":5,"./ambi-intensityAnalyser":6,"./ambi-intensityAnalyser2D":7,"./ambi-monoEncoder":8,"./ambi-monoEncoder2D":9,"./ambi-orderLimiter":10,"./ambi-orderLimiter2D":11,"./ambi-orderWeight":12,"./ambi-powermapAnalyser":13,"./ambi-rmsAnalyser":14,"./ambi-sceneMirror":15,"./ambi-sceneMirror2D":16,"./ambi-sceneRotator":17,"./ambi-sceneRotator2D":18,"./ambi-virtualMic":19,"./hoa-loader":20,"./hrir-loader2D_local":21,"./hrir-loader_ircam":22,"./hrir-loader_local":23,"./utils":25}],25:[function(require,module,exports){
    'use strict';
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.deg2rad = deg2rad;
    exports.rad2deg = rad2deg;
    exports.getColumn = getColumn;
    exports.sampleCircle = sampleCircle;
    exports.getCircHarmonics = getCircHarmonics;
    exports.getAmbisonicDecMtx = getAmbisonicDecMtx;
    exports.createNearestLookup = createNearestLookup;
    exports.findNearest = findNearest;
    exports.getTdesign = getTdesign;
    ////////////////////////////////////////////////////////////////////
    //  Archontis Politis
    //  archontis.politis@aalto.fi
    //
    //  David Poirier-Quinot
    //  davipoir@ircam.fr
    //
    ////////////////////////////////////////////////////////////////////
    //
    //  JSAmbisonics a JavaScript library for higher-order Ambisonics
    //  The library implements Web Audio blocks that perform
    //  typical ambisonic processing operations on audio signals.
    //
    ////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////
    //
    //  added for 2D use:
    //  getColumn(), sampleCircle(), getCircHarmonics()
    //  adapted by Thomas Deppisch
    //  thomas.deppisch93@gmail.com
    //
    ////////////////////////////////////////////////////////////////////
    
    ///////////
    /* UTILS */
    ///////////
    
    var numeric = require('numeric');
    var jshlib = require('spherical-harmonic-transform');
    var convexhull = require('convex-hull');
    
    function deg2rad(aedArrayIn) {
        // format: [ [azim_1, elev_1, dist_1], ..., [azim_N, elev_N, dist_N] ]
        // or
        //         [ [azim_1, elev_1],         ..., [azim_N, elev_N] ]
        var aedArrayOut = [];
        var PI_180 = Math.PI / 180.0;
    
        for (var i = 0; i < aedArrayIn.length; i++) {
            if (aedArrayIn[0].length == 3) aedArrayOut.push([aedArrayIn[i][0] * PI_180, aedArrayIn[i][1] * PI_180, aedArrayIn[i][2]]);else if (aedArrayIn[0].length == 2) aedArrayOut.push([aedArrayIn[i][0] * PI_180, aedArrayIn[i][1] * PI_180]);
        }
        return aedArrayOut;
    }
    
    function rad2deg(aedArrayIn) {
        // format: [ [azim_1, elev_1, dist_1], ..., [azim_N, elev_N, dist_N] ]
        // or
        //         [ [azim_1, elev_1],         ..., [azim_N, elev_N] ]
        var aedArrayOut = [];
        var PI_180 = 180.0 / Math.PI;
    
        for (var i = 0; i < aedArrayIn.length; i++) {
            if (aedArrayIn[0].length == 3) aedArrayOut.push([aedArrayIn[i][0] * PI_180, aedArrayIn[i][1] * PI_180, aedArrayIn[i][2]]);else if (aedArrayIn[0].length == 2) aedArrayOut.push([aedArrayIn[i][0] * PI_180, aedArrayIn[i][1] * PI_180]);
        }
        return aedArrayOut;
    }
    
    function getColumn(anArray, columnNumber) {
        return anArray.map(function (row) {
            return row[columnNumber];
        });
    }
    
    function sampleCircle(numPoints) {
        // finds equidistant points on circle for virtual speaker positions
        var speakerAngles = [];
        var deltaAngle = 360 / numPoints;
        // format for hrtf.nearest: [azim,elev,radius]
        var currentAngle = 0;
        for (var i = 0; i < numPoints; i++) {
            speakerAngles.push([currentAngle, 0, 1]);
            currentAngle += deltaAngle;
        }
        return speakerAngles;
    }
    
    function getCircHarmonics(order, phis) {
        // calculates circular harmonics of arbitrary order
        var N = order;
        var numCircHarm = 2 * N + 1;
        var Ndirs = phis.length;
        var Y_N = new Array(numCircHarm);
        var cosmphis, sinmphis;
        var arr1 = new Array(Ndirs);
        phis = numeric.mul(phis, Math.PI / 180);
        arr1.fill(1 / Math.sqrt(2 * Math.PI));
        Y_N[0] = arr1;
        for (var i = 0; i < N; i++) {
            Y_N[2 * i + 1] = numeric.div(numeric.sin(numeric.mul(-(i + 1), phis)), Math.sqrt(Math.PI));
            Y_N[2 * i + 2] = numeric.div(numeric.cos(numeric.mul(i + 1, phis)), Math.sqrt(Math.PI));
        }
        return Y_N;
    }
    
    function getAmbisonicDecMtx(hrtf_dirs_deg, order) {
    
        // triangulation
        var hrtf_dirs_rad = deg2rad(hrtf_dirs_deg);
        var vertices = jshlib.convertSph2Cart(hrtf_dirs_rad);
        var triplets = convexhull(vertices);
        var nTri = triplets.length;
        var nHRTFs = hrtf_dirs_rad.length;
    
        // triplet coordinate inversions for VBAP
        var layoutInvMtx = new Array(nTri);
        for (var n = 0; n < nTri; n++) {
    
            // get the unit vectors for the current group
            var tempGroup = new Array(3);
            for (var i = 0; i < 3; i++) {
                tempGroup[i] = vertices[triplets[n][i]];
            }
            // get inverse mtx of current group
            var tempInvMtx = numeric.inv(tempGroup);
            var tempInvVec = []; //vectorize matrix by stacking columns
            for (var _i = 0; _i < 3; _i++) {
                for (var j = 0; j < 3; j++) {
                    tempInvVec.push(tempInvMtx[j][_i]);
                }
            }
            layoutInvMtx[n] = tempInvVec; // store the vectorized inverse as a row the output
        }
    
        // ALLRAD
        // t-value for the t-design
        var t = 2 * order + 1;
        // vbap gains for selected t-design
        var td_dirs_deg = getTdesign(2 * order);
        var td_dirs_rad = deg2rad(td_dirs_deg);
        var G_td = vbap3(td_dirs_rad, triplets, layoutInvMtx, nHRTFs);
        G_td = numeric.transpose(G_td);
    
        // spherical harmonic matrix for t-design
        var Y_td = jshlib.computeRealSH(order, td_dirs_rad);
        Y_td = numeric.transpose(Y_td);
        // allrad decoder
        var nTD = td_dirs_rad.length;
        var M_dec = numeric.dotMMsmall(G_td, Y_td);
        M_dec = numeric.mul(1 / nTD, M_dec);
        return M_dec;
    }
    
    var vbap3 = function vbap3(dirs_rad, triplets, ls_invMtx, ls_num) {
    
        var nDirs = dirs_rad.length;
        var nLS = ls_num;
        var nTri = triplets.length;
    
        function getMinOfArray(numArray) {
            return Math.min.apply(null, numArray);
        }
    
        var gainMtx = new Array(nDirs);
        var U = jshlib.convertSph2Cart(dirs_rad);
    
        for (var ns = 0; ns < nDirs; ns++) {
            var u = U[ns];
            var gains = new Array(nLS);
            gains.fill(0);
    
            for (var i = 0; i < nTri; i++) {
                var g_tmp = [];
                var v_tmp = [ls_invMtx[i][0], ls_invMtx[i][1], ls_invMtx[i][2]];
                g_tmp[0] = numeric.dotVV(v_tmp, u);
                v_tmp = [ls_invMtx[i][3], ls_invMtx[i][4], ls_invMtx[i][5]];
                g_tmp[1] = numeric.dotVV(v_tmp, u);
                v_tmp = [ls_invMtx[i][6], ls_invMtx[i][7], ls_invMtx[i][8]];
                g_tmp[2] = numeric.dotVV(v_tmp, u);
                if (getMinOfArray(g_tmp) > -0.001) {
    
                    var norm_g_tmp = Math.sqrt(numeric.sum(numeric.pow(g_tmp, 2))); // normalize gains
                    var g_tmp_normed = numeric.div(g_tmp, norm_g_tmp);
                    for (var j = 0; j < 3; j++) {
                        gains[triplets[i][j]] = g_tmp_normed[j];
                    }
                    break;
                }
            }
    
            var norm_gains = Math.sqrt(numeric.sum(numeric.pow(gains, 2))); // normalize gains
            var gains_normed = numeric.div(gains, norm_gains);
            gainMtx[ns] = gains_normed;
        }
        return gainMtx;
    };
    
    function createNearestLookup(dirs_deg, ang_res) {
    
        var nDirs = dirs_deg.length;
        var dirs_xyz = jshlib.convertSph2Cart(deg2rad(dirs_deg));
        var nAzi = Math.round(360 / ang_res[0]) + 1;
        var nEle = Math.round(180 / ang_res[1]) + 1;
        var azi = new Array(nAzi);
        azi[0] = -180;
        for (var i = 1; i < nAzi; i++) {
            azi[i] = azi[i - 1] + ang_res[0];
        }
        var nGrid = nAzi * nEle;
        var nearestLookup = new Array(nGrid);
        for (var _i2 = 0; _i2 < nGrid; _i2++) {
            var grid_deg = [[_i2 % nAzi * ang_res[0] - 180, Math.floor(_i2 / nAzi) * ang_res[1] - 90]];
            var grid_xyz = jshlib.convertSph2Cart(deg2rad(grid_deg));
            var minVal = 1000;
            for (var j = 0; j < nDirs; j++) {
                var newMinVal = numeric.sum(numeric.pow(numeric.sub(grid_xyz[0], dirs_xyz[j]), 2));
                if (newMinVal < minVal) {
                    nearestLookup[_i2] = j;
                    minVal = newMinVal;
                }
            }
        }
        return nearestLookup;
    }
    
    function findNearest(dirs_deg, nearestLookup, ang_res) {
    
        var nDirs = dirs_deg.length;
        var azim = [];
        var elev = [];
        for (var i = 0; i < nDirs; i++) {
            azim.push(dirs_deg[i][0] + 180);
            elev.push(dirs_deg[i][1] + 90);
        }
        var nAzi = Math.round(360 / ang_res[0]) + 1;
        var aziIndex = numeric.round(numeric.div(numeric.mod(azim, 360), ang_res[0]));
        var elevIndex = numeric.round(numeric.div(elev, ang_res[1]));
        var gridIndex = numeric.add(numeric.mul(elevIndex, nAzi), aziIndex, 1);
        var nearestIndex = [];
        for (var _i3 = 0; _i3 < nDirs; _i3++) {
            nearestIndex.push(nearestLookup[gridIndex[_i3]]);
        }
        return nearestIndex;
    }
    
    /*
     *  getTdesign returns the spherical coordinates of minimal T-designs
     *
     *  getTdesign returns the unit vectors and the spherical coordinates
     *  of t-designs, which constitute uniform arrangements on the sphere for
     *  which spherical polynomials up to degree t can be integrated exactly by
     *  summation of their values at the points defined by the t-design.
     *  Designs for order up to t=21 are stored and returned. Note that for the
     *  spherical harmonic transform (SHT) of a function of order N, a spherical
     *  t-design of t>=2N should be used (or equivalently N=floor(t/2) ), since
     *  the integral evaluates the product of the spherical function with
     *  spherical harmonics of up to order N. The spherical coordinates are
     *  given in the [azi1 elev1; azi2 elev2; ...; aziQ elevQ] convention.
     *
     *  The designs have been copied from:
     *      http://neilsloane.com/sphdesigns/
     *  and should be referenced as:
     *      "McLaren's Improved Snub Cube and Other New Spherical Designs in
     *      Three Dimensions", R. H. Hardin and N. J. A. Sloane, Discrete and
     *      Computational Geometry, 15 (1996), pp. 429-441.
     */
    
    function getTdesign(degree) {
        if (degree > 21) {
            throw new Error('Designs of order greater than 21 are not implemented');
        } else if (degree < 1) {
            throw new Error('Order should be at least 1');
        }
    
        var speakerPos = [[[0.00, 0.00, 1.00], [180.00, 0.00, 1.00]], [[45.00, 35.26, 1.00], [-45.00, -35.26, 1.00], [135.00, -35.26, 1.00], [-135.00, 35.26, 1.00]], [[0.00, 0.00, 1.00], [180.00, 0.00, 1.00], [90.00, 0.00, 1.00], [-90.00, 0.00, 1.00], [0.00, 90.00, 1.00], [0.00, -90.00, 1.00]], [[0.00, -31.72, 1.00], [-58.28, 0.00, 1.00], [-90.00, 58.28, 1.00], [0.00, 31.72, 1.00], [-121.72, 0.00, 1.00], [90.00, -58.28, 1.00], [180.00, -31.72, 1.00], [121.72, 0.00, 1.00], [90.00, 58.28, 1.00], [180.00, 31.72, 1.00], [58.28, 0.00, 1.00], [-90.00, -58.28, 1.00]], [[0.00, -31.72, 1.00], [-58.28, 0.00, 1.00], [-90.00, 58.28, 1.00], [0.00, 31.72, 1.00], [-121.72, 0.00, 1.00], [90.00, -58.28, 1.00], [180.00, -31.72, 1.00], [121.72, 0.00, 1.00], [90.00, 58.28, 1.00], [180.00, 31.72, 1.00], [58.28, 0.00, 1.00], [-90.00, -58.28, 1.00]], [[26.00, 15.46, 1.00], [-26.00, -15.46, 1.00], [17.11, -24.99, 1.00], [-17.11, 24.99, 1.00], [154.00, -15.46, 1.00], [-154.00, 15.46, 1.00], [162.89, 24.99, 1.00], [-162.89, -24.99, 1.00], [72.89, 24.99, 1.00], [107.11, -24.99, 1.00], [116.00, 15.46, 1.00], [64.00, -15.46, 1.00], [-107.11, 24.99, 1.00], [-72.89, -24.99, 1.00], [-64.00, 15.46, 1.00], [-116.00, -15.46, 1.00], [32.25, 60.03, 1.00], [-147.75, 60.03, 1.00], [-57.75, 60.03, 1.00], [122.25, 60.03, 1.00], [-32.25, -60.03, 1.00], [147.75, -60.03, 1.00], [57.75, -60.03, 1.00], [-122.25, -60.03, 1.00]], [[26.00, 15.46, 1.00], [-26.00, -15.46, 1.00], [17.11, -24.99, 1.00], [-17.11, 24.99, 1.00], [154.00, -15.46, 1.00], [-154.00, 15.46, 1.00], [162.89, 24.99, 1.00], [-162.89, -24.99, 1.00], [72.89, 24.99, 1.00], [107.11, -24.99, 1.00], [116.00, 15.46, 1.00], [64.00, -15.46, 1.00], [-107.11, 24.99, 1.00], [-72.89, -24.99, 1.00], [-64.00, 15.46, 1.00], [-116.00, -15.46, 1.00], [32.25, 60.03, 1.00], [-147.75, 60.03, 1.00], [-57.75, 60.03, 1.00], [122.25, 60.03, 1.00], [-32.25, -60.03, 1.00], [147.75, -60.03, 1.00], [57.75, -60.03, 1.00], [-122.25, -60.03, 1.00]], [[-31.11, 53.65, 1.00], [110.82, 30.50, 1.00], [148.89, 53.65, 1.00], [32.21, -17.83, 1.00], [69.18, -30.50, 1.00], [-32.21, 17.83, 1.00], [-69.18, 30.50, 1.00], [-147.79, -17.83, 1.00], [-110.82, -30.50, 1.00], [147.79, 17.83, 1.00], [31.11, -53.65, 1.00], [-148.89, -53.65, 1.00], [-21.25, -47.78, 1.00], [-108.20, 38.78, 1.00], [158.75, -47.78, 1.00], [139.77, -14.09, 1.00], [-71.80, -38.78, 1.00], [-139.77, 14.09, 1.00], [71.80, 38.78, 1.00], [-40.23, -14.09, 1.00], [108.20, -38.78, 1.00], [40.23, 14.09, 1.00], [21.25, 47.78, 1.00], [-158.75, 47.78, 1.00], [106.65, -2.55, 1.00], [-2.66, -16.63, 1.00], [-73.35, -2.55, 1.00], [-98.84, 73.16, 1.00], [-177.34, 16.63, 1.00], [98.84, -73.16, 1.00], [177.34, -16.63, 1.00], [81.16, 73.16, 1.00], [2.66, 16.63, 1.00], [-81.16, -73.16, 1.00], [-106.65, 2.55, 1.00], [73.35, 2.55, 1.00]], [[20.75, -3.55, 1.00], [-20.75, 3.55, 1.00], [-3.80, -20.70, 1.00], [3.80, 20.70, 1.00], [159.25, 3.55, 1.00], [-159.25, -3.55, 1.00], [-176.20, 20.70, 1.00], [176.20, -20.70, 1.00], [93.80, 20.70, 1.00], [86.20, -20.70, 1.00], [110.75, -3.55, 1.00], [69.25, 3.55, 1.00], [-86.20, 20.70, 1.00], [-93.80, -20.70, 1.00], [-69.25, -3.55, 1.00], [-110.75, 3.55, 1.00], [-9.94, 68.97, 1.00], [170.06, 68.97, 1.00], [-99.94, 68.97, 1.00], [80.06, 68.97, 1.00], [9.94, -68.97, 1.00], [-170.06, -68.97, 1.00], [99.94, -68.97, 1.00], [-80.06, -68.97, 1.00], [42.15, 17.57, 1.00], [-42.15, -17.57, 1.00], [23.12, -39.77, 1.00], [-23.12, 39.77, 1.00], [137.85, -17.57, 1.00], [-137.85, 17.57, 1.00], [156.88, 39.77, 1.00], [-156.88, -39.77, 1.00], [66.88, 39.77, 1.00], [113.12, -39.77, 1.00], [132.15, 17.57, 1.00], [47.85, -17.57, 1.00], [-113.12, 39.77, 1.00], [-66.88, -39.77, 1.00], [-47.85, 17.57, 1.00], [-132.15, -17.57, 1.00], [25.26, 44.98, 1.00], [-154.74, 44.98, 1.00], [-64.74, 44.98, 1.00], [115.26, 44.98, 1.00], [-25.26, -44.98, 1.00], [154.74, -44.98, 1.00], [64.74, -44.98, 1.00], [-115.26, -44.98, 1.00]], [[144.09, -21.45, 1.00], [-33.81, -48.92, 1.00], [-35.91, -21.45, 1.00], [-115.87, 33.09, 1.00], [-146.19, 48.92, 1.00], [115.87, -33.09, 1.00], [146.19, -48.92, 1.00], [64.13, 33.09, 1.00], [33.81, 48.92, 1.00], [-64.13, -33.09, 1.00], [-144.09, 21.45, 1.00], [35.91, 21.45, 1.00], [-45.53, 1.95, 1.00], [177.26, 44.44, 1.00], [134.47, 1.95, 1.00], [87.21, -45.49, 1.00], [2.74, -44.44, 1.00], [-87.21, 45.49, 1.00], [-2.74, 44.44, 1.00], [-92.79, -45.49, 1.00], [-177.26, -44.44, 1.00], [92.79, 45.49, 1.00], [45.53, -1.95, 1.00], [-134.47, -1.95, 1.00], [15.59, -73.34, 1.00], [-85.40, 16.04, 1.00], [-164.41, -73.34, 1.00], [163.92, 4.42, 1.00], [-94.60, -16.04, 1.00], [-163.92, -4.42, 1.00], [94.60, 16.04, 1.00], [-16.08, 4.42, 1.00], [85.40, -16.04, 1.00], [16.08, -4.42, 1.00], [-15.59, 73.34, 1.00], [164.41, 73.34, 1.00], [-60.02, 25.27, 1.00], [151.41, 26.86, 1.00], [119.98, 25.27, 1.00], [46.63, -51.57, 1.00], [28.59, -26.86, 1.00], [-46.63, 51.57, 1.00], [-28.59, 26.86, 1.00], [-133.37, -51.57, 1.00], [-151.41, -26.86, 1.00], [133.37, 51.57, 1.00], [60.02, -25.27, 1.00], [-119.98, -25.27, 1.00], [-109.94, 6.91, 1.00], [172.65, -19.79, 1.00], [70.06, 6.91, 1.00], [-70.44, -68.94, 1.00], [7.35, 19.79, 1.00], [70.44, 68.94, 1.00], [-7.35, -19.79, 1.00], [109.56, -68.94, 1.00], [-172.65, 19.79, 1.00], [-109.56, 68.94, 1.00], [109.94, -6.91, 1.00], [-70.06, -6.91, 1.00]], [[132.93, 7.69, 1.00], [-83.93, -23.73, 1.00], [8.47, 23.51, 1.00], [-113.34, 70.42, 1.00], [-103.27, -9.90, 1.00], [-33.24, -70.75, 1.00], [21.86, -26.46, 1.00], [-156.54, 47.78, 1.00], [-64.26, -7.72, 1.00], [165.78, 44.53, 1.00], [-25.20, 26.39, 1.00], [-97.00, -44.66, 1.00], [27.85, 9.77, 1.00], [153.21, -47.71, 1.00], [-155.06, 7.45, 1.00], [-11.84, -23.59, 1.00], [80.54, 23.72, 1.00], [-42.06, 70.44, 1.00], [-31.22, -9.84, 1.00], [38.84, -70.50, 1.00], [93.76, -26.29, 1.00], [-84.76, 47.61, 1.00], [7.76, -7.52, 1.00], [-122.28, 44.29, 1.00], [46.80, 26.64, 1.00], [-24.77, -44.57, 1.00], [99.89, 9.91, 1.00], [-134.78, -47.96, 1.00], [-83.09, 7.30, 1.00], [60.13, -23.34, 1.00], [152.64, 23.64, 1.00], [29.76, 70.68, 1.00], [40.78, -9.58, 1.00], [110.18, -70.39, 1.00], [165.65, -26.43, 1.00], [-12.99, 47.75, 1.00], [79.74, -7.31, 1.00], [-50.52, 44.26, 1.00], [118.92, 26.71, 1.00], [47.22, -44.31, 1.00], [171.93, 9.76, 1.00], [-62.51, -48.04, 1.00], [-11.12, 7.44, 1.00], [132.02, -23.33, 1.00], [-135.36, 23.39, 1.00], [102.37, 70.82, 1.00], [112.74, -9.49, 1.00], [-178.30, -70.58, 1.00], [-122.32, -26.67, 1.00], [59.08, 48.00, 1.00], [151.70, -7.38, 1.00], [21.38, 44.50, 1.00], [-169.01, 26.50, 1.00], [118.98, -44.25, 1.00], [-116.09, 9.52, 1.00], [9.65, -47.83, 1.00], [60.89, 7.68, 1.00], [-156.02, -23.57, 1.00], [-63.46, 23.31, 1.00], [174.93, 70.66, 1.00], [-175.29, -9.68, 1.00], [-105.95, -70.80, 1.00], [-50.19, -26.70, 1.00], [131.36, 48.01, 1.00], [-136.30, -7.64, 1.00], [93.56, 44.67, 1.00], [-97.08, 26.30, 1.00], [-169.16, -44.46, 1.00], [-44.13, 9.52, 1.00], [81.48, -47.62, 1.00]], [[-154.47, 7.90, 1.00], [162.15, -63.36, 1.00], [25.53, 7.90, 1.00], [-81.26, -25.27, 1.00], [17.85, 63.36, 1.00], [81.26, 25.27, 1.00], [-17.85, -63.36, 1.00], [98.74, -25.27, 1.00], [-162.15, 63.36, 1.00], [-98.74, 25.27, 1.00], [154.47, -7.90, 1.00], [-25.53, -7.90, 1.00], [1.30, -10.47, 1.00], [-83.01, 79.45, 1.00], [-178.70, -10.47, 1.00], [100.48, 1.28, 1.00], [-96.99, -79.45, 1.00], [-100.48, -1.28, 1.00], [96.99, 79.45, 1.00], [-79.52, 1.28, 1.00], [83.01, -79.45, 1.00], [79.52, -1.28, 1.00], [-1.30, 10.47, 1.00], [178.70, 10.47, 1.00], [157.24, 13.15, 1.00], [31.14, -63.89, 1.00], [-22.76, 13.15, 1.00], [-75.78, 22.13, 1.00], [148.86, 63.89, 1.00], [75.78, -22.13, 1.00], [-148.86, -63.89, 1.00], [104.22, 22.13, 1.00], [-31.14, 63.89, 1.00], [-104.22, -22.13, 1.00], [-157.24, -13.15, 1.00], [22.76, -13.15, 1.00], [110.44, -60.62, 1.00], [-62.18, -9.87, 1.00], [-69.56, -60.62, 1.00], [-168.88, 27.37, 1.00], [-117.82, 9.87, 1.00], [168.88, -27.37, 1.00], [117.82, -9.87, 1.00], [11.12, 27.37, 1.00], [62.18, 9.87, 1.00], [-11.12, -27.37, 1.00], [-110.44, 60.62, 1.00], [69.56, 60.62, 1.00], [-125.93, -47.40, 1.00], [-126.67, -23.40, 1.00], [54.07, -47.40, 1.00], [-151.65, -33.24, 1.00], [-53.33, 23.40, 1.00], [151.65, 33.24, 1.00], [53.33, -23.40, 1.00], [28.35, -33.24, 1.00], [126.67, 23.40, 1.00], [-28.35, 33.24, 1.00], [125.93, 47.40, 1.00], [-54.07, 47.40, 1.00], [61.41, 37.54, 1.00], [41.19, 22.30, 1.00], [-118.59, 37.54, 1.00], [31.92, 44.13, 1.00], [138.81, -22.30, 1.00], [-31.92, -44.13, 1.00], [-138.81, 22.30, 1.00], [-148.08, 44.13, 1.00], [-41.19, -22.30, 1.00], [148.08, -44.13, 1.00], [-61.41, -37.54, 1.00], [118.59, -37.54, 1.00], [132.92, 4.73, 1.00], [6.45, -42.74, 1.00], [-47.08, 4.73, 1.00], [-83.07, 46.87, 1.00], [173.55, 42.74, 1.00], [83.07, -46.87, 1.00], [-173.55, -42.74, 1.00], [96.93, 46.87, 1.00], [-6.45, 42.74, 1.00], [-96.93, -46.87, 1.00], [-132.92, -4.73, 1.00], [47.08, -4.73, 1.00]], [[-40.36, 68.70, 1.00], [61.12, 65.68, 1.00], [141.73, 70.75, 1.00], [-131.25, 72.32, 1.00], [-154.88, -12.62, 1.00], [-66.20, -9.78, 1.00], [26.36, -11.97, 1.00], [114.95, -12.58, 1.00], [37.02, 51.13, 1.00], [129.77, 51.95, 1.00], [-140.63, 50.15, 1.00], [-56.50, 47.88, 1.00], [-65.05, 12.58, 1.00], [25.12, 12.62, 1.00], [113.80, 9.78, 1.00], [-153.64, 11.97, 1.00], [-134.51, -9.73, 1.00], [-46.23, -8.37, 1.00], [47.91, -9.73, 1.00], [141.51, -8.73, 1.00], [-17.84, -44.10, 1.00], [69.37, -43.27, 1.00], [151.22, -42.67, 1.00], [-106.78, -40.18, 1.00], [-50.23, -51.95, 1.00], [39.37, -50.15, 1.00], [123.50, -47.88, 1.00], [-142.98, -51.13, 1.00], [-179.19, -60.75, 1.00], [-84.57, -54.07, 1.00], [5.39, -58.05, 1.00], [89.50, -60.75, 1.00], [-145.98, 31.02, 1.00], [-54.39, 26.43, 1.00], [28.92, 32.51, 1.00], [125.34, 30.94, 1.00], [168.71, -7.06, 1.00], [-112.49, -10.38, 1.00], [-21.96, -9.60, 1.00], [73.11, -8.31, 1.00], [95.68, 0.04, 1.00], [-170.71, 2.32, 1.00], [-84.32, -0.04, 1.00], [9.29, -2.32, 1.00], [9.19, -34.33, 1.00], [98.21, -37.31, 1.00], [-179.20, -40.48, 1.00], [-77.81, -31.60, 1.00], [-177.08, -21.74, 1.00], [-93.77, -18.83, 1.00], [-2.72, -19.80, 1.00], [90.51, -20.91, 1.00], [-106.89, 8.31, 1.00], [-11.29, 7.06, 1.00], [67.51, 10.38, 1.00], [158.04, 9.60, 1.00], [-118.88, -65.68, 1.00], [-38.27, -70.75, 1.00], [48.75, -72.32, 1.00], [139.64, -68.70, 1.00], [-54.66, -30.94, 1.00], [34.02, -31.02, 1.00], [125.61, -26.43, 1.00], [-151.08, -32.51, 1.00], [-170.81, 34.33, 1.00], [-81.79, 37.31, 1.00], [0.80, 40.48, 1.00], [102.19, 31.60, 1.00], [-28.78, 42.67, 1.00], [73.22, 40.18, 1.00], [162.16, 44.10, 1.00], [-110.63, 43.27, 1.00], [-89.49, 20.91, 1.00], [2.92, 21.74, 1.00], [86.23, 18.83, 1.00], [177.28, 19.80, 1.00], [133.77, 8.37, 1.00], [-132.09, 9.73, 1.00], [-38.49, 8.73, 1.00], [45.49, 9.73, 1.00], [-25.60, 24.04, 1.00], [55.12, 30.23, 1.00], [149.30, 28.05, 1.00], [-118.71, 26.06, 1.00], [0.81, 60.75, 1.00], [95.43, 54.07, 1.00], [-174.61, 58.05, 1.00], [-90.50, 60.75, 1.00], [-124.88, -30.23, 1.00], [-30.70, -28.05, 1.00], [61.29, -26.06, 1.00], [154.40, -24.04, 1.00], [-132.92, -85.60, 1.00], [47.08, 85.60, 1.00]], [[-129.19, 8.11, 1.00], [169.58, -38.73, 1.00], [50.81, 8.12, 1.00], [-77.27, -50.11, 1.00], [10.42, 38.73, 1.00], [77.30, 50.12, 1.00], [-10.41, -38.72, 1.00], [102.71, -50.11, 1.00], [-169.57, 38.72, 1.00], [-102.71, 50.11, 1.00], [129.19, -8.11, 1.00], [-50.80, -8.11, 1.00], [-4.59, -56.01, 1.00], [-93.10, 33.85, 1.00], [175.39, -56.03, 1.00], [146.11, -2.57, 1.00], [-86.89, -33.86, 1.00], [-146.10, 2.56, 1.00], [86.91, 33.86, 1.00], [-33.89, -2.57, 1.00], [93.10, -33.85, 1.00], [33.90, 2.58, 1.00], [4.60, 56.03, 1.00], [-175.38, 56.01, 1.00], [106.57, 26.10, 1.00], [27.07, -14.82, 1.00], [-73.44, 26.09, 1.00], [-30.20, 59.41, 1.00], [152.94, 14.83, 1.00], [30.20, -59.40, 1.00], [-152.93, -14.84, 1.00], [149.82, 59.41, 1.00], [-27.06, 14.83, 1.00], [-149.80, -59.42, 1.00], [-106.55, -26.10, 1.00], [73.44, -26.09, 1.00], [-171.42, 77.45, 1.00], [91.90, -12.40, 1.00], [8.54, 77.46, 1.00], [-12.40, -1.85, 1.00], [88.11, 12.41, 1.00], [12.41, 1.86, 1.00], [-88.10, -12.41, 1.00], [167.60, -1.86, 1.00], [-91.89, 12.40, 1.00], [-167.59, 1.84, 1.00], [171.43, -77.46, 1.00], [-8.52, -77.45, 1.00], [-122.73, -10.44, 1.00], [-167.65, -32.13, 1.00], [57.27, -10.43, 1.00], [-108.80, -55.83, 1.00], [-12.35, 32.13, 1.00], [108.83, 55.83, 1.00], [12.36, -32.12, 1.00], [71.19, -55.82, 1.00], [167.66, 32.12, 1.00], [-71.19, 55.82, 1.00], [122.74, 10.44, 1.00], [-57.27, 10.44, 1.00], [-135.84, -23.05, 1.00], [-148.58, -41.32, 1.00], [44.16, -23.04, 1.00], [-120.66, -39.88, 1.00], [-31.41, 41.31, 1.00], [120.68, 39.87, 1.00], [31.42, -41.30, 1.00], [59.33, -39.86, 1.00], [148.60, 41.31, 1.00], [-59.33, 39.87, 1.00], [135.85, 23.05, 1.00], [-44.16, 23.05, 1.00], [-161.55, 20.62, 1.00], [130.04, -62.60, 1.00], [18.45, 20.64, 1.00], [-68.35, -17.23, 1.00], [49.96, 62.61, 1.00], [68.36, 17.23, 1.00], [-49.93, -62.60, 1.00], [111.65, -17.22, 1.00], [-130.05, 62.59, 1.00], [-111.64, 17.22, 1.00], [161.56, -20.63, 1.00], [-18.44, -20.62, 1.00], [-105.23, -3.38, 1.00], [-176.50, -15.21, 1.00], [74.77, -3.37, 1.00], [-102.64, -74.41, 1.00], [-3.50, 15.21, 1.00], [102.69, 74.41, 1.00], [3.51, -15.20, 1.00], [77.33, -74.40, 1.00], [176.51, 15.20, 1.00], [-77.36, 74.40, 1.00], [105.24, 3.38, 1.00], [-74.76, 3.37, 1.00], [-142.39, 25.42, 1.00], [142.08, -45.69, 1.00], [37.61, 25.43, 1.00], [-59.02, -33.44, 1.00], [37.92, 45.69, 1.00], [59.04, 33.45, 1.00], [-37.91, -45.68, 1.00], [120.97, -33.44, 1.00], [-142.07, 45.68, 1.00], [-120.96, 33.44, 1.00], [142.40, -25.43, 1.00], [-37.60, -25.42, 1.00]], [[-30.60, 6.94, 1.00], [166.56, 58.69, 1.00], [149.40, 6.96, 1.00], [81.95, -30.36, 1.00], [13.48, -58.69, 1.00], [-81.93, 30.36, 1.00], [-13.46, 58.68, 1.00], [-98.06, -30.37, 1.00], [-166.54, -58.68, 1.00], [98.07, 30.37, 1.00], [30.62, -6.95, 1.00], [-149.38, -6.95, 1.00], [106.69, -22.68, 1.00], [-23.57, -15.36, 1.00], [-73.31, -22.69, 1.00], [-145.50, 62.10, 1.00], [-156.41, 15.36, 1.00], [145.53, -62.10, 1.00], [156.43, -15.35, 1.00], [34.47, 62.11, 1.00], [23.58, 15.36, 1.00], [-34.46, -62.11, 1.00], [-106.67, 22.68, 1.00], [73.33, 22.69, 1.00], [166.82, 1.39, 1.00], [6.09, -76.74, 1.00], [-13.19, 1.38, 1.00], [-88.57, 13.18, 1.00], [173.99, 76.74, 1.00], [88.59, -13.18, 1.00], [-173.97, -76.73, 1.00], [91.43, 13.20, 1.00], [-6.07, 76.73, 1.00], [-91.42, -13.20, 1.00], [-166.80, -1.38, 1.00], [13.20, -1.39, 1.00], [-74.67, 48.11, 1.00], [130.86, 10.16, 1.00], [105.32, 48.13, 1.00], [13.34, -40.08, 1.00], [49.16, -10.15, 1.00], [-13.32, 40.07, 1.00], [-49.14, 10.15, 1.00], [-166.67, -40.08, 1.00], [-130.84, -10.16, 1.00], [166.69, 40.08, 1.00], [74.70, -48.11, 1.00], [-105.31, -48.13, 1.00], [-126.99, 26.55, 1.00], [147.96, -32.57, 1.00], [53.00, 26.56, 1.00], [-50.28, -45.59, 1.00], [32.05, 32.58, 1.00], [50.30, 45.59, 1.00], [-32.03, -32.58, 1.00], [129.71, -45.58, 1.00], [-147.94, 32.57, 1.00], [-129.69, 45.58, 1.00], [127.02, -26.55, 1.00], [-52.98, -26.56, 1.00], [-171.93, 30.37, 1.00], [103.47, -58.68, 1.00], [8.07, 30.36, 1.00], [-59.38, -6.96, 1.00], [76.54, 58.69, 1.00], [59.40, 6.95, 1.00], [-76.53, -58.69, 1.00], [120.62, -6.94, 1.00], [-103.44, 58.68, 1.00], [-120.60, 6.95, 1.00], [171.94, -30.36, 1.00], [-8.05, -30.37, 1.00], [40.86, 10.16, 1.00], [15.32, 48.12, 1.00], [-139.14, 10.16, 1.00], [76.68, 40.09, 1.00], [164.69, -48.12, 1.00], [-76.67, -40.09, 1.00], [-164.67, 48.12, 1.00], [-103.31, 40.07, 1.00], [-15.30, -48.13, 1.00], [103.34, -40.07, 1.00], [-40.84, -10.16, 1.00], [139.16, -10.15, 1.00], [103.20, -1.38, 1.00], [-1.41, -13.19, 1.00], [-76.80, -1.39, 1.00], [-96.02, 76.73, 1.00], [-178.57, 13.19, 1.00], [96.07, -76.73, 1.00], [178.58, -13.19, 1.00], [83.94, 76.74, 1.00], [1.43, 13.19, 1.00], [-83.95, -76.74, 1.00], [-103.18, 1.38, 1.00], [76.81, 1.39, 1.00], [37.02, -26.56, 1.00], [-39.70, 45.58, 1.00], [-142.99, -26.56, 1.00], [122.05, 32.58, 1.00], [-140.29, -45.59, 1.00], [-122.04, -32.58, 1.00], [140.31, 45.59, 1.00], [-57.95, 32.57, 1.00], [39.72, -45.58, 1.00], [57.97, -32.57, 1.00], [-37.00, 26.55, 1.00], [143.00, 26.56, 1.00], [163.33, 22.69, 1.00], [55.55, -62.10, 1.00], [-16.67, 22.68, 1.00], [-66.41, 15.35, 1.00], [124.49, 62.11, 1.00], [66.43, -15.35, 1.00], [-124.48, -62.11, 1.00], [113.58, 15.36, 1.00], [-55.52, 62.10, 1.00], [-113.57, -15.36, 1.00], [-163.31, -22.68, 1.00], [16.69, -22.69, 1.00]], [[-10.57, -17.35, 1.00], [-120.42, 69.76, 1.00], [169.43, -17.35, 1.00], [107.63, -10.08, 1.00], [-59.57, -69.78, 1.00], [-107.63, 10.08, 1.00], [59.57, 69.78, 1.00], [-72.37, -10.09, 1.00], [120.42, -69.76, 1.00], [72.37, 10.09, 1.00], [10.57, 17.35, 1.00], [-169.43, 17.35, 1.00], [-30.77, 68.25, 1.00], [101.53, 18.57, 1.00], [149.25, 68.26, 1.00], [18.92, -10.92, 1.00], [78.47, -18.56, 1.00], [-18.92, 10.92, 1.00], [-78.47, 18.56, 1.00], [-161.09, -10.92, 1.00], [-101.53, -18.56, 1.00], [161.09, 10.92, 1.00], [30.78, -68.26, 1.00], [-149.26, -68.26, 1.00], [56.46, 41.26, 1.00], [46.46, 24.54, 1.00], [-123.53, 41.26, 1.00], [32.19, 38.80, 1.00], [133.53, -24.53, 1.00], [-32.19, -38.80, 1.00], [-133.53, 24.53, 1.00], [-147.80, 38.80, 1.00], [-46.46, -24.54, 1.00], [147.80, -38.80, 1.00], [-56.46, -41.27, 1.00], [123.53, -41.26, 1.00], [84.74, 27.31, 1.00], [27.41, 4.68, 1.00], [-95.26, 27.30, 1.00], [10.06, 62.23, 1.00], [152.59, -4.67, 1.00], [-10.06, -62.23, 1.00], [-152.59, 4.67, 1.00], [-169.92, 62.23, 1.00], [-27.40, -4.68, 1.00], [169.92, -62.22, 1.00], [-84.74, -27.31, 1.00], [95.26, -27.30, 1.00], [136.27, -0.73, 1.00], [-1.05, -46.27, 1.00], [-43.73, -0.74, 1.00], [-91.01, 43.72, 1.00], [-178.94, 46.27, 1.00], [91.01, -43.72, 1.00], [178.94, -46.27, 1.00], [88.99, 43.73, 1.00], [1.05, 46.27, 1.00], [-88.99, -43.73, 1.00], [-136.27, 0.73, 1.00], [43.73, 0.73, 1.00], [55.23, 10.82, 1.00], [13.09, 34.07, 1.00], [-124.77, 10.81, 1.00], [71.48, 53.80, 1.00], [166.91, -34.06, 1.00], [-71.48, -53.80, 1.00], [-166.90, 34.06, 1.00], [-108.52, 53.79, 1.00], [-13.09, -34.06, 1.00], [108.52, -53.79, 1.00], [-55.23, -10.82, 1.00], [124.77, -10.81, 1.00], [-105.49, -68.13, 1.00], [-111.15, -5.71, 1.00], [74.52, -68.12, 1.00], [-173.89, -21.04, 1.00], [-68.85, 5.70, 1.00], [173.89, 21.04, 1.00], [68.85, -5.70, 1.00], [6.12, -21.04, 1.00], [111.15, 5.71, 1.00], [-6.12, 21.04, 1.00], [105.49, 68.13, 1.00], [-74.52, 68.12, 1.00], [35.28, -15.18, 1.00], [-25.17, 51.98, 1.00], [-144.72, -15.19, 1.00], [108.39, 33.88, 1.00], [-154.84, -51.99, 1.00], [-108.39, -33.88, 1.00], [154.84, 51.99, 1.00], [-71.61, 33.87, 1.00], [25.17, -51.98, 1.00], [71.61, -33.87, 1.00], [-35.28, 15.18, 1.00], [144.72, 15.19, 1.00], [-125.28, -28.56, 1.00], [-146.32, -30.49, 1.00], [54.72, -28.55, 1.00], [-133.29, -45.82, 1.00], [-33.69, 30.48, 1.00], [133.30, 45.82, 1.00], [33.68, -30.48, 1.00], [46.71, -45.81, 1.00], [146.32, 30.49, 1.00], [-46.71, 45.81, 1.00], [125.28, 28.56, 1.00], [-54.72, 28.54, 1.00], [-144.40, 54.71, 1.00], [112.38, -28.01, 1.00], [35.58, 54.72, 1.00], [-29.92, -19.65, 1.00], [67.62, 28.02, 1.00], [29.92, 19.65, 1.00], [-67.62, -28.02, 1.00], [150.08, -19.64, 1.00], [-112.38, 28.01, 1.00], [-150.08, 19.64, 1.00], [144.40, -54.71, 1.00], [-35.58, -54.72, 1.00], [68.53, -52.85, 1.00], [-54.82, 12.76, 1.00], [-111.46, -52.87, 1.00], [164.51, 34.19, 1.00], [-125.18, -12.77, 1.00], [-164.51, -34.19, 1.00], [125.18, 12.77, 1.00], [-15.50, 34.19, 1.00], [54.82, -12.76, 1.00], [15.49, -34.19, 1.00], [-68.53, 52.85, 1.00], [111.47, 52.86, 1.00], [91.48, -7.37, 1.00], [-7.38, -1.47, 1.00], [-88.52, -7.38, 1.00], [-168.69, 82.47, 1.00], [-172.62, 1.47, 1.00], [168.69, -82.47, 1.00], [172.62, -1.46, 1.00], [11.22, 82.48, 1.00], [7.38, 1.47, 1.00], [-11.21, -82.48, 1.00], [-91.48, 7.37, 1.00], [88.52, 7.38, 1.00]], [[-110.97, -81.34, 1.00], [-98.09, -3.09, 1.00], [69.03, -81.34, 1.00], [-176.88, -8.08, 1.00], [-81.91, 3.09, 1.00], [176.88, 8.08, 1.00], [81.91, -3.09, 1.00], [3.12, -8.08, 1.00], [98.09, 3.09, 1.00], [-3.12, 8.08, 1.00], [110.97, 81.34, 1.00], [-69.03, 81.34, 1.00], [145.76, 30.52, 1.00], [46.33, -45.41, 1.00], [-34.24, 30.52, 1.00], [-54.51, 28.99, 1.00], [133.67, 45.41, 1.00], [54.51, -28.99, 1.00], [-133.67, -45.41, 1.00], [125.49, 28.99, 1.00], [-46.33, 45.41, 1.00], [-125.49, -28.99, 1.00], [-145.76, -30.52, 1.00], [34.24, -30.52, 1.00], [159.58, 41.40, 1.00], [68.40, -44.67, 1.00], [-20.42, 41.40, 1.00], [-46.75, 15.18, 1.00], [111.60, 44.67, 1.00], [46.75, -15.18, 1.00], [-111.60, -44.67, 1.00], [133.25, 15.18, 1.00], [-68.40, 44.67, 1.00], [-133.25, -15.18, 1.00], [-159.58, -41.40, 1.00], [20.42, -41.40, 1.00], [85.43, -37.93, 1.00], [-38.02, 3.60, 1.00], [-94.57, -37.93, 1.00], [174.17, 51.83, 1.00], [-141.98, -3.60, 1.00], [-174.17, -51.83, 1.00], [141.98, 3.60, 1.00], [-5.83, 51.83, 1.00], [38.02, -3.60, 1.00], [5.83, -51.83, 1.00], [-85.43, 37.93, 1.00], [94.57, 37.93, 1.00], [21.18, 27.17, 1.00], [54.86, 56.05, 1.00], [-158.82, 27.17, 1.00], [61.17, 18.75, 1.00], [125.14, -56.05, 1.00], [-61.17, -18.75, 1.00], [-125.14, 56.05, 1.00], [-118.83, 18.75, 1.00], [-54.86, -56.05, 1.00], [118.83, -18.75, 1.00], [-21.18, -27.17, 1.00], [158.82, -27.17, 1.00], [104.66, -9.56, 1.00], [-9.88, -14.45, 1.00], [-75.34, -9.56, 1.00], [-123.65, 72.56, 1.00], [-170.12, 14.45, 1.00], [123.65, -72.56, 1.00], [170.12, -14.45, 1.00], [56.35, 72.56, 1.00], [9.88, 14.45, 1.00], [-56.35, -72.56, 1.00], [-104.66, 9.56, 1.00], [75.34, 9.56, 1.00], [25.94, -16.83, 1.00], [-34.66, 59.40, 1.00], [-154.06, -16.83, 1.00], [108.59, 24.75, 1.00], [-145.34, -59.41, 1.00], [-108.59, -24.75, 1.00], [145.34, 59.41, 1.00], [-71.41, 24.75, 1.00], [34.66, -59.41, 1.00], [71.41, -24.75, 1.00], [-25.94, 16.83, 1.00], [154.06, 16.83, 1.00], [-100.89, 26.49, 1.00], [153.10, -9.74, 1.00], [79.11, 26.49, 1.00], [-20.77, -61.51, 1.00], [26.90, 9.74, 1.00], [20.77, 61.51, 1.00], [-26.90, -9.74, 1.00], [159.23, -61.51, 1.00], [-153.10, 9.74, 1.00], [-159.23, 61.51, 1.00], [100.89, -26.49, 1.00], [-79.11, -26.49, 1.00], [44.31, 12.28, 1.00], [17.30, 44.36, 1.00], [-135.69, 12.28, 1.00], [73.08, 43.05, 1.00], [162.70, -44.36, 1.00], [-73.08, -43.05, 1.00], [-162.70, 44.36, 1.00], [-106.92, 43.05, 1.00], [-17.30, -44.36, 1.00], [106.92, -43.05, 1.00], [-44.31, -12.28, 1.00], [135.69, -12.28, 1.00], [-169.08, -24.53, 1.00], [-112.54, -63.29, 1.00], [10.92, -24.53, 1.00], [-114.93, -9.92, 1.00], [-67.46, 63.28, 1.00], [114.93, 9.92, 1.00], [67.46, -63.29, 1.00], [65.07, -9.92, 1.00], [112.54, 63.29, 1.00], [-65.07, 9.92, 1.00], [169.08, 24.53, 1.00], [-10.92, 24.53, 1.00], [93.20, -57.39, 1.00], [-57.43, -1.73, 1.00], [-86.80, -57.39, 1.00], [-177.95, 32.55, 1.00], [-122.57, 1.73, 1.00], [177.95, -32.55, 1.00], [122.57, -1.73, 1.00], [2.05, 32.55, 1.00], [57.43, 1.73, 1.00], [-2.05, -32.55, 1.00], [-93.20, 57.39, 1.00], [86.80, 57.39, 1.00], [-17.59, 3.04, 1.00], [170.04, 72.16, 1.00], [162.41, 3.04, 1.00], [86.81, -17.56, 1.00], [9.96, -72.16, 1.00], [-86.81, 17.56, 1.00], [-9.96, 72.16, 1.00], [-93.19, -17.56, 1.00], [-170.04, -72.16, 1.00], [93.19, 17.56, 1.00], [17.59, -3.04, 1.00], [-162.41, -3.04, 1.00], [39.38, 44.26, 1.00], [56.93, 33.61, 1.00], [-140.62, 44.26, 1.00], [38.42, 27.03, 1.00], [123.07, -33.61, 1.00], [-38.42, -27.03, 1.00], [-123.07, 33.61, 1.00], [-141.58, 27.03, 1.00], [-56.93, -33.61, 1.00], [141.58, -27.03, 1.00], [-39.38, -44.26, 1.00], [140.62, -44.26, 1.00]], [[165.52, 26.52, 1.00], [63.39, -60.04, 1.00], [-14.48, 26.52, 1.00], [-62.74, 12.93, 1.00], [116.61, 60.04, 1.00], [62.74, -12.93, 1.00], [-116.61, -60.04, 1.00], [117.26, 12.93, 1.00], [-63.39, 60.04, 1.00], [-117.26, -12.93, 1.00], [-165.52, -26.52, 1.00], [14.48, -26.52, 1.00], [-150.22, -21.62, 1.00], [-141.41, -53.79, 1.00], [29.78, -21.62, 1.00], [-114.55, -27.50, 1.00], [-38.59, 53.79, 1.00], [114.55, 27.50, 1.00], [38.59, -53.79, 1.00], [65.45, -27.50, 1.00], [141.41, 53.79, 1.00], [-65.45, 27.50, 1.00], [150.22, 21.62, 1.00], [-29.78, 21.62, 1.00], [-163.47, 81.91, 1.00], [92.31, -7.75, 1.00], [16.53, 81.91, 1.00], [-7.76, -2.29, 1.00], [87.69, 7.75, 1.00], [7.76, 2.29, 1.00], [-87.69, -7.75, 1.00], [172.24, -2.29, 1.00], [-92.31, 7.75, 1.00], [-172.24, 2.29, 1.00], [163.47, -81.91, 1.00], [-16.53, -81.91, 1.00], [-79.91, -73.49, 1.00], [-106.27, 2.85, 1.00], [100.09, -73.49, 1.00], [177.03, -16.24, 1.00], [-73.73, -2.85, 1.00], [-177.03, 16.24, 1.00], [73.73, 2.85, 1.00], [-2.97, -16.24, 1.00], [106.27, -2.85, 1.00], [2.97, 16.24, 1.00], [79.91, 73.49, 1.00], [-100.09, 73.49, 1.00], [-43.19, 73.63, 1.00], [101.37, 11.86, 1.00], [136.81, 73.63, 1.00], [12.09, -11.12, 1.00], [78.63, -11.86, 1.00], [-12.09, 11.12, 1.00], [-78.63, 11.86, 1.00], [-167.91, -11.12, 1.00], [-101.37, -11.86, 1.00], [167.91, 11.12, 1.00], [43.19, -73.63, 1.00], [-136.81, -73.63, 1.00], [109.86, -34.83, 1.00], [-36.50, -16.19, 1.00], [-70.14, -34.83, 1.00], [-153.97, 50.53, 1.00], [-143.50, 16.19, 1.00], [153.97, -50.53, 1.00], [143.50, -16.19, 1.00], [26.03, 50.53, 1.00], [36.50, 16.19, 1.00], [-26.03, -50.53, 1.00], [-109.86, 34.83, 1.00], [70.14, 34.83, 1.00], [-23.31, -6.54, 1.00], [-163.84, 65.83, 1.00], [156.69, -6.54, 1.00], [97.12, -23.15, 1.00], [-16.16, -65.83, 1.00], [-97.12, 23.15, 1.00], [16.16, 65.83, 1.00], [-82.88, -23.15, 1.00], [163.84, -65.83, 1.00], [82.88, 23.15, 1.00], [23.31, 6.54, 1.00], [-156.69, 6.54, 1.00], [-0.87, -31.92, 1.00], [-91.40, 58.07, 1.00], [179.13, -31.92, 1.00], [121.93, -0.74, 1.00], [-88.60, -58.07, 1.00], [-121.93, 0.74, 1.00], [88.60, 58.07, 1.00], [-58.07, -0.74, 1.00], [91.40, -58.07, 1.00], [58.07, 0.74, 1.00], [0.87, 31.92, 1.00], [-179.13, 31.92, 1.00], [163.12, 43.35, 1.00], [72.90, -44.10, 1.00], [-16.88, 43.35, 1.00], [-45.39, 12.19, 1.00], [107.10, 44.10, 1.00], [45.39, -12.19, 1.00], [-107.10, -44.10, 1.00], [134.61, 12.19, 1.00], [-72.90, 44.10, 1.00], [-134.61, -12.19, 1.00], [-163.12, -43.35, 1.00], [16.88, -43.35, 1.00], [-114.23, 50.37, 1.00], [127.06, -15.17, 1.00], [65.77, 50.37, 1.00], [-18.77, -35.57, 1.00], [52.94, 15.17, 1.00], [18.77, 35.57, 1.00], [-52.94, -15.17, 1.00], [161.23, -35.57, 1.00], [-127.06, 15.17, 1.00], [-161.23, 35.57, 1.00], [114.23, -50.37, 1.00], [-65.77, -50.37, 1.00], [54.17, 30.16, 1.00], [35.63, 30.41, 1.00], [-125.83, 30.16, 1.00], [45.21, 44.51, 1.00], [144.37, -30.41, 1.00], [-45.21, -44.51, 1.00], [-144.37, 30.41, 1.00], [-134.79, 44.51, 1.00], [-35.63, -30.41, 1.00], [134.79, -44.51, 1.00], [-54.17, -30.16, 1.00], [125.83, -30.16, 1.00], [126.20, 41.73, 1.00], [47.86, -26.15, 1.00], [-53.80, 41.73, 1.00], [-33.51, 37.03, 1.00], [132.14, 26.15, 1.00], [33.51, -37.03, 1.00], [-132.14, -26.15, 1.00], [146.49, 37.03, 1.00], [-47.86, 26.15, 1.00], [-146.49, -37.03, 1.00], [-126.20, -41.73, 1.00], [53.80, -41.73, 1.00], [-161.75, 20.38, 1.00], [130.12, -62.91, 1.00], [18.25, 20.38, 1.00], [-68.63, -17.07, 1.00], [49.88, 62.91, 1.00], [68.63, 17.07, 1.00], [-49.88, -62.91, 1.00], [111.37, -17.07, 1.00], [-130.12, 62.91, 1.00], [-111.37, 17.07, 1.00], [161.75, -20.38, 1.00], [-18.25, -20.38, 1.00], [2.71, 48.49, 1.00], [87.60, 41.45, 1.00], [-177.29, 48.49, 1.00], [41.48, 1.80, 1.00], [92.40, -41.45, 1.00], [-41.48, -1.80, 1.00], [-92.40, 41.45, 1.00], [-138.52, 1.80, 1.00], [-87.60, -41.45, 1.00], [138.52, -1.80, 1.00], [-2.71, -48.49, 1.00], [177.29, -48.49, 1.00], [-98.15, -27.54, 1.00], [-152.22, -7.22, 1.00], [81.85, -27.54, 1.00], [-164.79, -61.37, 1.00], [-27.78, 7.22, 1.00], [164.79, 61.37, 1.00], [27.78, -7.22, 1.00], [15.21, -61.37, 1.00], [152.22, 7.22, 1.00], [-15.21, 61.37, 1.00], [98.15, 27.54, 1.00], [-81.85, 27.54, 1.00]], [[-40.48, 43.36, 1.00], [124.51, 33.58, 1.00], [139.52, 43.36, 1.00], [38.85, -28.17, 1.00], [55.49, -33.58, 1.00], [-38.85, 28.17, 1.00], [-55.49, 33.58, 1.00], [-141.15, -28.17, 1.00], [-124.51, -33.58, 1.00], [141.15, 28.17, 1.00], [40.48, -43.36, 1.00], [-139.52, -43.36, 1.00], [56.01, 17.18, 1.00], [20.46, 32.29, 1.00], [-123.99, 17.18, 1.00], [61.05, 52.38, 1.00], [159.54, -32.29, 1.00], [-61.05, -52.38, 1.00], [-159.54, 32.29, 1.00], [-118.95, 52.38, 1.00], [-20.46, -32.29, 1.00], [118.95, -52.38, 1.00], [-56.01, -17.18, 1.00], [123.99, -17.18, 1.00], [-179.51, -8.95, 1.00], [-93.08, -81.04, 1.00], [0.49, -8.95, 1.00], [-98.95, -0.48, 1.00], [-86.92, 81.04, 1.00], [98.95, 0.48, 1.00], [86.92, -81.04, 1.00], [81.05, -0.48, 1.00], [93.08, 81.04, 1.00], [-81.05, 0.48, 1.00], [179.51, 8.95, 1.00], [-0.49, 8.95, 1.00], [12.04, -13.56, 1.00], [-49.15, 71.95, 1.00], [-167.96, -13.56, 1.00], [103.85, 11.70, 1.00], [-130.85, -71.95, 1.00], [-103.85, -11.70, 1.00], [130.85, 71.95, 1.00], [-76.15, 11.70, 1.00], [49.15, -71.95, 1.00], [76.15, -11.70, 1.00], [-12.04, 13.56, 1.00], [167.96, 13.56, 1.00], [-13.62, -58.20, 1.00], [-98.30, 30.80, 1.00], [166.38, -58.20, 1.00], [148.93, -7.13, 1.00], [-81.70, -30.80, 1.00], [-148.93, 7.13, 1.00], [81.70, 30.80, 1.00], [-31.07, -7.13, 1.00], [98.30, -30.80, 1.00], [31.07, 7.13, 1.00], [13.62, 58.20, 1.00], [-166.38, 58.20, 1.00], [65.26, -20.55, 1.00], [-22.43, 23.07, 1.00], [-114.74, -20.55, 1.00], [131.85, 58.26, 1.00], [-157.57, -23.07, 1.00], [-131.85, -58.26, 1.00], [157.57, 23.07, 1.00], [-48.15, 58.26, 1.00], [22.43, -23.07, 1.00], [48.15, -58.26, 1.00], [-65.26, 20.55, 1.00], [114.74, 20.55, 1.00], [-135.39, 26.50, 1.00], [144.63, -39.58, 1.00], [44.61, 26.50, 1.00], [-55.00, -38.94, 1.00], [35.37, 39.58, 1.00], [55.00, 38.94, 1.00], [-35.37, -39.58, 1.00], [125.00, -38.94, 1.00], [-144.63, 39.58, 1.00], [-125.00, 38.94, 1.00], [135.39, -26.50, 1.00], [-44.61, -26.50, 1.00], [114.95, -4.75, 1.00], [-5.23, -24.86, 1.00], [-65.05, -4.75, 1.00], [-101.14, 64.63, 1.00], [-174.77, 24.86, 1.00], [101.14, -64.63, 1.00], [174.77, -24.86, 1.00], [78.86, 64.63, 1.00], [5.23, 24.86, 1.00], [-78.86, -64.63, 1.00], [-114.95, 4.75, 1.00], [65.05, 4.75, 1.00], [35.85, 52.64, 1.00], [65.91, 29.46, 1.00], [-144.15, 52.64, 1.00], [31.75, 20.82, 1.00], [114.09, -29.46, 1.00], [-31.75, -20.82, 1.00], [-114.09, 29.46, 1.00], [-148.25, 20.82, 1.00], [-65.91, -29.46, 1.00], [148.25, -20.82, 1.00], [-35.85, -52.64, 1.00], [144.15, -52.64, 1.00], [86.45, 11.52, 1.00], [11.54, 3.48, 1.00], [-93.55, 11.52, 1.00], [16.90, 77.95, 1.00], [168.46, -3.48, 1.00], [-16.90, -77.95, 1.00], [-168.46, 3.48, 1.00], [-163.10, 77.95, 1.00], [-11.54, -3.48, 1.00], [163.10, -77.95, 1.00], [-86.45, -11.52, 1.00], [93.55, -11.52, 1.00], [135.24, 4.02, 1.00], [5.69, -45.10, 1.00], [-44.76, 4.02, 1.00], [-84.35, 44.62, 1.00], [174.31, 45.10, 1.00], [84.35, -44.62, 1.00], [-174.31, -45.10, 1.00], [95.65, 44.62, 1.00], [-5.69, 45.10, 1.00], [-95.65, -44.62, 1.00], [-135.24, -4.02, 1.00], [44.76, -4.02, 1.00], [-129.84, -18.16, 1.00], [-156.86, -37.50, 1.00], [50.16, -18.16, 1.00], [-117.12, -46.85, 1.00], [-23.14, 37.50, 1.00], [117.12, 46.85, 1.00], [23.14, -37.50, 1.00], [62.88, -46.85, 1.00], [156.86, 37.50, 1.00], [-62.88, 46.85, 1.00], [129.84, 18.16, 1.00], [-50.16, 18.16, 1.00], [-74.10, 32.87, 1.00], [146.10, 13.30, 1.00], [105.90, 32.87, 1.00], [22.97, -53.88, 1.00], [33.90, -13.30, 1.00], [-22.97, 53.88, 1.00], [-33.90, 13.30, 1.00], [-157.03, -53.88, 1.00], [-146.10, -13.30, 1.00], [157.03, 53.88, 1.00], [74.10, -32.87, 1.00], [-105.90, -32.87, 1.00], [-119.92, -5.64, 1.00], [-173.50, -29.76, 1.00], [60.08, -5.64, 1.00], [-101.20, -59.60, 1.00], [-6.50, 29.76, 1.00], [101.20, 59.60, 1.00], [6.50, -29.76, 1.00], [78.80, -59.60, 1.00], [173.50, 29.76, 1.00], [-78.80, 59.60, 1.00], [119.92, 5.64, 1.00], [-60.08, 5.64, 1.00], [73.14, 16.13, 1.00], [16.82, 16.18, 1.00], [-106.86, 16.13, 1.00], [45.09, 66.83, 1.00], [163.18, -16.18, 1.00], [-45.09, -66.83, 1.00], [-163.18, 16.18, 1.00], [-134.91, 66.83, 1.00], [-16.82, -16.18, 1.00], [134.91, -66.83, 1.00], [-73.14, -16.13, 1.00], [106.86, -16.13, 1.00], [-11.70, -43.38, 1.00], [-102.11, 45.38, 1.00], [168.30, -43.38, 1.00], [133.98, -8.47, 1.00], [-77.89, -45.38, 1.00], [-133.98, 8.47, 1.00], [77.89, 45.38, 1.00], [-46.02, -8.47, 1.00], [102.11, -45.38, 1.00], [46.02, 8.47, 1.00], [11.70, 43.38, 1.00], [-168.30, 43.38, 1.00], [-24.11, 3.73, 1.00], [170.94, 65.63, 1.00], [155.89, 3.73, 1.00], [85.92, -24.05, 1.00], [9.06, -65.63, 1.00], [-85.92, 24.05, 1.00], [-9.06, 65.63, 1.00], [-94.08, -24.05, 1.00], [-170.94, -65.63, 1.00], [94.08, 24.05, 1.00], [24.11, -3.73, 1.00], [-155.89, -3.73, 1.00]], [[104.60, -3.68, 1.00], [-3.81, -14.57, 1.00], [-75.40, -3.68, 1.00], [-104.32, 74.95, 1.00], [-176.19, 14.57, 1.00], [104.32, -74.95, 1.00], [176.19, -14.57, 1.00], [75.68, 74.95, 1.00], [3.81, 14.57, 1.00], [-75.68, -74.95, 1.00], [-104.60, 3.68, 1.00], [75.40, 3.68, 1.00], [153.77, -30.33, 1.00], [-52.93, -50.74, 1.00], [-26.23, -30.33, 1.00], [-123.11, 22.43, 1.00], [-127.07, 50.74, 1.00], [123.11, -22.43, 1.00], [127.07, -50.74, 1.00], [56.89, 22.43, 1.00], [52.93, 50.74, 1.00], [-56.89, -22.43, 1.00], [-153.77, 30.33, 1.00], [26.23, 30.33, 1.00], [35.99, -39.77, 1.00], [-54.77, 38.45, 1.00], [-144.01, -39.77, 1.00], [135.81, 26.85, 1.00], [-125.23, -38.45, 1.00], [-135.81, -26.85, 1.00], [125.23, 38.45, 1.00], [-44.19, 26.85, 1.00], [54.77, -38.45, 1.00], [44.19, -26.85, 1.00], [-35.99, 39.77, 1.00], [144.01, 39.77, 1.00], [71.82, -25.43, 1.00], [-26.58, 16.37, 1.00], [-108.18, -25.43, 1.00], [146.72, 59.10, 1.00], [-153.42, -16.37, 1.00], [-146.72, -59.10, 1.00], [153.42, 16.37, 1.00], [-33.28, 59.10, 1.00], [26.58, -16.37, 1.00], [33.28, -59.10, 1.00], [-71.82, 25.43, 1.00], [108.18, 25.43, 1.00], [-136.55, 26.52, 1.00], [144.03, -40.51, 1.00], [43.45, 26.52, 1.00], [-55.50, -37.97, 1.00], [35.97, 40.51, 1.00], [55.50, 37.97, 1.00], [-35.97, -40.51, 1.00], [124.50, -37.97, 1.00], [-144.03, 40.51, 1.00], [-124.50, 37.97, 1.00], [136.55, -26.52, 1.00], [-43.45, -26.52, 1.00], [-6.52, -1.08, 1.00], [-170.58, 83.40, 1.00], [173.48, -1.08, 1.00], [91.09, -6.52, 1.00], [-9.42, -83.40, 1.00], [-91.09, 6.52, 1.00], [9.42, 83.40, 1.00], [-88.91, -6.52, 1.00], [170.58, -83.40, 1.00], [88.91, 6.52, 1.00], [6.52, 1.08, 1.00], [-173.48, 1.08, 1.00], [-71.13, 40.38, 1.00], [138.05, 14.26, 1.00], [108.87, 40.38, 1.00], [20.82, -46.12, 1.00], [41.95, -14.26, 1.00], [-20.82, 46.12, 1.00], [-41.95, 14.26, 1.00], [-159.18, -46.12, 1.00], [-138.05, -14.26, 1.00], [159.18, 46.12, 1.00], [71.13, -40.38, 1.00], [-108.87, -40.38, 1.00], [-153.97, -27.97, 1.00], [-129.57, -52.52, 1.00], [26.03, -27.97, 1.00], [-120.59, -22.81, 1.00], [-50.43, 52.52, 1.00], [120.59, 22.81, 1.00], [50.43, -52.52, 1.00], [59.41, -22.81, 1.00], [129.57, 52.52, 1.00], [-59.41, 22.81, 1.00], [153.97, 27.97, 1.00], [-26.03, 27.97, 1.00], [-80.23, 13.48, 1.00], [166.33, 9.49, 1.00], [99.77, 13.48, 1.00], [35.29, -73.41, 1.00], [13.67, -9.49, 1.00], [-35.29, 73.41, 1.00], [-13.67, 9.49, 1.00], [-144.71, -73.41, 1.00], [-166.33, -9.49, 1.00], [144.71, 73.41, 1.00], [80.23, -13.48, 1.00], [-99.77, -13.48, 1.00], [55.43, -9.00, 1.00], [-10.89, 34.09, 1.00], [-124.57, -9.00, 1.00], [105.60, 54.41, 1.00], [-169.11, -34.09, 1.00], [-105.60, -54.41, 1.00], [169.11, 34.09, 1.00], [-74.40, 54.41, 1.00], [10.89, -34.09, 1.00], [74.40, -54.41, 1.00], [-55.43, 9.00, 1.00], [124.57, 9.00, 1.00], [68.32, -7.14, 1.00], [-7.68, 21.51, 1.00], [-111.68, -7.14, 1.00], [108.74, 67.22, 1.00], [-172.32, -21.51, 1.00], [-108.74, -67.22, 1.00], [172.32, 21.51, 1.00], [-71.26, 67.22, 1.00], [7.68, -21.51, 1.00], [71.26, -67.22, 1.00], [-68.32, 7.14, 1.00], [111.68, 7.14, 1.00], [-174.97, 36.12, 1.00], [96.85, -53.58, 1.00], [5.03, 36.12, 1.00], [-53.77, -4.06, 1.00], [83.15, 53.58, 1.00], [53.77, 4.06, 1.00], [-83.15, -53.58, 1.00], [126.23, -4.06, 1.00], [-96.85, 53.58, 1.00], [-126.23, 4.06, 1.00], [174.97, -36.12, 1.00], [-5.03, -36.12, 1.00], [-149.91, 16.26, 1.00], [149.81, -56.16, 1.00], [30.09, 16.26, 1.00], [-71.37, -28.77, 1.00], [30.19, 56.16, 1.00], [71.37, 28.77, 1.00], [-30.19, -56.16, 1.00], [108.63, -28.77, 1.00], [-149.81, 56.16, 1.00], [-108.63, 28.77, 1.00], [149.91, -16.26, 1.00], [-30.09, -16.26, 1.00], [2.52, -51.45, 1.00], [-87.99, 38.50, 1.00], [-177.48, -51.45, 1.00], [141.48, 1.57, 1.00], [-92.01, -38.50, 1.00], [-141.48, -1.57, 1.00], [92.01, 38.50, 1.00], [-38.52, 1.57, 1.00], [87.99, -38.50, 1.00], [38.52, -1.57, 1.00], [-2.52, 51.45, 1.00], [177.48, 51.45, 1.00], [161.12, -9.98, 1.00], [-28.54, -68.73, 1.00], [-18.88, -9.98, 1.00], [-100.54, 18.59, 1.00], [-151.46, 68.73, 1.00], [100.54, -18.59, 1.00], [151.46, -68.73, 1.00], [79.46, 18.59, 1.00], [28.54, 68.73, 1.00], [-79.46, -18.59, 1.00], [-161.12, 9.98, 1.00], [18.88, 9.98, 1.00], [12.84, 24.97, 1.00], [64.49, 62.11, 1.00], [-167.16, 24.97, 1.00], [64.47, 11.62, 1.00], [115.51, -62.11, 1.00], [-64.47, -11.62, 1.00], [-115.51, 62.11, 1.00], [-115.53, 11.62, 1.00], [-64.49, -62.11, 1.00], [115.53, -11.62, 1.00], [-12.84, -24.97, 1.00], [167.16, -24.97, 1.00], [74.13, 41.65, 1.00], [42.76, 11.79, 1.00], [-105.87, 41.65, 1.00], [17.09, 45.95, 1.00], [137.24, -11.79, 1.00], [-17.09, -45.95, 1.00], [-137.24, 11.79, 1.00], [-162.91, 45.95, 1.00], [-42.76, -11.79, 1.00], [162.91, -45.95, 1.00], [-74.13, -41.65, 1.00], [105.87, -41.65, 1.00], [154.04, 1.27, 1.00], [2.90, -64.01, 1.00], [-25.96, 1.27, 1.00], [-88.59, 25.96, 1.00], [177.10, 64.01, 1.00], [88.59, -25.96, 1.00], [-177.10, -64.01, 1.00], [91.41, 25.96, 1.00], [-2.90, 64.01, 1.00], [-91.41, -25.96, 1.00], [-154.04, -1.27, 1.00], [25.96, -1.27, 1.00]], [[24.80, -10.46, 1.00], [-23.76, 63.21, 1.00], [-155.20, -10.46, 1.00], [101.50, 24.36, 1.00], [-156.24, -63.21, 1.00], [-101.50, -24.36, 1.00], [156.24, 63.21, 1.00], [-78.50, 24.36, 1.00], [23.76, -63.21, 1.00], [78.50, -24.36, 1.00], [-24.80, 10.46, 1.00], [155.20, 10.46, 1.00], [-134.64, 65.44, 1.00], [108.01, -16.98, 1.00], [45.36, 65.44, 1.00], [-17.80, -17.20, 1.00], [71.99, 16.98, 1.00], [17.80, 17.20, 1.00], [-71.99, -16.98, 1.00], [162.20, -17.20, 1.00], [-108.01, 16.98, 1.00], [-162.20, 17.20, 1.00], [134.64, -65.44, 1.00], [-45.36, -65.44, 1.00], [177.60, 54.85, 1.00], [88.31, -35.12, 1.00], [-2.40, 54.85, 1.00], [-35.13, 1.38, 1.00], [91.69, 35.12, 1.00], [35.13, -1.38, 1.00], [-91.69, -35.12, 1.00], [144.87, 1.38, 1.00], [-88.31, 35.12, 1.00], [-144.87, -1.38, 1.00], [-177.60, -54.85, 1.00], [2.40, -54.85, 1.00], [157.93, 82.01, 1.00], [86.98, -7.40, 1.00], [-22.07, 82.01, 1.00], [-7.41, 2.99, 1.00], [93.02, 7.40, 1.00], [7.41, -2.99, 1.00], [-93.02, -7.40, 1.00], [172.59, 2.99, 1.00], [-86.98, 7.40, 1.00], [-172.59, -2.99, 1.00], [-157.93, -82.01, 1.00], [22.07, -82.01, 1.00], [42.48, -13.21, 1.00], [-19.17, 45.89, 1.00], [-137.52, -13.21, 1.00], [107.66, 41.11, 1.00], [-160.83, -45.89, 1.00], [-107.66, -41.11, 1.00], [160.83, 45.89, 1.00], [-72.34, 41.11, 1.00], [19.17, -45.89, 1.00], [72.34, -41.11, 1.00], [-42.48, 13.21, 1.00], [137.52, 13.21, 1.00], [28.48, 10.90, 1.00], [21.99, 59.68, 1.00], [-151.52, 10.90, 1.00], [77.65, 27.92, 1.00], [158.01, -59.68, 1.00], [-77.65, -27.92, 1.00], [-158.01, 59.68, 1.00], [-102.35, 27.92, 1.00], [-21.99, -59.68, 1.00], [102.35, -27.92, 1.00], [-28.48, -10.90, 1.00], [151.52, -10.90, 1.00], [-33.79, 21.61, 1.00], [144.53, 50.59, 1.00], [146.21, 21.61, 1.00], [64.51, -31.14, 1.00], [35.47, -50.59, 1.00], [-64.51, 31.14, 1.00], [-35.47, 50.59, 1.00], [-115.49, -31.14, 1.00], [-144.53, -50.59, 1.00], [115.49, 31.14, 1.00], [33.79, -21.61, 1.00], [-146.21, -21.61, 1.00], [-175.53, -31.74, 1.00], [-97.19, -57.98, 1.00], [4.47, -31.74, 1.00], [-121.82, -3.80, 1.00], [-82.81, 57.98, 1.00], [121.82, 3.80, 1.00], [82.81, -57.98, 1.00], [58.18, -3.80, 1.00], [97.19, 57.98, 1.00], [-58.18, 3.80, 1.00], [175.53, 31.74, 1.00], [-4.47, 31.74, 1.00], [89.40, 19.43, 1.00], [19.43, 0.56, 1.00], [-90.60, 19.43, 1.00], [1.69, 70.56, 1.00], [160.57, -0.56, 1.00], [-1.69, -70.56, 1.00], [-160.57, 0.56, 1.00], [-178.31, 70.56, 1.00], [-19.43, -0.56, 1.00], [178.31, -70.56, 1.00], [-89.40, -19.43, 1.00], [90.60, -19.43, 1.00], [-27.28, -27.88, 1.00], [-130.91, 51.78, 1.00], [152.72, -27.88, 1.00], [120.76, -23.90, 1.00], [-49.09, -51.78, 1.00], [-120.76, 23.90, 1.00], [49.09, 51.78, 1.00], [-59.24, -23.90, 1.00], [130.91, -51.78, 1.00], [59.24, 23.90, 1.00], [27.28, 27.88, 1.00], [-152.72, 27.88, 1.00], [139.90, -15.44, 1.00], [-23.21, -47.50, 1.00], [-40.10, -15.44, 1.00], [-109.85, 38.38, 1.00], [-156.79, 47.50, 1.00], [109.85, -38.38, 1.00], [156.79, -47.50, 1.00], [70.15, 38.38, 1.00], [23.21, 47.50, 1.00], [-70.15, -38.38, 1.00], [-139.90, 15.44, 1.00], [40.10, 15.44, 1.00], [-2.17, -43.33, 1.00], [-92.29, 46.62, 1.00], [177.83, -43.33, 1.00], [133.35, -1.58, 1.00], [-87.71, -46.62, 1.00], [-133.35, 1.58, 1.00], [87.71, 46.62, 1.00], [-46.65, -1.58, 1.00], [92.29, -46.62, 1.00], [46.65, 1.58, 1.00], [2.17, 43.33, 1.00], [-177.83, 43.33, 1.00], [41.12, 27.96, 1.00], [38.91, 41.71, 1.00], [-138.88, 27.96, 1.00], [54.83, 35.51, 1.00], [141.09, -41.71, 1.00], [-54.83, -35.51, 1.00], [-141.09, 41.71, 1.00], [-125.17, 35.51, 1.00], [-38.91, -41.71, 1.00], [125.17, -35.51, 1.00], [-41.12, -27.96, 1.00], [138.88, -27.96, 1.00], [-126.67, 13.75, 1.00], [163.04, -35.46, 1.00], [53.33, 13.75, 1.00], [-67.73, -51.18, 1.00], [16.96, 35.46, 1.00], [67.73, 51.18, 1.00], [-16.96, -35.46, 1.00], [112.27, -51.18, 1.00], [-163.04, 35.46, 1.00], [-112.27, 51.18, 1.00], [126.67, -13.75, 1.00], [-53.33, -13.75, 1.00], [6.02, -15.42, 1.00], [-69.18, 73.47, 1.00], [-173.98, -15.42, 1.00], [105.51, 5.80, 1.00], [-110.82, -73.47, 1.00], [-105.51, -5.80, 1.00], [110.82, 73.47, 1.00], [-74.49, 5.80, 1.00], [69.18, -73.47, 1.00], [74.49, -5.80, 1.00], [-6.02, 15.42, 1.00], [173.98, 15.42, 1.00], [160.08, 33.45, 1.00], [62.71, -51.67, 1.00], [-19.92, 33.45, 1.00], [-54.90, 16.52, 1.00], [117.29, 51.67, 1.00], [54.90, -16.52, 1.00], [-117.29, -51.67, 1.00], [125.10, 16.52, 1.00], [-62.71, 51.67, 1.00], [-125.10, -16.52, 1.00], [-160.08, -33.45, 1.00], [19.92, -33.45, 1.00], [80.34, 6.51, 1.00], [6.61, 9.59, 1.00], [-99.66, 6.51, 1.00], [55.76, 78.37, 1.00], [173.39, -9.59, 1.00], [-55.76, -78.37, 1.00], [-173.39, 9.59, 1.00], [-124.24, 78.37, 1.00], [-6.61, -9.59, 1.00], [124.24, -78.37, 1.00], [-80.34, -6.51, 1.00], [99.66, -6.51, 1.00], [6.25, 24.64, 1.00], [76.64, 64.63, 1.00], [-173.75, 24.64, 1.00], [65.23, 5.68, 1.00], [103.36, -64.63, 1.00], [-65.23, -5.68, 1.00], [-103.36, 64.63, 1.00], [-114.77, 5.68, 1.00], [-76.64, -64.63, 1.00], [114.77, -5.68, 1.00], [-6.25, -24.64, 1.00], [173.75, -24.64, 1.00], [51.41, -63.45, 1.00], [-68.67, 16.19, 1.00], [-128.59, -63.45, 1.00], [162.69, 20.45, 1.00], [-111.33, -16.19, 1.00], [-162.69, -20.45, 1.00], [111.33, 16.19, 1.00], [-17.31, 20.45, 1.00], [68.67, -16.19, 1.00], [17.31, -20.45, 1.00], [-51.41, 63.45, 1.00], [128.59, 63.45, 1.00], [-50.60, 28.85, 1.00], [144.51, 33.77, 1.00], [129.40, 28.85, 1.00], [49.04, -42.60, 1.00], [35.49, -33.77, 1.00], [-49.04, 42.60, 1.00], [-35.49, 33.77, 1.00], [-130.96, -42.60, 1.00], [-144.51, -33.77, 1.00], [130.96, 42.60, 1.00], [50.60, -28.85, 1.00], [-129.40, -28.85, 1.00]]];
    
        // [dirs(:,1), dirs(:,2)] = cart2sph(vecs(:,1), vecs(:,2), vecs(:,3));
        var dirs = speakerPos[degree - 1];
        return dirs;
    }
    
    // exports
    module.exports.getAmbisonicDecMtx = getAmbisonicDecMtx;
    module.exports.getTdesign = getTdesign;
    module.exports.deg2rad = deg2rad;
    module.exports.rad2deg = rad2deg;
    module.exports.createNearestLookup = createNearestLookup;
    module.exports.findNearest = findNearest;
    
    },{"convex-hull":31,"numeric":65,"spherical-harmonic-transform":83}],26:[function(require,module,exports){
    'use strict'
    
    module.exports = affineHull
    
    var orient = require('robust-orientation')
    
    function linearlyIndependent(points, d) {
      var nhull = new Array(d+1)
      for(var i=0; i<points.length; ++i) {
        nhull[i] = points[i]
      }
      for(var i=0; i<=points.length; ++i) {
        for(var j=points.length; j<=d; ++j) {
          var x = new Array(d)
          for(var k=0; k<d; ++k) {
            x[k] = Math.pow(j+1-i, k)
          }
          nhull[j] = x
        }
        var o = orient.apply(void 0, nhull)
        if(o) {
          return true
        }
      }
      return false
    }
    
    function affineHull(points) {
      var n = points.length
      if(n === 0) {
        return []
      }
      if(n === 1) {
        return [0]
      }
      var d = points[0].length
      var frame = [ points[0] ]
      var index = [ 0 ]
      for(var i=1; i<n; ++i) {
        frame.push(points[i])
        if(!linearlyIndependent(frame, d)) {
          frame.pop()
          continue
        }
        index.push(i)
        if(index.length === d+1) {
          return index
        }
      }
      return index
    }
    },{"robust-orientation":66}],27:[function(require,module,exports){
    module.exports = { "default": require("core-js/library/fn/object/define-property"), __esModule: true };
    },{"core-js/library/fn/object/define-property":35}],28:[function(require,module,exports){
    "use strict";
    
    exports.__esModule = true;
    
    exports.default = function (instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    };
    },{}],29:[function(require,module,exports){
    "use strict";
    
    exports.__esModule = true;
    
    var _defineProperty = require("../core-js/object/define-property");
    
    var _defineProperty2 = _interopRequireDefault(_defineProperty);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    exports.default = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          (0, _defineProperty2.default)(target, descriptor.key, descriptor);
        }
      }
    
      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    },{"../core-js/object/define-property":27}],30:[function(require,module,exports){
    /**
     * Bit twiddling hacks for JavaScript.
     *
     * Author: Mikola Lysenko
     *
     * Ported from Stanford bit twiddling hack library:
     *    http://graphics.stanford.edu/~seander/bithacks.html
     */
    
    "use strict"; "use restrict";
    
    //Number of bits in an integer
    var INT_BITS = 32;
    
    //Constants
    exports.INT_BITS  = INT_BITS;
    exports.INT_MAX   =  0x7fffffff;
    exports.INT_MIN   = -1<<(INT_BITS-1);
    
    //Returns -1, 0, +1 depending on sign of x
    exports.sign = function(v) {
      return (v > 0) - (v < 0);
    }
    
    //Computes absolute value of integer
    exports.abs = function(v) {
      var mask = v >> (INT_BITS-1);
      return (v ^ mask) - mask;
    }
    
    //Computes minimum of integers x and y
    exports.min = function(x, y) {
      return y ^ ((x ^ y) & -(x < y));
    }
    
    //Computes maximum of integers x and y
    exports.max = function(x, y) {
      return x ^ ((x ^ y) & -(x < y));
    }
    
    //Checks if a number is a power of two
    exports.isPow2 = function(v) {
      return !(v & (v-1)) && (!!v);
    }
    
    //Computes log base 2 of v
    exports.log2 = function(v) {
      var r, shift;
      r =     (v > 0xFFFF) << 4; v >>>= r;
      shift = (v > 0xFF  ) << 3; v >>>= shift; r |= shift;
      shift = (v > 0xF   ) << 2; v >>>= shift; r |= shift;
      shift = (v > 0x3   ) << 1; v >>>= shift; r |= shift;
      return r | (v >> 1);
    }
    
    //Computes log base 10 of v
    exports.log10 = function(v) {
      return  (v >= 1000000000) ? 9 : (v >= 100000000) ? 8 : (v >= 10000000) ? 7 :
              (v >= 1000000) ? 6 : (v >= 100000) ? 5 : (v >= 10000) ? 4 :
              (v >= 1000) ? 3 : (v >= 100) ? 2 : (v >= 10) ? 1 : 0;
    }
    
    //Counts number of bits
    exports.popCount = function(v) {
      v = v - ((v >>> 1) & 0x55555555);
      v = (v & 0x33333333) + ((v >>> 2) & 0x33333333);
      return ((v + (v >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24;
    }
    
    //Counts number of trailing zeros
    function countTrailingZeros(v) {
      var c = 32;
      v &= -v;
      if (v) c--;
      if (v & 0x0000FFFF) c -= 16;
      if (v & 0x00FF00FF) c -= 8;
      if (v & 0x0F0F0F0F) c -= 4;
      if (v & 0x33333333) c -= 2;
      if (v & 0x55555555) c -= 1;
      return c;
    }
    exports.countTrailingZeros = countTrailingZeros;
    
    //Rounds to next power of 2
    exports.nextPow2 = function(v) {
      v += v === 0;
      --v;
      v |= v >>> 1;
      v |= v >>> 2;
      v |= v >>> 4;
      v |= v >>> 8;
      v |= v >>> 16;
      return v + 1;
    }
    
    //Rounds down to previous power of 2
    exports.prevPow2 = function(v) {
      v |= v >>> 1;
      v |= v >>> 2;
      v |= v >>> 4;
      v |= v >>> 8;
      v |= v >>> 16;
      return v - (v>>>1);
    }
    
    //Computes parity of word
    exports.parity = function(v) {
      v ^= v >>> 16;
      v ^= v >>> 8;
      v ^= v >>> 4;
      v &= 0xf;
      return (0x6996 >>> v) & 1;
    }
    
    var REVERSE_TABLE = new Array(256);
    
    (function(tab) {
      for(var i=0; i<256; ++i) {
        var v = i, r = i, s = 7;
        for (v >>>= 1; v; v >>>= 1) {
          r <<= 1;
          r |= v & 1;
          --s;
        }
        tab[i] = (r << s) & 0xff;
      }
    })(REVERSE_TABLE);
    
    //Reverse bits in a 32 bit word
    exports.reverse = function(v) {
      return  (REVERSE_TABLE[ v         & 0xff] << 24) |
              (REVERSE_TABLE[(v >>> 8)  & 0xff] << 16) |
              (REVERSE_TABLE[(v >>> 16) & 0xff] << 8)  |
               REVERSE_TABLE[(v >>> 24) & 0xff];
    }
    
    //Interleave bits of 2 coordinates with 16 bits.  Useful for fast quadtree codes
    exports.interleave2 = function(x, y) {
      x &= 0xFFFF;
      x = (x | (x << 8)) & 0x00FF00FF;
      x = (x | (x << 4)) & 0x0F0F0F0F;
      x = (x | (x << 2)) & 0x33333333;
      x = (x | (x << 1)) & 0x55555555;
    
      y &= 0xFFFF;
      y = (y | (y << 8)) & 0x00FF00FF;
      y = (y | (y << 4)) & 0x0F0F0F0F;
      y = (y | (y << 2)) & 0x33333333;
      y = (y | (y << 1)) & 0x55555555;
    
      return x | (y << 1);
    }
    
    //Extracts the nth interleaved component
    exports.deinterleave2 = function(v, n) {
      v = (v >>> n) & 0x55555555;
      v = (v | (v >>> 1))  & 0x33333333;
      v = (v | (v >>> 2))  & 0x0F0F0F0F;
      v = (v | (v >>> 4))  & 0x00FF00FF;
      v = (v | (v >>> 16)) & 0x000FFFF;
      return (v << 16) >> 16;
    }
    
    
    //Interleave bits of 3 coordinates, each with 10 bits.  Useful for fast octree codes
    exports.interleave3 = function(x, y, z) {
      x &= 0x3FF;
      x  = (x | (x<<16)) & 4278190335;
      x  = (x | (x<<8))  & 251719695;
      x  = (x | (x<<4))  & 3272356035;
      x  = (x | (x<<2))  & 1227133513;
    
      y &= 0x3FF;
      y  = (y | (y<<16)) & 4278190335;
      y  = (y | (y<<8))  & 251719695;
      y  = (y | (y<<4))  & 3272356035;
      y  = (y | (y<<2))  & 1227133513;
      x |= (y << 1);
      
      z &= 0x3FF;
      z  = (z | (z<<16)) & 4278190335;
      z  = (z | (z<<8))  & 251719695;
      z  = (z | (z<<4))  & 3272356035;
      z  = (z | (z<<2))  & 1227133513;
      
      return x | (z << 2);
    }
    
    //Extracts nth interleaved component of a 3-tuple
    exports.deinterleave3 = function(v, n) {
      v = (v >>> n)       & 1227133513;
      v = (v | (v>>>2))   & 3272356035;
      v = (v | (v>>>4))   & 251719695;
      v = (v | (v>>>8))   & 4278190335;
      v = (v | (v>>>16))  & 0x3FF;
      return (v<<22)>>22;
    }
    
    //Computes next combination in colexicographic order (this is mistakenly called nextPermutation on the bit twiddling hacks page)
    exports.nextCombination = function(v) {
      var t = v | (v - 1);
      return (t + 1) | (((~t & -~t) - 1) >>> (countTrailingZeros(v) + 1));
    }
    
    
    },{}],31:[function(require,module,exports){
    "use strict"
    
    var convexHull1d = require('./lib/ch1d')
    var convexHull2d = require('./lib/ch2d')
    var convexHullnd = require('./lib/chnd')
    
    module.exports = convexHull
    
    function convexHull(points) {
      var n = points.length
      if(n === 0) {
        return []
      } else if(n === 1) {
        return [[0]]
      }
      var d = points[0].length
      if(d === 0) {
        return []
      } else if(d === 1) {
        return convexHull1d(points)
      } else if(d === 2) {
        return convexHull2d(points)
      }
      return convexHullnd(points, d)
    }
    },{"./lib/ch1d":32,"./lib/ch2d":33,"./lib/chnd":34}],32:[function(require,module,exports){
    "use strict"
    
    module.exports = convexHull1d
    
    function convexHull1d(points) {
      var lo = 0
      var hi = 0
      for(var i=1; i<points.length; ++i) {
        if(points[i][0] < points[lo][0]) {
          lo = i
        }
        if(points[i][0] > points[hi][0]) {
          hi = i
        }
      }
      if(lo < hi) {
        return [[lo], [hi]]
      } else if(lo > hi) {
        return [[hi], [lo]]
      } else {
        return [[lo]]
      }
    }
    },{}],33:[function(require,module,exports){
    'use strict'
    
    module.exports = convexHull2D
    
    var monotoneHull = require('monotone-convex-hull-2d')
    
    function convexHull2D(points) {
      var hull = monotoneHull(points)
      var h = hull.length
      if(h <= 2) {
        return []
      }
      var edges = new Array(h)
      var a = hull[h-1]
      for(var i=0; i<h; ++i) {
        var b = hull[i]
        edges[i] = [a,b]
        a = b
      }
      return edges
    }
    
    },{"monotone-convex-hull-2d":64}],34:[function(require,module,exports){
    'use strict'
    
    module.exports = convexHullnD
    
    var ich = require('incremental-convex-hull')
    var aff = require('affine-hull')
    
    function permute(points, front) {
      var n = points.length
      var npoints = new Array(n)
      for(var i=0; i<front.length; ++i) {
        npoints[i] = points[front[i]]
      }
      var ptr = front.length
      for(var i=0; i<n; ++i) {
        if(front.indexOf(i) < 0) {
          npoints[ptr++] = points[i]
        }
      }
      return npoints
    }
    
    function invPermute(cells, front) {
      var nc = cells.length
      var nf = front.length
      for(var i=0; i<nc; ++i) {
        var c = cells[i]
        for(var j=0; j<c.length; ++j) {
          var x = c[j]
          if(x < nf) {
            c[j] = front[x]
          } else {
            x = x - nf
            for(var k=0; k<nf; ++k) {
              if(x >= front[k]) {
                x += 1
              }
            }
            c[j] = x
          }
        }
      }
      return cells
    }
    
    function convexHullnD(points, d) {
      try {
        return ich(points, true)
      } catch(e) {
        //If point set is degenerate, try to find a basis and rerun it
        var ah = aff(points)
        if(ah.length <= d) {
          //No basis, no try
          return []
        }
        var npoints = permute(points, ah)
        var nhull   = ich(npoints, true)
        return invPermute(nhull, ah)
      }
    }
    },{"affine-hull":26,"incremental-convex-hull":62}],35:[function(require,module,exports){
    require('../../modules/es6.object.define-property');
    var $Object = require('../../modules/_core').Object;
    module.exports = function defineProperty(it, key, desc) {
      return $Object.defineProperty(it, key, desc);
    };
    
    },{"../../modules/_core":38,"../../modules/es6.object.define-property":52}],36:[function(require,module,exports){
    module.exports = function (it) {
      if (typeof it != 'function') throw TypeError(it + ' is not a function!');
      return it;
    };
    
    },{}],37:[function(require,module,exports){
    var isObject = require('./_is-object');
    module.exports = function (it) {
      if (!isObject(it)) throw TypeError(it + ' is not an object!');
      return it;
    };
    
    },{"./_is-object":48}],38:[function(require,module,exports){
    var core = module.exports = { version: '2.6.10' };
    if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
    
    },{}],39:[function(require,module,exports){
    // optional / simple context binding
    var aFunction = require('./_a-function');
    module.exports = function (fn, that, length) {
      aFunction(fn);
      if (that === undefined) return fn;
      switch (length) {
        case 1: return function (a) {
          return fn.call(that, a);
        };
        case 2: return function (a, b) {
          return fn.call(that, a, b);
        };
        case 3: return function (a, b, c) {
          return fn.call(that, a, b, c);
        };
      }
      return function (/* ...args */) {
        return fn.apply(that, arguments);
      };
    };
    
    },{"./_a-function":36}],40:[function(require,module,exports){
    // Thank's IE8 for his funny defineProperty
    module.exports = !require('./_fails')(function () {
      return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
    });
    
    },{"./_fails":43}],41:[function(require,module,exports){
    var isObject = require('./_is-object');
    var document = require('./_global').document;
    // typeof document.createElement is 'object' in old IE
    var is = isObject(document) && isObject(document.createElement);
    module.exports = function (it) {
      return is ? document.createElement(it) : {};
    };
    
    },{"./_global":44,"./_is-object":48}],42:[function(require,module,exports){
    var global = require('./_global');
    var core = require('./_core');
    var ctx = require('./_ctx');
    var hide = require('./_hide');
    var has = require('./_has');
    var PROTOTYPE = 'prototype';
    
    var $export = function (type, name, source) {
      var IS_FORCED = type & $export.F;
      var IS_GLOBAL = type & $export.G;
      var IS_STATIC = type & $export.S;
      var IS_PROTO = type & $export.P;
      var IS_BIND = type & $export.B;
      var IS_WRAP = type & $export.W;
      var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
      var expProto = exports[PROTOTYPE];
      var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
      var key, own, out;
      if (IS_GLOBAL) source = name;
      for (key in source) {
        // contains in native
        own = !IS_FORCED && target && target[key] !== undefined;
        if (own && has(exports, key)) continue;
        // export native or passed
        out = own ? target[key] : source[key];
        // prevent global pollution for namespaces
        exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
        // bind timers to global for call from export context
        : IS_BIND && own ? ctx(out, global)
        // wrap global constructors for prevent change them in library
        : IS_WRAP && target[key] == out ? (function (C) {
          var F = function (a, b, c) {
            if (this instanceof C) {
              switch (arguments.length) {
                case 0: return new C();
                case 1: return new C(a);
                case 2: return new C(a, b);
              } return new C(a, b, c);
            } return C.apply(this, arguments);
          };
          F[PROTOTYPE] = C[PROTOTYPE];
          return F;
        // make static versions for prototype methods
        })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
        // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
        if (IS_PROTO) {
          (exports.virtual || (exports.virtual = {}))[key] = out;
          // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
          if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
        }
      }
    };
    // type bitmap
    $export.F = 1;   // forced
    $export.G = 2;   // global
    $export.S = 4;   // static
    $export.P = 8;   // proto
    $export.B = 16;  // bind
    $export.W = 32;  // wrap
    $export.U = 64;  // safe
    $export.R = 128; // real proto method for `library`
    module.exports = $export;
    
    },{"./_core":38,"./_ctx":39,"./_global":44,"./_has":45,"./_hide":46}],43:[function(require,module,exports){
    module.exports = function (exec) {
      try {
        return !!exec();
      } catch (e) {
        return true;
      }
    };
    
    },{}],44:[function(require,module,exports){
    // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
    var global = module.exports = typeof window != 'undefined' && window.Math == Math
      ? window : typeof self != 'undefined' && self.Math == Math ? self
      // eslint-disable-next-line no-new-func
      : Function('return this')();
    if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
    
    },{}],45:[function(require,module,exports){
    var hasOwnProperty = {}.hasOwnProperty;
    module.exports = function (it, key) {
      return hasOwnProperty.call(it, key);
    };
    
    },{}],46:[function(require,module,exports){
    var dP = require('./_object-dp');
    var createDesc = require('./_property-desc');
    module.exports = require('./_descriptors') ? function (object, key, value) {
      return dP.f(object, key, createDesc(1, value));
    } : function (object, key, value) {
      object[key] = value;
      return object;
    };
    
    },{"./_descriptors":40,"./_object-dp":49,"./_property-desc":50}],47:[function(require,module,exports){
    module.exports = !require('./_descriptors') && !require('./_fails')(function () {
      return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;
    });
    
    },{"./_descriptors":40,"./_dom-create":41,"./_fails":43}],48:[function(require,module,exports){
    module.exports = function (it) {
      return typeof it === 'object' ? it !== null : typeof it === 'function';
    };
    
    },{}],49:[function(require,module,exports){
    var anObject = require('./_an-object');
    var IE8_DOM_DEFINE = require('./_ie8-dom-define');
    var toPrimitive = require('./_to-primitive');
    var dP = Object.defineProperty;
    
    exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
      anObject(O);
      P = toPrimitive(P, true);
      anObject(Attributes);
      if (IE8_DOM_DEFINE) try {
        return dP(O, P, Attributes);
      } catch (e) { /* empty */ }
      if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
      if ('value' in Attributes) O[P] = Attributes.value;
      return O;
    };
    
    },{"./_an-object":37,"./_descriptors":40,"./_ie8-dom-define":47,"./_to-primitive":51}],50:[function(require,module,exports){
    module.exports = function (bitmap, value) {
      return {
        enumerable: !(bitmap & 1),
        configurable: !(bitmap & 2),
        writable: !(bitmap & 4),
        value: value
      };
    };
    
    },{}],51:[function(require,module,exports){
    // 7.1.1 ToPrimitive(input [, PreferredType])
    var isObject = require('./_is-object');
    // instead of the ES6 spec version, we didn't implement @@toPrimitive case
    // and the second argument - flag - preferred type is a string
    module.exports = function (it, S) {
      if (!isObject(it)) return it;
      var fn, val;
      if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
      if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
      if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
      throw TypeError("Can't convert object to primitive value");
    };
    
    },{"./_is-object":48}],52:[function(require,module,exports){
    var $export = require('./_export');
    // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
    $export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });
    
    },{"./_descriptors":40,"./_export":42,"./_object-dp":49}],53:[function(require,module,exports){
    /**
     * @fileoverview Fractional delay library
     * @author Arnau Julià <Arnau.Julia@gmail.com>
     * @version 0.1.0
     */
    /**
     * @class FractionalDelay
     * @public
     */
    "use strict";
    
    var _createClass = require("babel-runtime/helpers/create-class")["default"];
    
    var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var FractionalDelay = (function () {
        /**
         * Mandatory initialization method.
         * @public
         * @param units:Hz sampleRate Sample Rate the apparatus operates on.
         * @param type:Float units:s min:0.0 default:1 optMaxDelayTime The maximum delay time.
         * @chainable
         */
    
        function FractionalDelay(sampleRate, optMaxDelayTime) {
            _classCallCheck(this, FractionalDelay);
    
            // Properties with default values
            this.delayTime = 0;
            this.posRead = 0;
            this.posWrite = 0;
            this.fracXi1 = 0;
            this.fracYi1 = 0;
            this.intDelay = 0;
            this.fracDelay = 0;
    
            // Other properties
            this.a1 = undefined;
    
            // Save sample rate
            this.sampleRate = sampleRate;
            this.maxDelayTime = optMaxDelayTime || 1;
    
            this.bufferSize = this.maxDelayTime * this.sampleRate;
            // Check if the bufferSize is not an integer
            if (this.bufferSize % 1 !== 0) {
                this.bufferSize = parseInt(this.bufferSize) + 1;
            }
            // Create the internal buffer
            this.buffer = new Float32Array(this.bufferSize);
        }
    
        /**
         * Set delay value
         * @param delayTime Delay time
         * @public
         */
    
        _createClass(FractionalDelay, [{
            key: "setDelay",
            value: function setDelay(delayTime) {
                if (delayTime < this.maxDelayTime) {
                    // Save delay value
                    this.delayTime = delayTime;
                    // Transform time in samples
                    var samplesDelay = delayTime * this.sampleRate;
                    // Get the integer part of samplesDelay
                    this.intDelay = parseInt(samplesDelay);
                    // Get the fractional part of samplesDelay
                    this.fracDelay = samplesDelay - this.intDelay;
                    // Update the value of the pointer
                    this.resample();
                    // If the delay has fractional part, update the Thiran Coefficients
                    if (this.fracDelay !== 0) {
                        this.updateThiranCoefficient();
                    }
                } else {
                    throw new Error("delayTime > maxDelayTime");
                }
            }
    
            /**
             * Update delay value
             * @public
             */
        }, {
            key: "getDelay",
            value: function getDelay() {
                return this.delayTime;
            }
    
            /**
             * Process method, where the output is calculated.
             * @param inputBuffer Input Array
             * @public
             */
        }, {
            key: "process",
            value: function process(inputBuffer) {
                // Creates the outputBuffer, with the same length of the input
                var outputBuffer = new Float32Array(inputBuffer.length);
    
                // Integer delay process section
                for (var i = 0; i < inputBuffer.length; i = i + 1) {
                    // Save the input value in the buffer
                    this.buffer[this.posWrite] = inputBuffer[i];
                    // Write the outputBuffer with the [inputValue - delay] sample
                    outputBuffer[i] = this.buffer[this.posRead];
                    // Update the value of posRead and posWrite pointers
                    this.updatePointers();
                }
                // No fractional delay
                if (this.fracDelay === 0) {
                    return outputBuffer;
                } else {
                    // The fractional delay process section
                    outputBuffer = new Float32Array(this.fractionalThiranProcess(outputBuffer));
                    return outputBuffer;
                }
            }
    
            /**
             * Update the value of posRead and posWrite pointers inside the circular buffer
             * @private
             */
        }, {
            key: "updatePointers",
            value: function updatePointers() {
                // It's a circular buffer, so, when it is at the last position, the pointer return to the first position
    
                // Update posWrite pointer
                if (this.posWrite === this.buffer.length - 1) {
                    this.posWrite = 0;
                } else {
                    this.posWrite = this.posWrite + 1;
                }
    
                // Update posRead pointer
                if (this.posRead === this.buffer.length - 1) {
                    this.posRead = 0;
                } else {
                    this.posRead = this.posRead + 1;
                }
            }
    
            /**
             * Update Thiran coefficient (1st order Thiran)
             * @private
             */
        }, {
            key: "updateThiranCoefficient",
            value: function updateThiranCoefficient() {
                // Update the coefficient: (1-D)/(1+D) where D is fractional delay
                this.a1 = (1 - this.fracDelay) / (1 + this.fracDelay);
            }
    
            /**
             * Update the pointer posRead value when the delay value is changed
             * @private
             */
        }, {
            key: "resample",
            value: function resample() {
                if (this.posWrite - this.intDelay < 0) {
                    var pos = this.intDelay - this.posWrite;
                    this.posRead = this.buffer.length - pos;
                } else {
                    this.posRead = this.posWrite - this.intDelay;
                }
            }
    
            /**
             * Fractional process method.
             * @private
             * @param inputBuffer Input Array
             */
        }, {
            key: "fractionalThiranProcess",
            value: function fractionalThiranProcess(inputBuffer) {
                var outputBuffer = new Float32Array(inputBuffer.length);
    
                var x, y;
                var xi1 = this.fracXi1;
                var yi1 = this.fracYi1;
    
                for (var i = 0; i < inputBuffer.length; i = i + 1) {
                    // Current input sample
                    x = inputBuffer[i];
    
                    // Calculate the output
                    y = this.a1 * x + xi1 - this.a1 * yi1;
    
                    // Update the memories
                    xi1 = x;
                    yi1 = y;
                    // Save the outputBuffer
                    outputBuffer[i] = y;
                }
                // Save memories
                this.fracXi1 = xi1;
                this.fracYi1 = yi1;
    
                return outputBuffer;
            }
        }]);
    
        return FractionalDelay;
    })();
    
    exports["default"] = FractionalDelay;
    module.exports = exports["default"];
    
    },{"babel-runtime/helpers/class-call-check":56,"babel-runtime/helpers/create-class":57}],54:[function(require,module,exports){
    module.exports = require('./dist/fractional-delay');
    
    },{"./dist/fractional-delay":53}],55:[function(require,module,exports){
    arguments[4][27][0].apply(exports,arguments)
    },{"core-js/library/fn/object/define-property":58,"dup":27}],56:[function(require,module,exports){
    "use strict";
    
    exports["default"] = function (instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    };
    
    exports.__esModule = true;
    },{}],57:[function(require,module,exports){
    "use strict";
    
    var _Object$defineProperty = require("babel-runtime/core-js/object/define-property")["default"];
    
    exports["default"] = (function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
    
          _Object$defineProperty(target, descriptor.key, descriptor);
        }
      }
    
      return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    })();
    
    exports.__esModule = true;
    },{"babel-runtime/core-js/object/define-property":55}],58:[function(require,module,exports){
    var $ = require('../../modules/$');
    module.exports = function defineProperty(it, key, desc){
      return $.setDesc(it, key, desc);
    };
    },{"../../modules/$":59}],59:[function(require,module,exports){
    var $Object = Object;
    module.exports = {
      create:     $Object.create,
      getProto:   $Object.getPrototypeOf,
      isEnum:     {}.propertyIsEnumerable,
      getDesc:    $Object.getOwnPropertyDescriptor,
      setDesc:    $Object.defineProperty,
      setDescs:   $Object.defineProperties,
      getKeys:    $Object.keys,
      getNames:   $Object.getOwnPropertyNames,
      getSymbols: $Object.getOwnPropertySymbols,
      each:       [].forEach
    };
    },{}],60:[function(require,module,exports){
    (function (global){
    "use strict";
    
    if (global.AnalyserNode && !global.AnalyserNode.prototype.getFloatTimeDomainData) {
      var uint8 = new Uint8Array(2048);
      global.AnalyserNode.prototype.getFloatTimeDomainData = function(array) {
        this.getByteTimeDomainData(uint8);
        for (var i = 0, imax = array.length; i < imax; i++) {
          array[i] = (uint8[i] - 128) * 0.0078125;
        }
      };
    }
    
    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    
    },{}],61:[function(require,module,exports){
    /*!
    @fileoverview gl-matrix - High performance matrix and vector operations
    @author Brandon Jones
    @author Colin MacKenzie IV
    @version 2.7.0
    
    Copyright (c) 2015-2018, Brandon Jones, Colin MacKenzie IV.
    
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:
    
    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
    
    */
    !function(t,n){if("object"==typeof exports&&"object"==typeof module)module.exports=n();else if("function"==typeof define&&define.amd)define([],n);else{var r=n();for(var a in r)("object"==typeof exports?exports:t)[a]=r[a]}}("undefined"!=typeof self?self:this,function(){return function(t){var n={};function r(a){if(n[a])return n[a].exports;var e=n[a]={i:a,l:!1,exports:{}};return t[a].call(e.exports,e,e.exports,r),e.l=!0,e.exports}return r.m=t,r.c=n,r.d=function(t,n,a){r.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:a})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,n){if(1&n&&(t=r(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var a=Object.create(null);if(r.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var e in t)r.d(a,e,function(n){return t[n]}.bind(null,e));return a},r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,"a",n),n},r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},r.p="",r(r.s=10)}([function(t,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.setMatrixArrayType=function(t){n.ARRAY_TYPE=t},n.toRadian=function(t){return t*e},n.equals=function(t,n){return Math.abs(t-n)<=a*Math.max(1,Math.abs(t),Math.abs(n))};var a=n.EPSILON=1e-6;n.ARRAY_TYPE="undefined"!=typeof Float32Array?Float32Array:Array,n.RANDOM=Math.random;var e=Math.PI/180},function(t,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.forEach=n.sqrLen=n.len=n.sqrDist=n.dist=n.div=n.mul=n.sub=void 0,n.create=e,n.clone=function(t){var n=new a.ARRAY_TYPE(4);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n},n.fromValues=function(t,n,r,e){var u=new a.ARRAY_TYPE(4);return u[0]=t,u[1]=n,u[2]=r,u[3]=e,u},n.copy=function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t},n.set=function(t,n,r,a,e){return t[0]=n,t[1]=r,t[2]=a,t[3]=e,t},n.add=function(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t},n.subtract=u,n.multiply=o,n.divide=i,n.ceil=function(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t[2]=Math.ceil(n[2]),t[3]=Math.ceil(n[3]),t},n.floor=function(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t[2]=Math.floor(n[2]),t[3]=Math.floor(n[3]),t},n.min=function(t,n,r){return t[0]=Math.min(n[0],r[0]),t[1]=Math.min(n[1],r[1]),t[2]=Math.min(n[2],r[2]),t[3]=Math.min(n[3],r[3]),t},n.max=function(t,n,r){return t[0]=Math.max(n[0],r[0]),t[1]=Math.max(n[1],r[1]),t[2]=Math.max(n[2],r[2]),t[3]=Math.max(n[3],r[3]),t},n.round=function(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t[2]=Math.round(n[2]),t[3]=Math.round(n[3]),t},n.scale=function(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t},n.scaleAndAdd=function(t,n,r,a){return t[0]=n[0]+r[0]*a,t[1]=n[1]+r[1]*a,t[2]=n[2]+r[2]*a,t[3]=n[3]+r[3]*a,t},n.distance=s,n.squaredDistance=c,n.length=f,n.squaredLength=M,n.negate=function(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t[3]=-n[3],t},n.inverse=function(t,n){return t[0]=1/n[0],t[1]=1/n[1],t[2]=1/n[2],t[3]=1/n[3],t},n.normalize=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=r*r+a*a+e*e+u*u;o>0&&(o=1/Math.sqrt(o),t[0]=r*o,t[1]=a*o,t[2]=e*o,t[3]=u*o);return t},n.dot=function(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]+t[3]*n[3]},n.lerp=function(t,n,r,a){var e=n[0],u=n[1],o=n[2],i=n[3];return t[0]=e+a*(r[0]-e),t[1]=u+a*(r[1]-u),t[2]=o+a*(r[2]-o),t[3]=i+a*(r[3]-i),t},n.random=function(t,n){var r,e,u,o,i,s;n=n||1;do{r=2*a.RANDOM()-1,e=2*a.RANDOM()-1,i=r*r+e*e}while(i>=1);do{u=2*a.RANDOM()-1,o=2*a.RANDOM()-1,s=u*u+o*o}while(s>=1);var c=Math.sqrt((1-i)/s);return t[0]=n*r,t[1]=n*e,t[2]=n*u*c,t[3]=n*o*c,t},n.transformMat4=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3];return t[0]=r[0]*a+r[4]*e+r[8]*u+r[12]*o,t[1]=r[1]*a+r[5]*e+r[9]*u+r[13]*o,t[2]=r[2]*a+r[6]*e+r[10]*u+r[14]*o,t[3]=r[3]*a+r[7]*e+r[11]*u+r[15]*o,t},n.transformQuat=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=r[0],i=r[1],s=r[2],c=r[3],f=c*a+i*u-s*e,M=c*e+s*a-o*u,h=c*u+o*e-i*a,l=-o*a-i*e-s*u;return t[0]=f*c+l*-o+M*-s-h*-i,t[1]=M*c+l*-i+h*-o-f*-s,t[2]=h*c+l*-s+f*-i-M*-o,t[3]=n[3],t},n.str=function(t){return"vec4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"},n.exactEquals=function(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]},n.equals=function(t,n){var r=t[0],e=t[1],u=t[2],o=t[3],i=n[0],s=n[1],c=n[2],f=n[3];return Math.abs(r-i)<=a.EPSILON*Math.max(1,Math.abs(r),Math.abs(i))&&Math.abs(e-s)<=a.EPSILON*Math.max(1,Math.abs(e),Math.abs(s))&&Math.abs(u-c)<=a.EPSILON*Math.max(1,Math.abs(u),Math.abs(c))&&Math.abs(o-f)<=a.EPSILON*Math.max(1,Math.abs(o),Math.abs(f))};var a=function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n.default=t,n}(r(0));function e(){var t=new a.ARRAY_TYPE(4);return a.ARRAY_TYPE!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t}function u(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t}function o(t,n,r){return t[0]=n[0]*r[0],t[1]=n[1]*r[1],t[2]=n[2]*r[2],t[3]=n[3]*r[3],t}function i(t,n,r){return t[0]=n[0]/r[0],t[1]=n[1]/r[1],t[2]=n[2]/r[2],t[3]=n[3]/r[3],t}function s(t,n){var r=n[0]-t[0],a=n[1]-t[1],e=n[2]-t[2],u=n[3]-t[3];return Math.sqrt(r*r+a*a+e*e+u*u)}function c(t,n){var r=n[0]-t[0],a=n[1]-t[1],e=n[2]-t[2],u=n[3]-t[3];return r*r+a*a+e*e+u*u}function f(t){var n=t[0],r=t[1],a=t[2],e=t[3];return Math.sqrt(n*n+r*r+a*a+e*e)}function M(t){var n=t[0],r=t[1],a=t[2],e=t[3];return n*n+r*r+a*a+e*e}n.sub=u,n.mul=o,n.div=i,n.dist=s,n.sqrDist=c,n.len=f,n.sqrLen=M,n.forEach=function(){var t=e();return function(n,r,a,e,u,o){var i=void 0,s=void 0;for(r||(r=4),a||(a=0),s=e?Math.min(e*r+a,n.length):n.length,i=a;i<s;i+=r)t[0]=n[i],t[1]=n[i+1],t[2]=n[i+2],t[3]=n[i+3],u(t,t,o),n[i]=t[0],n[i+1]=t[1],n[i+2]=t[2],n[i+3]=t[3];return n}}()},function(t,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.forEach=n.sqrLen=n.len=n.sqrDist=n.dist=n.div=n.mul=n.sub=void 0,n.create=e,n.clone=function(t){var n=new a.ARRAY_TYPE(3);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n},n.length=u,n.fromValues=o,n.copy=function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t},n.set=function(t,n,r,a){return t[0]=n,t[1]=r,t[2]=a,t},n.add=function(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t},n.subtract=i,n.multiply=s,n.divide=c,n.ceil=function(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t[2]=Math.ceil(n[2]),t},n.floor=function(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t[2]=Math.floor(n[2]),t},n.min=function(t,n,r){return t[0]=Math.min(n[0],r[0]),t[1]=Math.min(n[1],r[1]),t[2]=Math.min(n[2],r[2]),t},n.max=function(t,n,r){return t[0]=Math.max(n[0],r[0]),t[1]=Math.max(n[1],r[1]),t[2]=Math.max(n[2],r[2]),t},n.round=function(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t[2]=Math.round(n[2]),t},n.scale=function(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t},n.scaleAndAdd=function(t,n,r,a){return t[0]=n[0]+r[0]*a,t[1]=n[1]+r[1]*a,t[2]=n[2]+r[2]*a,t},n.distance=f,n.squaredDistance=M,n.squaredLength=h,n.negate=function(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t},n.inverse=function(t,n){return t[0]=1/n[0],t[1]=1/n[1],t[2]=1/n[2],t},n.normalize=l,n.dot=v,n.cross=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=r[0],i=r[1],s=r[2];return t[0]=e*s-u*i,t[1]=u*o-a*s,t[2]=a*i-e*o,t},n.lerp=function(t,n,r,a){var e=n[0],u=n[1],o=n[2];return t[0]=e+a*(r[0]-e),t[1]=u+a*(r[1]-u),t[2]=o+a*(r[2]-o),t},n.hermite=function(t,n,r,a,e,u){var o=u*u,i=o*(2*u-3)+1,s=o*(u-2)+u,c=o*(u-1),f=o*(3-2*u);return t[0]=n[0]*i+r[0]*s+a[0]*c+e[0]*f,t[1]=n[1]*i+r[1]*s+a[1]*c+e[1]*f,t[2]=n[2]*i+r[2]*s+a[2]*c+e[2]*f,t},n.bezier=function(t,n,r,a,e,u){var o=1-u,i=o*o,s=u*u,c=i*o,f=3*u*i,M=3*s*o,h=s*u;return t[0]=n[0]*c+r[0]*f+a[0]*M+e[0]*h,t[1]=n[1]*c+r[1]*f+a[1]*M+e[1]*h,t[2]=n[2]*c+r[2]*f+a[2]*M+e[2]*h,t},n.random=function(t,n){n=n||1;var r=2*a.RANDOM()*Math.PI,e=2*a.RANDOM()-1,u=Math.sqrt(1-e*e)*n;return t[0]=Math.cos(r)*u,t[1]=Math.sin(r)*u,t[2]=e*n,t},n.transformMat4=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=r[3]*a+r[7]*e+r[11]*u+r[15];return o=o||1,t[0]=(r[0]*a+r[4]*e+r[8]*u+r[12])/o,t[1]=(r[1]*a+r[5]*e+r[9]*u+r[13])/o,t[2]=(r[2]*a+r[6]*e+r[10]*u+r[14])/o,t},n.transformMat3=function(t,n,r){var a=n[0],e=n[1],u=n[2];return t[0]=a*r[0]+e*r[3]+u*r[6],t[1]=a*r[1]+e*r[4]+u*r[7],t[2]=a*r[2]+e*r[5]+u*r[8],t},n.transformQuat=function(t,n,r){var a=r[0],e=r[1],u=r[2],o=r[3],i=n[0],s=n[1],c=n[2],f=e*c-u*s,M=u*i-a*c,h=a*s-e*i,l=e*h-u*M,v=u*f-a*h,d=a*M-e*f,b=2*o;return f*=b,M*=b,h*=b,l*=2,v*=2,d*=2,t[0]=i+f+l,t[1]=s+M+v,t[2]=c+h+d,t},n.rotateX=function(t,n,r,a){var e=[],u=[];return e[0]=n[0]-r[0],e[1]=n[1]-r[1],e[2]=n[2]-r[2],u[0]=e[0],u[1]=e[1]*Math.cos(a)-e[2]*Math.sin(a),u[2]=e[1]*Math.sin(a)+e[2]*Math.cos(a),t[0]=u[0]+r[0],t[1]=u[1]+r[1],t[2]=u[2]+r[2],t},n.rotateY=function(t,n,r,a){var e=[],u=[];return e[0]=n[0]-r[0],e[1]=n[1]-r[1],e[2]=n[2]-r[2],u[0]=e[2]*Math.sin(a)+e[0]*Math.cos(a),u[1]=e[1],u[2]=e[2]*Math.cos(a)-e[0]*Math.sin(a),t[0]=u[0]+r[0],t[1]=u[1]+r[1],t[2]=u[2]+r[2],t},n.rotateZ=function(t,n,r,a){var e=[],u=[];return e[0]=n[0]-r[0],e[1]=n[1]-r[1],e[2]=n[2]-r[2],u[0]=e[0]*Math.cos(a)-e[1]*Math.sin(a),u[1]=e[0]*Math.sin(a)+e[1]*Math.cos(a),u[2]=e[2],t[0]=u[0]+r[0],t[1]=u[1]+r[1],t[2]=u[2]+r[2],t},n.angle=function(t,n){var r=o(t[0],t[1],t[2]),a=o(n[0],n[1],n[2]);l(r,r),l(a,a);var e=v(r,a);return e>1?0:e<-1?Math.PI:Math.acos(e)},n.str=function(t){return"vec3("+t[0]+", "+t[1]+", "+t[2]+")"},n.exactEquals=function(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]},n.equals=function(t,n){var r=t[0],e=t[1],u=t[2],o=n[0],i=n[1],s=n[2];return Math.abs(r-o)<=a.EPSILON*Math.max(1,Math.abs(r),Math.abs(o))&&Math.abs(e-i)<=a.EPSILON*Math.max(1,Math.abs(e),Math.abs(i))&&Math.abs(u-s)<=a.EPSILON*Math.max(1,Math.abs(u),Math.abs(s))};var a=function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n.default=t,n}(r(0));function e(){var t=new a.ARRAY_TYPE(3);return a.ARRAY_TYPE!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function u(t){var n=t[0],r=t[1],a=t[2];return Math.sqrt(n*n+r*r+a*a)}function o(t,n,r){var e=new a.ARRAY_TYPE(3);return e[0]=t,e[1]=n,e[2]=r,e}function i(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t}function s(t,n,r){return t[0]=n[0]*r[0],t[1]=n[1]*r[1],t[2]=n[2]*r[2],t}function c(t,n,r){return t[0]=n[0]/r[0],t[1]=n[1]/r[1],t[2]=n[2]/r[2],t}function f(t,n){var r=n[0]-t[0],a=n[1]-t[1],e=n[2]-t[2];return Math.sqrt(r*r+a*a+e*e)}function M(t,n){var r=n[0]-t[0],a=n[1]-t[1],e=n[2]-t[2];return r*r+a*a+e*e}function h(t){var n=t[0],r=t[1],a=t[2];return n*n+r*r+a*a}function l(t,n){var r=n[0],a=n[1],e=n[2],u=r*r+a*a+e*e;return u>0&&(u=1/Math.sqrt(u),t[0]=n[0]*u,t[1]=n[1]*u,t[2]=n[2]*u),t}function v(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}n.sub=i,n.mul=s,n.div=c,n.dist=f,n.sqrDist=M,n.len=u,n.sqrLen=h,n.forEach=function(){var t=e();return function(n,r,a,e,u,o){var i=void 0,s=void 0;for(r||(r=3),a||(a=0),s=e?Math.min(e*r+a,n.length):n.length,i=a;i<s;i+=r)t[0]=n[i],t[1]=n[i+1],t[2]=n[i+2],u(t,t,o),n[i]=t[0],n[i+1]=t[1],n[i+2]=t[2];return n}}()},function(t,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.setAxes=n.sqlerp=n.rotationTo=n.equals=n.exactEquals=n.normalize=n.sqrLen=n.squaredLength=n.len=n.length=n.lerp=n.dot=n.scale=n.mul=n.add=n.set=n.copy=n.fromValues=n.clone=void 0,n.create=s,n.identity=function(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t},n.setAxisAngle=c,n.getAxisAngle=function(t,n){var r=2*Math.acos(n[3]),e=Math.sin(r/2);e>a.EPSILON?(t[0]=n[0]/e,t[1]=n[1]/e,t[2]=n[2]/e):(t[0]=1,t[1]=0,t[2]=0);return r},n.multiply=f,n.rotateX=function(t,n,r){r*=.5;var a=n[0],e=n[1],u=n[2],o=n[3],i=Math.sin(r),s=Math.cos(r);return t[0]=a*s+o*i,t[1]=e*s+u*i,t[2]=u*s-e*i,t[3]=o*s-a*i,t},n.rotateY=function(t,n,r){r*=.5;var a=n[0],e=n[1],u=n[2],o=n[3],i=Math.sin(r),s=Math.cos(r);return t[0]=a*s-u*i,t[1]=e*s+o*i,t[2]=u*s+a*i,t[3]=o*s-e*i,t},n.rotateZ=function(t,n,r){r*=.5;var a=n[0],e=n[1],u=n[2],o=n[3],i=Math.sin(r),s=Math.cos(r);return t[0]=a*s+e*i,t[1]=e*s-a*i,t[2]=u*s+o*i,t[3]=o*s-u*i,t},n.calculateW=function(t,n){var r=n[0],a=n[1],e=n[2];return t[0]=r,t[1]=a,t[2]=e,t[3]=Math.sqrt(Math.abs(1-r*r-a*a-e*e)),t},n.slerp=M,n.random=function(t){var n=a.RANDOM(),r=a.RANDOM(),e=a.RANDOM(),u=Math.sqrt(1-n),o=Math.sqrt(n);return t[0]=u*Math.sin(2*Math.PI*r),t[1]=u*Math.cos(2*Math.PI*r),t[2]=o*Math.sin(2*Math.PI*e),t[3]=o*Math.cos(2*Math.PI*e),t},n.invert=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=r*r+a*a+e*e+u*u,i=o?1/o:0;return t[0]=-r*i,t[1]=-a*i,t[2]=-e*i,t[3]=u*i,t},n.conjugate=function(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t[3]=n[3],t},n.fromMat3=h,n.fromEuler=function(t,n,r,a){var e=.5*Math.PI/180;n*=e,r*=e,a*=e;var u=Math.sin(n),o=Math.cos(n),i=Math.sin(r),s=Math.cos(r),c=Math.sin(a),f=Math.cos(a);return t[0]=u*s*f-o*i*c,t[1]=o*i*f+u*s*c,t[2]=o*s*c-u*i*f,t[3]=o*s*f+u*i*c,t},n.str=function(t){return"quat("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"};var a=i(r(0)),e=i(r(5)),u=i(r(2)),o=i(r(1));function i(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n.default=t,n}function s(){var t=new a.ARRAY_TYPE(4);return a.ARRAY_TYPE!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t[3]=1,t}function c(t,n,r){r*=.5;var a=Math.sin(r);return t[0]=a*n[0],t[1]=a*n[1],t[2]=a*n[2],t[3]=Math.cos(r),t}function f(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=r[0],s=r[1],c=r[2],f=r[3];return t[0]=a*f+o*i+e*c-u*s,t[1]=e*f+o*s+u*i-a*c,t[2]=u*f+o*c+a*s-e*i,t[3]=o*f-a*i-e*s-u*c,t}function M(t,n,r,e){var u=n[0],o=n[1],i=n[2],s=n[3],c=r[0],f=r[1],M=r[2],h=r[3],l=void 0,v=void 0,d=void 0,b=void 0,m=void 0;return(v=u*c+o*f+i*M+s*h)<0&&(v=-v,c=-c,f=-f,M=-M,h=-h),1-v>a.EPSILON?(l=Math.acos(v),d=Math.sin(l),b=Math.sin((1-e)*l)/d,m=Math.sin(e*l)/d):(b=1-e,m=e),t[0]=b*u+m*c,t[1]=b*o+m*f,t[2]=b*i+m*M,t[3]=b*s+m*h,t}function h(t,n){var r=n[0]+n[4]+n[8],a=void 0;if(r>0)a=Math.sqrt(r+1),t[3]=.5*a,a=.5/a,t[0]=(n[5]-n[7])*a,t[1]=(n[6]-n[2])*a,t[2]=(n[1]-n[3])*a;else{var e=0;n[4]>n[0]&&(e=1),n[8]>n[3*e+e]&&(e=2);var u=(e+1)%3,o=(e+2)%3;a=Math.sqrt(n[3*e+e]-n[3*u+u]-n[3*o+o]+1),t[e]=.5*a,a=.5/a,t[3]=(n[3*u+o]-n[3*o+u])*a,t[u]=(n[3*u+e]+n[3*e+u])*a,t[o]=(n[3*o+e]+n[3*e+o])*a}return t}n.clone=o.clone,n.fromValues=o.fromValues,n.copy=o.copy,n.set=o.set,n.add=o.add,n.mul=f,n.scale=o.scale,n.dot=o.dot,n.lerp=o.lerp;var l=n.length=o.length,v=(n.len=l,n.squaredLength=o.squaredLength),d=(n.sqrLen=v,n.normalize=o.normalize);n.exactEquals=o.exactEquals,n.equals=o.equals,n.rotationTo=function(){var t=u.create(),n=u.fromValues(1,0,0),r=u.fromValues(0,1,0);return function(a,e,o){var i=u.dot(e,o);return i<-.999999?(u.cross(t,n,e),u.len(t)<1e-6&&u.cross(t,r,e),u.normalize(t,t),c(a,t,Math.PI),a):i>.999999?(a[0]=0,a[1]=0,a[2]=0,a[3]=1,a):(u.cross(t,e,o),a[0]=t[0],a[1]=t[1],a[2]=t[2],a[3]=1+i,d(a,a))}}(),n.sqlerp=function(){var t=s(),n=s();return function(r,a,e,u,o,i){return M(t,a,o,i),M(n,e,u,i),M(r,t,n,2*i*(1-i)),r}}(),n.setAxes=function(){var t=e.create();return function(n,r,a,e){return t[0]=a[0],t[3]=a[1],t[6]=a[2],t[1]=e[0],t[4]=e[1],t[7]=e[2],t[2]=-r[0],t[5]=-r[1],t[8]=-r[2],d(n,h(n,t))}}()},function(t,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.sub=n.mul=void 0,n.create=function(){var t=new a.ARRAY_TYPE(16);a.ARRAY_TYPE!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0);return t[0]=1,t[5]=1,t[10]=1,t[15]=1,t},n.clone=function(t){var n=new a.ARRAY_TYPE(16);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n[8]=t[8],n[9]=t[9],n[10]=t[10],n[11]=t[11],n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15],n},n.copy=function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t},n.fromValues=function(t,n,r,e,u,o,i,s,c,f,M,h,l,v,d,b){var m=new a.ARRAY_TYPE(16);return m[0]=t,m[1]=n,m[2]=r,m[3]=e,m[4]=u,m[5]=o,m[6]=i,m[7]=s,m[8]=c,m[9]=f,m[10]=M,m[11]=h,m[12]=l,m[13]=v,m[14]=d,m[15]=b,m},n.set=function(t,n,r,a,e,u,o,i,s,c,f,M,h,l,v,d,b){return t[0]=n,t[1]=r,t[2]=a,t[3]=e,t[4]=u,t[5]=o,t[6]=i,t[7]=s,t[8]=c,t[9]=f,t[10]=M,t[11]=h,t[12]=l,t[13]=v,t[14]=d,t[15]=b,t},n.identity=e,n.transpose=function(t,n){if(t===n){var r=n[1],a=n[2],e=n[3],u=n[6],o=n[7],i=n[11];t[1]=n[4],t[2]=n[8],t[3]=n[12],t[4]=r,t[6]=n[9],t[7]=n[13],t[8]=a,t[9]=u,t[11]=n[14],t[12]=e,t[13]=o,t[14]=i}else t[0]=n[0],t[1]=n[4],t[2]=n[8],t[3]=n[12],t[4]=n[1],t[5]=n[5],t[6]=n[9],t[7]=n[13],t[8]=n[2],t[9]=n[6],t[10]=n[10],t[11]=n[14],t[12]=n[3],t[13]=n[7],t[14]=n[11],t[15]=n[15];return t},n.invert=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=n[4],i=n[5],s=n[6],c=n[7],f=n[8],M=n[9],h=n[10],l=n[11],v=n[12],d=n[13],b=n[14],m=n[15],p=r*i-a*o,P=r*s-e*o,A=r*c-u*o,E=a*s-e*i,O=a*c-u*i,R=e*c-u*s,y=f*d-M*v,q=f*b-h*v,x=f*m-l*v,_=M*b-h*d,Y=M*m-l*d,L=h*m-l*b,S=p*L-P*Y+A*_+E*x-O*q+R*y;if(!S)return null;return S=1/S,t[0]=(i*L-s*Y+c*_)*S,t[1]=(e*Y-a*L-u*_)*S,t[2]=(d*R-b*O+m*E)*S,t[3]=(h*O-M*R-l*E)*S,t[4]=(s*x-o*L-c*q)*S,t[5]=(r*L-e*x+u*q)*S,t[6]=(b*A-v*R-m*P)*S,t[7]=(f*R-h*A+l*P)*S,t[8]=(o*Y-i*x+c*y)*S,t[9]=(a*x-r*Y-u*y)*S,t[10]=(v*O-d*A+m*p)*S,t[11]=(M*A-f*O-l*p)*S,t[12]=(i*q-o*_-s*y)*S,t[13]=(r*_-a*q+e*y)*S,t[14]=(d*P-v*E-b*p)*S,t[15]=(f*E-M*P+h*p)*S,t},n.adjoint=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=n[4],i=n[5],s=n[6],c=n[7],f=n[8],M=n[9],h=n[10],l=n[11],v=n[12],d=n[13],b=n[14],m=n[15];return t[0]=i*(h*m-l*b)-M*(s*m-c*b)+d*(s*l-c*h),t[1]=-(a*(h*m-l*b)-M*(e*m-u*b)+d*(e*l-u*h)),t[2]=a*(s*m-c*b)-i*(e*m-u*b)+d*(e*c-u*s),t[3]=-(a*(s*l-c*h)-i*(e*l-u*h)+M*(e*c-u*s)),t[4]=-(o*(h*m-l*b)-f*(s*m-c*b)+v*(s*l-c*h)),t[5]=r*(h*m-l*b)-f*(e*m-u*b)+v*(e*l-u*h),t[6]=-(r*(s*m-c*b)-o*(e*m-u*b)+v*(e*c-u*s)),t[7]=r*(s*l-c*h)-o*(e*l-u*h)+f*(e*c-u*s),t[8]=o*(M*m-l*d)-f*(i*m-c*d)+v*(i*l-c*M),t[9]=-(r*(M*m-l*d)-f*(a*m-u*d)+v*(a*l-u*M)),t[10]=r*(i*m-c*d)-o*(a*m-u*d)+v*(a*c-u*i),t[11]=-(r*(i*l-c*M)-o*(a*l-u*M)+f*(a*c-u*i)),t[12]=-(o*(M*b-h*d)-f*(i*b-s*d)+v*(i*h-s*M)),t[13]=r*(M*b-h*d)-f*(a*b-e*d)+v*(a*h-e*M),t[14]=-(r*(i*b-s*d)-o*(a*b-e*d)+v*(a*s-e*i)),t[15]=r*(i*h-s*M)-o*(a*h-e*M)+f*(a*s-e*i),t},n.determinant=function(t){var n=t[0],r=t[1],a=t[2],e=t[3],u=t[4],o=t[5],i=t[6],s=t[7],c=t[8],f=t[9],M=t[10],h=t[11],l=t[12],v=t[13],d=t[14],b=t[15];return(n*o-r*u)*(M*b-h*d)-(n*i-a*u)*(f*b-h*v)+(n*s-e*u)*(f*d-M*v)+(r*i-a*o)*(c*b-h*l)-(r*s-e*o)*(c*d-M*l)+(a*s-e*i)*(c*v-f*l)},n.multiply=u,n.translate=function(t,n,r){var a=r[0],e=r[1],u=r[2],o=void 0,i=void 0,s=void 0,c=void 0,f=void 0,M=void 0,h=void 0,l=void 0,v=void 0,d=void 0,b=void 0,m=void 0;n===t?(t[12]=n[0]*a+n[4]*e+n[8]*u+n[12],t[13]=n[1]*a+n[5]*e+n[9]*u+n[13],t[14]=n[2]*a+n[6]*e+n[10]*u+n[14],t[15]=n[3]*a+n[7]*e+n[11]*u+n[15]):(o=n[0],i=n[1],s=n[2],c=n[3],f=n[4],M=n[5],h=n[6],l=n[7],v=n[8],d=n[9],b=n[10],m=n[11],t[0]=o,t[1]=i,t[2]=s,t[3]=c,t[4]=f,t[5]=M,t[6]=h,t[7]=l,t[8]=v,t[9]=d,t[10]=b,t[11]=m,t[12]=o*a+f*e+v*u+n[12],t[13]=i*a+M*e+d*u+n[13],t[14]=s*a+h*e+b*u+n[14],t[15]=c*a+l*e+m*u+n[15]);return t},n.scale=function(t,n,r){var a=r[0],e=r[1],u=r[2];return t[0]=n[0]*a,t[1]=n[1]*a,t[2]=n[2]*a,t[3]=n[3]*a,t[4]=n[4]*e,t[5]=n[5]*e,t[6]=n[6]*e,t[7]=n[7]*e,t[8]=n[8]*u,t[9]=n[9]*u,t[10]=n[10]*u,t[11]=n[11]*u,t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t},n.rotate=function(t,n,r,e){var u=e[0],o=e[1],i=e[2],s=Math.sqrt(u*u+o*o+i*i),c=void 0,f=void 0,M=void 0,h=void 0,l=void 0,v=void 0,d=void 0,b=void 0,m=void 0,p=void 0,P=void 0,A=void 0,E=void 0,O=void 0,R=void 0,y=void 0,q=void 0,x=void 0,_=void 0,Y=void 0,L=void 0,S=void 0,w=void 0,I=void 0;if(s<a.EPSILON)return null;u*=s=1/s,o*=s,i*=s,c=Math.sin(r),f=Math.cos(r),M=1-f,h=n[0],l=n[1],v=n[2],d=n[3],b=n[4],m=n[5],p=n[6],P=n[7],A=n[8],E=n[9],O=n[10],R=n[11],y=u*u*M+f,q=o*u*M+i*c,x=i*u*M-o*c,_=u*o*M-i*c,Y=o*o*M+f,L=i*o*M+u*c,S=u*i*M+o*c,w=o*i*M-u*c,I=i*i*M+f,t[0]=h*y+b*q+A*x,t[1]=l*y+m*q+E*x,t[2]=v*y+p*q+O*x,t[3]=d*y+P*q+R*x,t[4]=h*_+b*Y+A*L,t[5]=l*_+m*Y+E*L,t[6]=v*_+p*Y+O*L,t[7]=d*_+P*Y+R*L,t[8]=h*S+b*w+A*I,t[9]=l*S+m*w+E*I,t[10]=v*S+p*w+O*I,t[11]=d*S+P*w+R*I,n!==t&&(t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]);return t},n.rotateX=function(t,n,r){var a=Math.sin(r),e=Math.cos(r),u=n[4],o=n[5],i=n[6],s=n[7],c=n[8],f=n[9],M=n[10],h=n[11];n!==t&&(t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]);return t[4]=u*e+c*a,t[5]=o*e+f*a,t[6]=i*e+M*a,t[7]=s*e+h*a,t[8]=c*e-u*a,t[9]=f*e-o*a,t[10]=M*e-i*a,t[11]=h*e-s*a,t},n.rotateY=function(t,n,r){var a=Math.sin(r),e=Math.cos(r),u=n[0],o=n[1],i=n[2],s=n[3],c=n[8],f=n[9],M=n[10],h=n[11];n!==t&&(t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]);return t[0]=u*e-c*a,t[1]=o*e-f*a,t[2]=i*e-M*a,t[3]=s*e-h*a,t[8]=u*a+c*e,t[9]=o*a+f*e,t[10]=i*a+M*e,t[11]=s*a+h*e,t},n.rotateZ=function(t,n,r){var a=Math.sin(r),e=Math.cos(r),u=n[0],o=n[1],i=n[2],s=n[3],c=n[4],f=n[5],M=n[6],h=n[7];n!==t&&(t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]);return t[0]=u*e+c*a,t[1]=o*e+f*a,t[2]=i*e+M*a,t[3]=s*e+h*a,t[4]=c*e-u*a,t[5]=f*e-o*a,t[6]=M*e-i*a,t[7]=h*e-s*a,t},n.fromTranslation=function(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t},n.fromScaling=function(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=n[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},n.fromRotation=function(t,n,r){var e=r[0],u=r[1],o=r[2],i=Math.sqrt(e*e+u*u+o*o),s=void 0,c=void 0,f=void 0;if(i<a.EPSILON)return null;return e*=i=1/i,u*=i,o*=i,s=Math.sin(n),c=Math.cos(n),f=1-c,t[0]=e*e*f+c,t[1]=u*e*f+o*s,t[2]=o*e*f-u*s,t[3]=0,t[4]=e*u*f-o*s,t[5]=u*u*f+c,t[6]=o*u*f+e*s,t[7]=0,t[8]=e*o*f+u*s,t[9]=u*o*f-e*s,t[10]=o*o*f+c,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},n.fromXRotation=function(t,n){var r=Math.sin(n),a=Math.cos(n);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=a,t[6]=r,t[7]=0,t[8]=0,t[9]=-r,t[10]=a,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},n.fromYRotation=function(t,n){var r=Math.sin(n),a=Math.cos(n);return t[0]=a,t[1]=0,t[2]=-r,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=r,t[9]=0,t[10]=a,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},n.fromZRotation=function(t,n){var r=Math.sin(n),a=Math.cos(n);return t[0]=a,t[1]=r,t[2]=0,t[3]=0,t[4]=-r,t[5]=a,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},n.fromRotationTranslation=o,n.fromQuat2=function(t,n){var r=new a.ARRAY_TYPE(3),e=-n[0],u=-n[1],i=-n[2],s=n[3],c=n[4],f=n[5],M=n[6],h=n[7],l=e*e+u*u+i*i+s*s;l>0?(r[0]=2*(c*s+h*e+f*i-M*u)/l,r[1]=2*(f*s+h*u+M*e-c*i)/l,r[2]=2*(M*s+h*i+c*u-f*e)/l):(r[0]=2*(c*s+h*e+f*i-M*u),r[1]=2*(f*s+h*u+M*e-c*i),r[2]=2*(M*s+h*i+c*u-f*e));return o(t,n,r),t},n.getTranslation=function(t,n){return t[0]=n[12],t[1]=n[13],t[2]=n[14],t},n.getScaling=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[4],o=n[5],i=n[6],s=n[8],c=n[9],f=n[10];return t[0]=Math.sqrt(r*r+a*a+e*e),t[1]=Math.sqrt(u*u+o*o+i*i),t[2]=Math.sqrt(s*s+c*c+f*f),t},n.getRotation=function(t,n){var r=n[0]+n[5]+n[10],a=0;r>0?(a=2*Math.sqrt(r+1),t[3]=.25*a,t[0]=(n[6]-n[9])/a,t[1]=(n[8]-n[2])/a,t[2]=(n[1]-n[4])/a):n[0]>n[5]&&n[0]>n[10]?(a=2*Math.sqrt(1+n[0]-n[5]-n[10]),t[3]=(n[6]-n[9])/a,t[0]=.25*a,t[1]=(n[1]+n[4])/a,t[2]=(n[8]+n[2])/a):n[5]>n[10]?(a=2*Math.sqrt(1+n[5]-n[0]-n[10]),t[3]=(n[8]-n[2])/a,t[0]=(n[1]+n[4])/a,t[1]=.25*a,t[2]=(n[6]+n[9])/a):(a=2*Math.sqrt(1+n[10]-n[0]-n[5]),t[3]=(n[1]-n[4])/a,t[0]=(n[8]+n[2])/a,t[1]=(n[6]+n[9])/a,t[2]=.25*a);return t},n.fromRotationTranslationScale=function(t,n,r,a){var e=n[0],u=n[1],o=n[2],i=n[3],s=e+e,c=u+u,f=o+o,M=e*s,h=e*c,l=e*f,v=u*c,d=u*f,b=o*f,m=i*s,p=i*c,P=i*f,A=a[0],E=a[1],O=a[2];return t[0]=(1-(v+b))*A,t[1]=(h+P)*A,t[2]=(l-p)*A,t[3]=0,t[4]=(h-P)*E,t[5]=(1-(M+b))*E,t[6]=(d+m)*E,t[7]=0,t[8]=(l+p)*O,t[9]=(d-m)*O,t[10]=(1-(M+v))*O,t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t},n.fromRotationTranslationScaleOrigin=function(t,n,r,a,e){var u=n[0],o=n[1],i=n[2],s=n[3],c=u+u,f=o+o,M=i+i,h=u*c,l=u*f,v=u*M,d=o*f,b=o*M,m=i*M,p=s*c,P=s*f,A=s*M,E=a[0],O=a[1],R=a[2],y=e[0],q=e[1],x=e[2],_=(1-(d+m))*E,Y=(l+A)*E,L=(v-P)*E,S=(l-A)*O,w=(1-(h+m))*O,I=(b+p)*O,N=(v+P)*R,g=(b-p)*R,T=(1-(h+d))*R;return t[0]=_,t[1]=Y,t[2]=L,t[3]=0,t[4]=S,t[5]=w,t[6]=I,t[7]=0,t[8]=N,t[9]=g,t[10]=T,t[11]=0,t[12]=r[0]+y-(_*y+S*q+N*x),t[13]=r[1]+q-(Y*y+w*q+g*x),t[14]=r[2]+x-(L*y+I*q+T*x),t[15]=1,t},n.fromQuat=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=r+r,i=a+a,s=e+e,c=r*o,f=a*o,M=a*i,h=e*o,l=e*i,v=e*s,d=u*o,b=u*i,m=u*s;return t[0]=1-M-v,t[1]=f+m,t[2]=h-b,t[3]=0,t[4]=f-m,t[5]=1-c-v,t[6]=l+d,t[7]=0,t[8]=h+b,t[9]=l-d,t[10]=1-c-M,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},n.frustum=function(t,n,r,a,e,u,o){var i=1/(r-n),s=1/(e-a),c=1/(u-o);return t[0]=2*u*i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*u*s,t[6]=0,t[7]=0,t[8]=(r+n)*i,t[9]=(e+a)*s,t[10]=(o+u)*c,t[11]=-1,t[12]=0,t[13]=0,t[14]=o*u*2*c,t[15]=0,t},n.perspective=function(t,n,r,a,e){var u=1/Math.tan(n/2),o=void 0;t[0]=u/r,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=u,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=e&&e!==1/0?(o=1/(a-e),t[10]=(e+a)*o,t[14]=2*e*a*o):(t[10]=-1,t[14]=-2*a);return t},n.perspectiveFromFieldOfView=function(t,n,r,a){var e=Math.tan(n.upDegrees*Math.PI/180),u=Math.tan(n.downDegrees*Math.PI/180),o=Math.tan(n.leftDegrees*Math.PI/180),i=Math.tan(n.rightDegrees*Math.PI/180),s=2/(o+i),c=2/(e+u);return t[0]=s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=c,t[6]=0,t[7]=0,t[8]=-(o-i)*s*.5,t[9]=(e-u)*c*.5,t[10]=a/(r-a),t[11]=-1,t[12]=0,t[13]=0,t[14]=a*r/(r-a),t[15]=0,t},n.ortho=function(t,n,r,a,e,u,o){var i=1/(n-r),s=1/(a-e),c=1/(u-o);return t[0]=-2*i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*s,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*c,t[11]=0,t[12]=(n+r)*i,t[13]=(e+a)*s,t[14]=(o+u)*c,t[15]=1,t},n.lookAt=function(t,n,r,u){var o=void 0,i=void 0,s=void 0,c=void 0,f=void 0,M=void 0,h=void 0,l=void 0,v=void 0,d=void 0,b=n[0],m=n[1],p=n[2],P=u[0],A=u[1],E=u[2],O=r[0],R=r[1],y=r[2];if(Math.abs(b-O)<a.EPSILON&&Math.abs(m-R)<a.EPSILON&&Math.abs(p-y)<a.EPSILON)return e(t);h=b-O,l=m-R,v=p-y,d=1/Math.sqrt(h*h+l*l+v*v),o=A*(v*=d)-E*(l*=d),i=E*(h*=d)-P*v,s=P*l-A*h,(d=Math.sqrt(o*o+i*i+s*s))?(o*=d=1/d,i*=d,s*=d):(o=0,i=0,s=0);c=l*s-v*i,f=v*o-h*s,M=h*i-l*o,(d=Math.sqrt(c*c+f*f+M*M))?(c*=d=1/d,f*=d,M*=d):(c=0,f=0,M=0);return t[0]=o,t[1]=c,t[2]=h,t[3]=0,t[4]=i,t[5]=f,t[6]=l,t[7]=0,t[8]=s,t[9]=M,t[10]=v,t[11]=0,t[12]=-(o*b+i*m+s*p),t[13]=-(c*b+f*m+M*p),t[14]=-(h*b+l*m+v*p),t[15]=1,t},n.targetTo=function(t,n,r,a){var e=n[0],u=n[1],o=n[2],i=a[0],s=a[1],c=a[2],f=e-r[0],M=u-r[1],h=o-r[2],l=f*f+M*M+h*h;l>0&&(l=1/Math.sqrt(l),f*=l,M*=l,h*=l);var v=s*h-c*M,d=c*f-i*h,b=i*M-s*f;(l=v*v+d*d+b*b)>0&&(l=1/Math.sqrt(l),v*=l,d*=l,b*=l);return t[0]=v,t[1]=d,t[2]=b,t[3]=0,t[4]=M*b-h*d,t[5]=h*v-f*b,t[6]=f*d-M*v,t[7]=0,t[8]=f,t[9]=M,t[10]=h,t[11]=0,t[12]=e,t[13]=u,t[14]=o,t[15]=1,t},n.str=function(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"},n.frob=function(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+Math.pow(t[6],2)+Math.pow(t[7],2)+Math.pow(t[8],2)+Math.pow(t[9],2)+Math.pow(t[10],2)+Math.pow(t[11],2)+Math.pow(t[12],2)+Math.pow(t[13],2)+Math.pow(t[14],2)+Math.pow(t[15],2))},n.add=function(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t[4]=n[4]+r[4],t[5]=n[5]+r[5],t[6]=n[6]+r[6],t[7]=n[7]+r[7],t[8]=n[8]+r[8],t[9]=n[9]+r[9],t[10]=n[10]+r[10],t[11]=n[11]+r[11],t[12]=n[12]+r[12],t[13]=n[13]+r[13],t[14]=n[14]+r[14],t[15]=n[15]+r[15],t},n.subtract=i,n.multiplyScalar=function(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=n[7]*r,t[8]=n[8]*r,t[9]=n[9]*r,t[10]=n[10]*r,t[11]=n[11]*r,t[12]=n[12]*r,t[13]=n[13]*r,t[14]=n[14]*r,t[15]=n[15]*r,t},n.multiplyScalarAndAdd=function(t,n,r,a){return t[0]=n[0]+r[0]*a,t[1]=n[1]+r[1]*a,t[2]=n[2]+r[2]*a,t[3]=n[3]+r[3]*a,t[4]=n[4]+r[4]*a,t[5]=n[5]+r[5]*a,t[6]=n[6]+r[6]*a,t[7]=n[7]+r[7]*a,t[8]=n[8]+r[8]*a,t[9]=n[9]+r[9]*a,t[10]=n[10]+r[10]*a,t[11]=n[11]+r[11]*a,t[12]=n[12]+r[12]*a,t[13]=n[13]+r[13]*a,t[14]=n[14]+r[14]*a,t[15]=n[15]+r[15]*a,t},n.exactEquals=function(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]&&t[6]===n[6]&&t[7]===n[7]&&t[8]===n[8]&&t[9]===n[9]&&t[10]===n[10]&&t[11]===n[11]&&t[12]===n[12]&&t[13]===n[13]&&t[14]===n[14]&&t[15]===n[15]},n.equals=function(t,n){var r=t[0],e=t[1],u=t[2],o=t[3],i=t[4],s=t[5],c=t[6],f=t[7],M=t[8],h=t[9],l=t[10],v=t[11],d=t[12],b=t[13],m=t[14],p=t[15],P=n[0],A=n[1],E=n[2],O=n[3],R=n[4],y=n[5],q=n[6],x=n[7],_=n[8],Y=n[9],L=n[10],S=n[11],w=n[12],I=n[13],N=n[14],g=n[15];return Math.abs(r-P)<=a.EPSILON*Math.max(1,Math.abs(r),Math.abs(P))&&Math.abs(e-A)<=a.EPSILON*Math.max(1,Math.abs(e),Math.abs(A))&&Math.abs(u-E)<=a.EPSILON*Math.max(1,Math.abs(u),Math.abs(E))&&Math.abs(o-O)<=a.EPSILON*Math.max(1,Math.abs(o),Math.abs(O))&&Math.abs(i-R)<=a.EPSILON*Math.max(1,Math.abs(i),Math.abs(R))&&Math.abs(s-y)<=a.EPSILON*Math.max(1,Math.abs(s),Math.abs(y))&&Math.abs(c-q)<=a.EPSILON*Math.max(1,Math.abs(c),Math.abs(q))&&Math.abs(f-x)<=a.EPSILON*Math.max(1,Math.abs(f),Math.abs(x))&&Math.abs(M-_)<=a.EPSILON*Math.max(1,Math.abs(M),Math.abs(_))&&Math.abs(h-Y)<=a.EPSILON*Math.max(1,Math.abs(h),Math.abs(Y))&&Math.abs(l-L)<=a.EPSILON*Math.max(1,Math.abs(l),Math.abs(L))&&Math.abs(v-S)<=a.EPSILON*Math.max(1,Math.abs(v),Math.abs(S))&&Math.abs(d-w)<=a.EPSILON*Math.max(1,Math.abs(d),Math.abs(w))&&Math.abs(b-I)<=a.EPSILON*Math.max(1,Math.abs(b),Math.abs(I))&&Math.abs(m-N)<=a.EPSILON*Math.max(1,Math.abs(m),Math.abs(N))&&Math.abs(p-g)<=a.EPSILON*Math.max(1,Math.abs(p),Math.abs(g))};var a=function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n.default=t,n}(r(0));function e(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function u(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=n[4],s=n[5],c=n[6],f=n[7],M=n[8],h=n[9],l=n[10],v=n[11],d=n[12],b=n[13],m=n[14],p=n[15],P=r[0],A=r[1],E=r[2],O=r[3];return t[0]=P*a+A*i+E*M+O*d,t[1]=P*e+A*s+E*h+O*b,t[2]=P*u+A*c+E*l+O*m,t[3]=P*o+A*f+E*v+O*p,P=r[4],A=r[5],E=r[6],O=r[7],t[4]=P*a+A*i+E*M+O*d,t[5]=P*e+A*s+E*h+O*b,t[6]=P*u+A*c+E*l+O*m,t[7]=P*o+A*f+E*v+O*p,P=r[8],A=r[9],E=r[10],O=r[11],t[8]=P*a+A*i+E*M+O*d,t[9]=P*e+A*s+E*h+O*b,t[10]=P*u+A*c+E*l+O*m,t[11]=P*o+A*f+E*v+O*p,P=r[12],A=r[13],E=r[14],O=r[15],t[12]=P*a+A*i+E*M+O*d,t[13]=P*e+A*s+E*h+O*b,t[14]=P*u+A*c+E*l+O*m,t[15]=P*o+A*f+E*v+O*p,t}function o(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=a+a,s=e+e,c=u+u,f=a*i,M=a*s,h=a*c,l=e*s,v=e*c,d=u*c,b=o*i,m=o*s,p=o*c;return t[0]=1-(l+d),t[1]=M+p,t[2]=h-m,t[3]=0,t[4]=M-p,t[5]=1-(f+d),t[6]=v+b,t[7]=0,t[8]=h+m,t[9]=v-b,t[10]=1-(f+l),t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t}function i(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t[4]=n[4]-r[4],t[5]=n[5]-r[5],t[6]=n[6]-r[6],t[7]=n[7]-r[7],t[8]=n[8]-r[8],t[9]=n[9]-r[9],t[10]=n[10]-r[10],t[11]=n[11]-r[11],t[12]=n[12]-r[12],t[13]=n[13]-r[13],t[14]=n[14]-r[14],t[15]=n[15]-r[15],t}n.mul=u,n.sub=i},function(t,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.sub=n.mul=void 0,n.create=function(){var t=new a.ARRAY_TYPE(9);a.ARRAY_TYPE!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[5]=0,t[6]=0,t[7]=0);return t[0]=1,t[4]=1,t[8]=1,t},n.fromMat4=function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[4],t[4]=n[5],t[5]=n[6],t[6]=n[8],t[7]=n[9],t[8]=n[10],t},n.clone=function(t){var n=new a.ARRAY_TYPE(9);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n[8]=t[8],n},n.copy=function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t},n.fromValues=function(t,n,r,e,u,o,i,s,c){var f=new a.ARRAY_TYPE(9);return f[0]=t,f[1]=n,f[2]=r,f[3]=e,f[4]=u,f[5]=o,f[6]=i,f[7]=s,f[8]=c,f},n.set=function(t,n,r,a,e,u,o,i,s,c){return t[0]=n,t[1]=r,t[2]=a,t[3]=e,t[4]=u,t[5]=o,t[6]=i,t[7]=s,t[8]=c,t},n.identity=function(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},n.transpose=function(t,n){if(t===n){var r=n[1],a=n[2],e=n[5];t[1]=n[3],t[2]=n[6],t[3]=r,t[5]=n[7],t[6]=a,t[7]=e}else t[0]=n[0],t[1]=n[3],t[2]=n[6],t[3]=n[1],t[4]=n[4],t[5]=n[7],t[6]=n[2],t[7]=n[5],t[8]=n[8];return t},n.invert=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=n[4],i=n[5],s=n[6],c=n[7],f=n[8],M=f*o-i*c,h=-f*u+i*s,l=c*u-o*s,v=r*M+a*h+e*l;if(!v)return null;return v=1/v,t[0]=M*v,t[1]=(-f*a+e*c)*v,t[2]=(i*a-e*o)*v,t[3]=h*v,t[4]=(f*r-e*s)*v,t[5]=(-i*r+e*u)*v,t[6]=l*v,t[7]=(-c*r+a*s)*v,t[8]=(o*r-a*u)*v,t},n.adjoint=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=n[4],i=n[5],s=n[6],c=n[7],f=n[8];return t[0]=o*f-i*c,t[1]=e*c-a*f,t[2]=a*i-e*o,t[3]=i*s-u*f,t[4]=r*f-e*s,t[5]=e*u-r*i,t[6]=u*c-o*s,t[7]=a*s-r*c,t[8]=r*o-a*u,t},n.determinant=function(t){var n=t[0],r=t[1],a=t[2],e=t[3],u=t[4],o=t[5],i=t[6],s=t[7],c=t[8];return n*(c*u-o*s)+r*(-c*e+o*i)+a*(s*e-u*i)},n.multiply=e,n.translate=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=n[4],s=n[5],c=n[6],f=n[7],M=n[8],h=r[0],l=r[1];return t[0]=a,t[1]=e,t[2]=u,t[3]=o,t[4]=i,t[5]=s,t[6]=h*a+l*o+c,t[7]=h*e+l*i+f,t[8]=h*u+l*s+M,t},n.rotate=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=n[4],s=n[5],c=n[6],f=n[7],M=n[8],h=Math.sin(r),l=Math.cos(r);return t[0]=l*a+h*o,t[1]=l*e+h*i,t[2]=l*u+h*s,t[3]=l*o-h*a,t[4]=l*i-h*e,t[5]=l*s-h*u,t[6]=c,t[7]=f,t[8]=M,t},n.scale=function(t,n,r){var a=r[0],e=r[1];return t[0]=a*n[0],t[1]=a*n[1],t[2]=a*n[2],t[3]=e*n[3],t[4]=e*n[4],t[5]=e*n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t},n.fromTranslation=function(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=n[0],t[7]=n[1],t[8]=1,t},n.fromRotation=function(t,n){var r=Math.sin(n),a=Math.cos(n);return t[0]=a,t[1]=r,t[2]=0,t[3]=-r,t[4]=a,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},n.fromScaling=function(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=0,t[4]=n[1],t[5]=0,t[6]=0,t[7]=0,t[8]=1,t},n.fromMat2d=function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=0,t[3]=n[2],t[4]=n[3],t[5]=0,t[6]=n[4],t[7]=n[5],t[8]=1,t},n.fromQuat=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=r+r,i=a+a,s=e+e,c=r*o,f=a*o,M=a*i,h=e*o,l=e*i,v=e*s,d=u*o,b=u*i,m=u*s;return t[0]=1-M-v,t[3]=f-m,t[6]=h+b,t[1]=f+m,t[4]=1-c-v,t[7]=l-d,t[2]=h-b,t[5]=l+d,t[8]=1-c-M,t},n.normalFromMat4=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=n[4],i=n[5],s=n[6],c=n[7],f=n[8],M=n[9],h=n[10],l=n[11],v=n[12],d=n[13],b=n[14],m=n[15],p=r*i-a*o,P=r*s-e*o,A=r*c-u*o,E=a*s-e*i,O=a*c-u*i,R=e*c-u*s,y=f*d-M*v,q=f*b-h*v,x=f*m-l*v,_=M*b-h*d,Y=M*m-l*d,L=h*m-l*b,S=p*L-P*Y+A*_+E*x-O*q+R*y;if(!S)return null;return S=1/S,t[0]=(i*L-s*Y+c*_)*S,t[1]=(s*x-o*L-c*q)*S,t[2]=(o*Y-i*x+c*y)*S,t[3]=(e*Y-a*L-u*_)*S,t[4]=(r*L-e*x+u*q)*S,t[5]=(a*x-r*Y-u*y)*S,t[6]=(d*R-b*O+m*E)*S,t[7]=(b*A-v*R-m*P)*S,t[8]=(v*O-d*A+m*p)*S,t},n.projection=function(t,n,r){return t[0]=2/n,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/r,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t},n.str=function(t){return"mat3("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+")"},n.frob=function(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+Math.pow(t[6],2)+Math.pow(t[7],2)+Math.pow(t[8],2))},n.add=function(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t[4]=n[4]+r[4],t[5]=n[5]+r[5],t[6]=n[6]+r[6],t[7]=n[7]+r[7],t[8]=n[8]+r[8],t},n.subtract=u,n.multiplyScalar=function(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=n[7]*r,t[8]=n[8]*r,t},n.multiplyScalarAndAdd=function(t,n,r,a){return t[0]=n[0]+r[0]*a,t[1]=n[1]+r[1]*a,t[2]=n[2]+r[2]*a,t[3]=n[3]+r[3]*a,t[4]=n[4]+r[4]*a,t[5]=n[5]+r[5]*a,t[6]=n[6]+r[6]*a,t[7]=n[7]+r[7]*a,t[8]=n[8]+r[8]*a,t},n.exactEquals=function(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]&&t[6]===n[6]&&t[7]===n[7]&&t[8]===n[8]},n.equals=function(t,n){var r=t[0],e=t[1],u=t[2],o=t[3],i=t[4],s=t[5],c=t[6],f=t[7],M=t[8],h=n[0],l=n[1],v=n[2],d=n[3],b=n[4],m=n[5],p=n[6],P=n[7],A=n[8];return Math.abs(r-h)<=a.EPSILON*Math.max(1,Math.abs(r),Math.abs(h))&&Math.abs(e-l)<=a.EPSILON*Math.max(1,Math.abs(e),Math.abs(l))&&Math.abs(u-v)<=a.EPSILON*Math.max(1,Math.abs(u),Math.abs(v))&&Math.abs(o-d)<=a.EPSILON*Math.max(1,Math.abs(o),Math.abs(d))&&Math.abs(i-b)<=a.EPSILON*Math.max(1,Math.abs(i),Math.abs(b))&&Math.abs(s-m)<=a.EPSILON*Math.max(1,Math.abs(s),Math.abs(m))&&Math.abs(c-p)<=a.EPSILON*Math.max(1,Math.abs(c),Math.abs(p))&&Math.abs(f-P)<=a.EPSILON*Math.max(1,Math.abs(f),Math.abs(P))&&Math.abs(M-A)<=a.EPSILON*Math.max(1,Math.abs(M),Math.abs(A))};var a=function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n.default=t,n}(r(0));function e(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=n[4],s=n[5],c=n[6],f=n[7],M=n[8],h=r[0],l=r[1],v=r[2],d=r[3],b=r[4],m=r[5],p=r[6],P=r[7],A=r[8];return t[0]=h*a+l*o+v*c,t[1]=h*e+l*i+v*f,t[2]=h*u+l*s+v*M,t[3]=d*a+b*o+m*c,t[4]=d*e+b*i+m*f,t[5]=d*u+b*s+m*M,t[6]=p*a+P*o+A*c,t[7]=p*e+P*i+A*f,t[8]=p*u+P*s+A*M,t}function u(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t[4]=n[4]-r[4],t[5]=n[5]-r[5],t[6]=n[6]-r[6],t[7]=n[7]-r[7],t[8]=n[8]-r[8],t}n.mul=e,n.sub=u},function(t,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.forEach=n.sqrLen=n.sqrDist=n.dist=n.div=n.mul=n.sub=n.len=void 0,n.create=e,n.clone=function(t){var n=new a.ARRAY_TYPE(2);return n[0]=t[0],n[1]=t[1],n},n.fromValues=function(t,n){var r=new a.ARRAY_TYPE(2);return r[0]=t,r[1]=n,r},n.copy=function(t,n){return t[0]=n[0],t[1]=n[1],t},n.set=function(t,n,r){return t[0]=n,t[1]=r,t},n.add=function(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t},n.subtract=u,n.multiply=o,n.divide=i,n.ceil=function(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t},n.floor=function(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t},n.min=function(t,n,r){return t[0]=Math.min(n[0],r[0]),t[1]=Math.min(n[1],r[1]),t},n.max=function(t,n,r){return t[0]=Math.max(n[0],r[0]),t[1]=Math.max(n[1],r[1]),t},n.round=function(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t},n.scale=function(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t},n.scaleAndAdd=function(t,n,r,a){return t[0]=n[0]+r[0]*a,t[1]=n[1]+r[1]*a,t},n.distance=s,n.squaredDistance=c,n.length=f,n.squaredLength=M,n.negate=function(t,n){return t[0]=-n[0],t[1]=-n[1],t},n.inverse=function(t,n){return t[0]=1/n[0],t[1]=1/n[1],t},n.normalize=function(t,n){var r=n[0],a=n[1],e=r*r+a*a;e>0&&(e=1/Math.sqrt(e),t[0]=n[0]*e,t[1]=n[1]*e);return t},n.dot=function(t,n){return t[0]*n[0]+t[1]*n[1]},n.cross=function(t,n,r){var a=n[0]*r[1]-n[1]*r[0];return t[0]=t[1]=0,t[2]=a,t},n.lerp=function(t,n,r,a){var e=n[0],u=n[1];return t[0]=e+a*(r[0]-e),t[1]=u+a*(r[1]-u),t},n.random=function(t,n){n=n||1;var r=2*a.RANDOM()*Math.PI;return t[0]=Math.cos(r)*n,t[1]=Math.sin(r)*n,t},n.transformMat2=function(t,n,r){var a=n[0],e=n[1];return t[0]=r[0]*a+r[2]*e,t[1]=r[1]*a+r[3]*e,t},n.transformMat2d=function(t,n,r){var a=n[0],e=n[1];return t[0]=r[0]*a+r[2]*e+r[4],t[1]=r[1]*a+r[3]*e+r[5],t},n.transformMat3=function(t,n,r){var a=n[0],e=n[1];return t[0]=r[0]*a+r[3]*e+r[6],t[1]=r[1]*a+r[4]*e+r[7],t},n.transformMat4=function(t,n,r){var a=n[0],e=n[1];return t[0]=r[0]*a+r[4]*e+r[12],t[1]=r[1]*a+r[5]*e+r[13],t},n.rotate=function(t,n,r,a){var e=n[0]-r[0],u=n[1]-r[1],o=Math.sin(a),i=Math.cos(a);return t[0]=e*i-u*o+r[0],t[1]=e*o+u*i+r[1],t},n.angle=function(t,n){var r=t[0],a=t[1],e=n[0],u=n[1],o=r*r+a*a;o>0&&(o=1/Math.sqrt(o));var i=e*e+u*u;i>0&&(i=1/Math.sqrt(i));var s=(r*e+a*u)*o*i;return s>1?0:s<-1?Math.PI:Math.acos(s)},n.str=function(t){return"vec2("+t[0]+", "+t[1]+")"},n.exactEquals=function(t,n){return t[0]===n[0]&&t[1]===n[1]},n.equals=function(t,n){var r=t[0],e=t[1],u=n[0],o=n[1];return Math.abs(r-u)<=a.EPSILON*Math.max(1,Math.abs(r),Math.abs(u))&&Math.abs(e-o)<=a.EPSILON*Math.max(1,Math.abs(e),Math.abs(o))};var a=function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n.default=t,n}(r(0));function e(){var t=new a.ARRAY_TYPE(2);return a.ARRAY_TYPE!=Float32Array&&(t[0]=0,t[1]=0),t}function u(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t}function o(t,n,r){return t[0]=n[0]*r[0],t[1]=n[1]*r[1],t}function i(t,n,r){return t[0]=n[0]/r[0],t[1]=n[1]/r[1],t}function s(t,n){var r=n[0]-t[0],a=n[1]-t[1];return Math.sqrt(r*r+a*a)}function c(t,n){var r=n[0]-t[0],a=n[1]-t[1];return r*r+a*a}function f(t){var n=t[0],r=t[1];return Math.sqrt(n*n+r*r)}function M(t){var n=t[0],r=t[1];return n*n+r*r}n.len=f,n.sub=u,n.mul=o,n.div=i,n.dist=s,n.sqrDist=c,n.sqrLen=M,n.forEach=function(){var t=e();return function(n,r,a,e,u,o){var i=void 0,s=void 0;for(r||(r=2),a||(a=0),s=e?Math.min(e*r+a,n.length):n.length,i=a;i<s;i+=r)t[0]=n[i],t[1]=n[i+1],u(t,t,o),n[i]=t[0],n[i+1]=t[1];return n}}()},function(t,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.sqrLen=n.squaredLength=n.len=n.length=n.dot=n.mul=n.setReal=n.getReal=void 0,n.create=function(){var t=new a.ARRAY_TYPE(8);a.ARRAY_TYPE!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0);return t[3]=1,t},n.clone=function(t){var n=new a.ARRAY_TYPE(8);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n},n.fromValues=function(t,n,r,e,u,o,i,s){var c=new a.ARRAY_TYPE(8);return c[0]=t,c[1]=n,c[2]=r,c[3]=e,c[4]=u,c[5]=o,c[6]=i,c[7]=s,c},n.fromRotationTranslationValues=function(t,n,r,e,u,o,i){var s=new a.ARRAY_TYPE(8);s[0]=t,s[1]=n,s[2]=r,s[3]=e;var c=.5*u,f=.5*o,M=.5*i;return s[4]=c*e+f*r-M*n,s[5]=f*e+M*t-c*r,s[6]=M*e+c*n-f*t,s[7]=-c*t-f*n-M*r,s},n.fromRotationTranslation=i,n.fromTranslation=function(t,n){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t[4]=.5*n[0],t[5]=.5*n[1],t[6]=.5*n[2],t[7]=0,t},n.fromRotation=function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=0,t[5]=0,t[6]=0,t[7]=0,t},n.fromMat4=function(t,n){var r=e.create();u.getRotation(r,n);var o=new a.ARRAY_TYPE(3);return u.getTranslation(o,n),i(t,r,o),t},n.copy=s,n.identity=function(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t},n.set=function(t,n,r,a,e,u,o,i,s){return t[0]=n,t[1]=r,t[2]=a,t[3]=e,t[4]=u,t[5]=o,t[6]=i,t[7]=s,t},n.getDual=function(t,n){return t[0]=n[4],t[1]=n[5],t[2]=n[6],t[3]=n[7],t},n.setDual=function(t,n){return t[4]=n[0],t[5]=n[1],t[6]=n[2],t[7]=n[3],t},n.getTranslation=function(t,n){var r=n[4],a=n[5],e=n[6],u=n[7],o=-n[0],i=-n[1],s=-n[2],c=n[3];return t[0]=2*(r*c+u*o+a*s-e*i),t[1]=2*(a*c+u*i+e*o-r*s),t[2]=2*(e*c+u*s+r*i-a*o),t},n.translate=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=.5*r[0],s=.5*r[1],c=.5*r[2],f=n[4],M=n[5],h=n[6],l=n[7];return t[0]=a,t[1]=e,t[2]=u,t[3]=o,t[4]=o*i+e*c-u*s+f,t[5]=o*s+u*i-a*c+M,t[6]=o*c+a*s-e*i+h,t[7]=-a*i-e*s-u*c+l,t},n.rotateX=function(t,n,r){var a=-n[0],u=-n[1],o=-n[2],i=n[3],s=n[4],c=n[5],f=n[6],M=n[7],h=s*i+M*a+c*o-f*u,l=c*i+M*u+f*a-s*o,v=f*i+M*o+s*u-c*a,d=M*i-s*a-c*u-f*o;return e.rotateX(t,n,r),a=t[0],u=t[1],o=t[2],i=t[3],t[4]=h*i+d*a+l*o-v*u,t[5]=l*i+d*u+v*a-h*o,t[6]=v*i+d*o+h*u-l*a,t[7]=d*i-h*a-l*u-v*o,t},n.rotateY=function(t,n,r){var a=-n[0],u=-n[1],o=-n[2],i=n[3],s=n[4],c=n[5],f=n[6],M=n[7],h=s*i+M*a+c*o-f*u,l=c*i+M*u+f*a-s*o,v=f*i+M*o+s*u-c*a,d=M*i-s*a-c*u-f*o;return e.rotateY(t,n,r),a=t[0],u=t[1],o=t[2],i=t[3],t[4]=h*i+d*a+l*o-v*u,t[5]=l*i+d*u+v*a-h*o,t[6]=v*i+d*o+h*u-l*a,t[7]=d*i-h*a-l*u-v*o,t},n.rotateZ=function(t,n,r){var a=-n[0],u=-n[1],o=-n[2],i=n[3],s=n[4],c=n[5],f=n[6],M=n[7],h=s*i+M*a+c*o-f*u,l=c*i+M*u+f*a-s*o,v=f*i+M*o+s*u-c*a,d=M*i-s*a-c*u-f*o;return e.rotateZ(t,n,r),a=t[0],u=t[1],o=t[2],i=t[3],t[4]=h*i+d*a+l*o-v*u,t[5]=l*i+d*u+v*a-h*o,t[6]=v*i+d*o+h*u-l*a,t[7]=d*i-h*a-l*u-v*o,t},n.rotateByQuatAppend=function(t,n,r){var a=r[0],e=r[1],u=r[2],o=r[3],i=n[0],s=n[1],c=n[2],f=n[3];return t[0]=i*o+f*a+s*u-c*e,t[1]=s*o+f*e+c*a-i*u,t[2]=c*o+f*u+i*e-s*a,t[3]=f*o-i*a-s*e-c*u,i=n[4],s=n[5],c=n[6],f=n[7],t[4]=i*o+f*a+s*u-c*e,t[5]=s*o+f*e+c*a-i*u,t[6]=c*o+f*u+i*e-s*a,t[7]=f*o-i*a-s*e-c*u,t},n.rotateByQuatPrepend=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=r[0],s=r[1],c=r[2],f=r[3];return t[0]=a*f+o*i+e*c-u*s,t[1]=e*f+o*s+u*i-a*c,t[2]=u*f+o*c+a*s-e*i,t[3]=o*f-a*i-e*s-u*c,i=r[4],s=r[5],c=r[6],f=r[7],t[4]=a*f+o*i+e*c-u*s,t[5]=e*f+o*s+u*i-a*c,t[6]=u*f+o*c+a*s-e*i,t[7]=o*f-a*i-e*s-u*c,t},n.rotateAroundAxis=function(t,n,r,e){if(Math.abs(e)<a.EPSILON)return s(t,n);var u=Math.sqrt(r[0]*r[0]+r[1]*r[1]+r[2]*r[2]);e*=.5;var o=Math.sin(e),i=o*r[0]/u,c=o*r[1]/u,f=o*r[2]/u,M=Math.cos(e),h=n[0],l=n[1],v=n[2],d=n[3];t[0]=h*M+d*i+l*f-v*c,t[1]=l*M+d*c+v*i-h*f,t[2]=v*M+d*f+h*c-l*i,t[3]=d*M-h*i-l*c-v*f;var b=n[4],m=n[5],p=n[6],P=n[7];return t[4]=b*M+P*i+m*f-p*c,t[5]=m*M+P*c+p*i-b*f,t[6]=p*M+P*f+b*c-m*i,t[7]=P*M-b*i-m*c-p*f,t},n.add=function(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t[4]=n[4]+r[4],t[5]=n[5]+r[5],t[6]=n[6]+r[6],t[7]=n[7]+r[7],t},n.multiply=c,n.scale=function(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=n[7]*r,t},n.lerp=function(t,n,r,a){var e=1-a;f(n,r)<0&&(a=-a);return t[0]=n[0]*e+r[0]*a,t[1]=n[1]*e+r[1]*a,t[2]=n[2]*e+r[2]*a,t[3]=n[3]*e+r[3]*a,t[4]=n[4]*e+r[4]*a,t[5]=n[5]*e+r[5]*a,t[6]=n[6]*e+r[6]*a,t[7]=n[7]*e+r[7]*a,t},n.invert=function(t,n){var r=h(n);return t[0]=-n[0]/r,t[1]=-n[1]/r,t[2]=-n[2]/r,t[3]=n[3]/r,t[4]=-n[4]/r,t[5]=-n[5]/r,t[6]=-n[6]/r,t[7]=n[7]/r,t},n.conjugate=function(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t[3]=n[3],t[4]=-n[4],t[5]=-n[5],t[6]=-n[6],t[7]=n[7],t},n.normalize=function(t,n){var r=h(n);if(r>0){r=Math.sqrt(r);var a=n[0]/r,e=n[1]/r,u=n[2]/r,o=n[3]/r,i=n[4],s=n[5],c=n[6],f=n[7],M=a*i+e*s+u*c+o*f;t[0]=a,t[1]=e,t[2]=u,t[3]=o,t[4]=(i-a*M)/r,t[5]=(s-e*M)/r,t[6]=(c-u*M)/r,t[7]=(f-o*M)/r}return t},n.str=function(t){return"quat2("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+")"},n.exactEquals=function(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]&&t[6]===n[6]&&t[7]===n[7]},n.equals=function(t,n){var r=t[0],e=t[1],u=t[2],o=t[3],i=t[4],s=t[5],c=t[6],f=t[7],M=n[0],h=n[1],l=n[2],v=n[3],d=n[4],b=n[5],m=n[6],p=n[7];return Math.abs(r-M)<=a.EPSILON*Math.max(1,Math.abs(r),Math.abs(M))&&Math.abs(e-h)<=a.EPSILON*Math.max(1,Math.abs(e),Math.abs(h))&&Math.abs(u-l)<=a.EPSILON*Math.max(1,Math.abs(u),Math.abs(l))&&Math.abs(o-v)<=a.EPSILON*Math.max(1,Math.abs(o),Math.abs(v))&&Math.abs(i-d)<=a.EPSILON*Math.max(1,Math.abs(i),Math.abs(d))&&Math.abs(s-b)<=a.EPSILON*Math.max(1,Math.abs(s),Math.abs(b))&&Math.abs(c-m)<=a.EPSILON*Math.max(1,Math.abs(c),Math.abs(m))&&Math.abs(f-p)<=a.EPSILON*Math.max(1,Math.abs(f),Math.abs(p))};var a=o(r(0)),e=o(r(3)),u=o(r(4));function o(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n.default=t,n}function i(t,n,r){var a=.5*r[0],e=.5*r[1],u=.5*r[2],o=n[0],i=n[1],s=n[2],c=n[3];return t[0]=o,t[1]=i,t[2]=s,t[3]=c,t[4]=a*c+e*s-u*i,t[5]=e*c+u*o-a*s,t[6]=u*c+a*i-e*o,t[7]=-a*o-e*i-u*s,t}function s(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t}n.getReal=e.copy;n.setReal=e.copy;function c(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=r[4],s=r[5],c=r[6],f=r[7],M=n[4],h=n[5],l=n[6],v=n[7],d=r[0],b=r[1],m=r[2],p=r[3];return t[0]=a*p+o*d+e*m-u*b,t[1]=e*p+o*b+u*d-a*m,t[2]=u*p+o*m+a*b-e*d,t[3]=o*p-a*d-e*b-u*m,t[4]=a*f+o*i+e*c-u*s+M*p+v*d+h*m-l*b,t[5]=e*f+o*s+u*i-a*c+h*p+v*b+l*d-M*m,t[6]=u*f+o*c+a*s-e*i+l*p+v*m+M*b-h*d,t[7]=o*f-a*i-e*s-u*c+v*p-M*d-h*b-l*m,t}n.mul=c;var f=n.dot=e.dot;var M=n.length=e.length,h=(n.len=M,n.squaredLength=e.squaredLength);n.sqrLen=h},function(t,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.sub=n.mul=void 0,n.create=function(){var t=new a.ARRAY_TYPE(6);a.ARRAY_TYPE!=Float32Array&&(t[1]=0,t[2]=0,t[4]=0,t[5]=0);return t[0]=1,t[3]=1,t},n.clone=function(t){var n=new a.ARRAY_TYPE(6);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n},n.copy=function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t},n.identity=function(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t},n.fromValues=function(t,n,r,e,u,o){var i=new a.ARRAY_TYPE(6);return i[0]=t,i[1]=n,i[2]=r,i[3]=e,i[4]=u,i[5]=o,i},n.set=function(t,n,r,a,e,u,o){return t[0]=n,t[1]=r,t[2]=a,t[3]=e,t[4]=u,t[5]=o,t},n.invert=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=n[4],i=n[5],s=r*u-a*e;if(!s)return null;return s=1/s,t[0]=u*s,t[1]=-a*s,t[2]=-e*s,t[3]=r*s,t[4]=(e*i-u*o)*s,t[5]=(a*o-r*i)*s,t},n.determinant=function(t){return t[0]*t[3]-t[1]*t[2]},n.multiply=e,n.rotate=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=n[4],s=n[5],c=Math.sin(r),f=Math.cos(r);return t[0]=a*f+u*c,t[1]=e*f+o*c,t[2]=a*-c+u*f,t[3]=e*-c+o*f,t[4]=i,t[5]=s,t},n.scale=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=n[4],s=n[5],c=r[0],f=r[1];return t[0]=a*c,t[1]=e*c,t[2]=u*f,t[3]=o*f,t[4]=i,t[5]=s,t},n.translate=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=n[4],s=n[5],c=r[0],f=r[1];return t[0]=a,t[1]=e,t[2]=u,t[3]=o,t[4]=a*c+u*f+i,t[5]=e*c+o*f+s,t},n.fromRotation=function(t,n){var r=Math.sin(n),a=Math.cos(n);return t[0]=a,t[1]=r,t[2]=-r,t[3]=a,t[4]=0,t[5]=0,t},n.fromScaling=function(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=n[1],t[4]=0,t[5]=0,t},n.fromTranslation=function(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=n[0],t[5]=n[1],t},n.str=function(t){return"mat2d("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+")"},n.frob=function(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+1)},n.add=function(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t[4]=n[4]+r[4],t[5]=n[5]+r[5],t},n.subtract=u,n.multiplyScalar=function(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*r,t[5]=n[5]*r,t},n.multiplyScalarAndAdd=function(t,n,r,a){return t[0]=n[0]+r[0]*a,t[1]=n[1]+r[1]*a,t[2]=n[2]+r[2]*a,t[3]=n[3]+r[3]*a,t[4]=n[4]+r[4]*a,t[5]=n[5]+r[5]*a,t},n.exactEquals=function(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]},n.equals=function(t,n){var r=t[0],e=t[1],u=t[2],o=t[3],i=t[4],s=t[5],c=n[0],f=n[1],M=n[2],h=n[3],l=n[4],v=n[5];return Math.abs(r-c)<=a.EPSILON*Math.max(1,Math.abs(r),Math.abs(c))&&Math.abs(e-f)<=a.EPSILON*Math.max(1,Math.abs(e),Math.abs(f))&&Math.abs(u-M)<=a.EPSILON*Math.max(1,Math.abs(u),Math.abs(M))&&Math.abs(o-h)<=a.EPSILON*Math.max(1,Math.abs(o),Math.abs(h))&&Math.abs(i-l)<=a.EPSILON*Math.max(1,Math.abs(i),Math.abs(l))&&Math.abs(s-v)<=a.EPSILON*Math.max(1,Math.abs(s),Math.abs(v))};var a=function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n.default=t,n}(r(0));function e(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=n[4],s=n[5],c=r[0],f=r[1],M=r[2],h=r[3],l=r[4],v=r[5];return t[0]=a*c+u*f,t[1]=e*c+o*f,t[2]=a*M+u*h,t[3]=e*M+o*h,t[4]=a*l+u*v+i,t[5]=e*l+o*v+s,t}function u(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t[4]=n[4]-r[4],t[5]=n[5]-r[5],t}n.mul=e,n.sub=u},function(t,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.sub=n.mul=void 0,n.create=function(){var t=new a.ARRAY_TYPE(4);a.ARRAY_TYPE!=Float32Array&&(t[1]=0,t[2]=0);return t[0]=1,t[3]=1,t},n.clone=function(t){var n=new a.ARRAY_TYPE(4);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n},n.copy=function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t},n.identity=function(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t},n.fromValues=function(t,n,r,e){var u=new a.ARRAY_TYPE(4);return u[0]=t,u[1]=n,u[2]=r,u[3]=e,u},n.set=function(t,n,r,a,e){return t[0]=n,t[1]=r,t[2]=a,t[3]=e,t},n.transpose=function(t,n){if(t===n){var r=n[1];t[1]=n[2],t[2]=r}else t[0]=n[0],t[1]=n[2],t[2]=n[1],t[3]=n[3];return t},n.invert=function(t,n){var r=n[0],a=n[1],e=n[2],u=n[3],o=r*u-e*a;if(!o)return null;return o=1/o,t[0]=u*o,t[1]=-a*o,t[2]=-e*o,t[3]=r*o,t},n.adjoint=function(t,n){var r=n[0];return t[0]=n[3],t[1]=-n[1],t[2]=-n[2],t[3]=r,t},n.determinant=function(t){return t[0]*t[3]-t[2]*t[1]},n.multiply=e,n.rotate=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=Math.sin(r),s=Math.cos(r);return t[0]=a*s+u*i,t[1]=e*s+o*i,t[2]=a*-i+u*s,t[3]=e*-i+o*s,t},n.scale=function(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=r[0],s=r[1];return t[0]=a*i,t[1]=e*i,t[2]=u*s,t[3]=o*s,t},n.fromRotation=function(t,n){var r=Math.sin(n),a=Math.cos(n);return t[0]=a,t[1]=r,t[2]=-r,t[3]=a,t},n.fromScaling=function(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=n[1],t},n.str=function(t){return"mat2("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"},n.frob=function(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2))},n.LDU=function(t,n,r,a){return t[2]=a[2]/a[0],r[0]=a[0],r[1]=a[1],r[3]=a[3]-t[2]*r[1],[t,n,r]},n.add=function(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t},n.subtract=u,n.exactEquals=function(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]},n.equals=function(t,n){var r=t[0],e=t[1],u=t[2],o=t[3],i=n[0],s=n[1],c=n[2],f=n[3];return Math.abs(r-i)<=a.EPSILON*Math.max(1,Math.abs(r),Math.abs(i))&&Math.abs(e-s)<=a.EPSILON*Math.max(1,Math.abs(e),Math.abs(s))&&Math.abs(u-c)<=a.EPSILON*Math.max(1,Math.abs(u),Math.abs(c))&&Math.abs(o-f)<=a.EPSILON*Math.max(1,Math.abs(o),Math.abs(f))},n.multiplyScalar=function(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t},n.multiplyScalarAndAdd=function(t,n,r,a){return t[0]=n[0]+r[0]*a,t[1]=n[1]+r[1]*a,t[2]=n[2]+r[2]*a,t[3]=n[3]+r[3]*a,t};var a=function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n.default=t,n}(r(0));function e(t,n,r){var a=n[0],e=n[1],u=n[2],o=n[3],i=r[0],s=r[1],c=r[2],f=r[3];return t[0]=a*i+u*s,t[1]=e*i+o*s,t[2]=a*c+u*f,t[3]=e*c+o*f,t}function u(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t}n.mul=e,n.sub=u},function(t,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.vec4=n.vec3=n.vec2=n.quat2=n.quat=n.mat4=n.mat3=n.mat2d=n.mat2=n.glMatrix=void 0;var a=l(r(0)),e=l(r(9)),u=l(r(8)),o=l(r(5)),i=l(r(4)),s=l(r(3)),c=l(r(7)),f=l(r(6)),M=l(r(2)),h=l(r(1));function l(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n.default=t,n}n.glMatrix=a,n.mat2=e,n.mat2d=u,n.mat3=o,n.mat4=i,n.quat=s,n.quat2=c,n.vec2=f,n.vec3=M,n.vec4=h}])});
    },{}],62:[function(require,module,exports){
    "use strict"
    
    //High level idea:
    // 1. Use Clarkson's incremental construction to find convex hull
    // 2. Point location in triangulation by jump and walk
    
    module.exports = incrementalConvexHull
    
    var orient = require("robust-orientation")
    var compareCell = require("simplicial-complex").compareCells
    
    function compareInt(a, b) {
      return a - b
    }
    
    function Simplex(vertices, adjacent, boundary) {
      this.vertices = vertices
      this.adjacent = adjacent
      this.boundary = boundary
      this.lastVisited = -1
    }
    
    Simplex.prototype.flip = function() {
      var t = this.vertices[0]
      this.vertices[0] = this.vertices[1]
      this.vertices[1] = t
      var u = this.adjacent[0]
      this.adjacent[0] = this.adjacent[1]
      this.adjacent[1] = u
    }
    
    function GlueFacet(vertices, cell, index) {
      this.vertices = vertices
      this.cell = cell
      this.index = index
    }
    
    function compareGlue(a, b) {
      return compareCell(a.vertices, b.vertices)
    }
    
    function bakeOrient(d) {
      var code = ["function orient(){var tuple=this.tuple;return test("]
      for(var i=0; i<=d; ++i) {
        if(i > 0) {
          code.push(",")
        }
        code.push("tuple[", i, "]")
      }
      code.push(")}return orient")
      var proc = new Function("test", code.join(""))
      var test = orient[d+1]
      if(!test) {
        test = orient
      }
      return proc(test)
    }
    
    var BAKED = []
    
    function Triangulation(dimension, vertices, simplices) {
      this.dimension = dimension
      this.vertices = vertices
      this.simplices = simplices
      this.interior = simplices.filter(function(c) {
        return !c.boundary
      })
    
      this.tuple = new Array(dimension+1)
      for(var i=0; i<=dimension; ++i) {
        this.tuple[i] = this.vertices[i]
      }
    
      var o = BAKED[dimension]
      if(!o) {
        o = BAKED[dimension] = bakeOrient(dimension)
      }
      this.orient = o
    }
    
    var proto = Triangulation.prototype
    
    //Degenerate situation where we are on boundary, but coplanar to face
    proto.handleBoundaryDegeneracy = function(cell, point) {
      var d = this.dimension
      var n = this.vertices.length - 1
      var tuple = this.tuple
      var verts = this.vertices
    
      //Dumb solution: Just do dfs from boundary cell until we find any peak, or terminate
      var toVisit = [ cell ]
      cell.lastVisited = -n
      while(toVisit.length > 0) {
        cell = toVisit.pop()
        var cellVerts = cell.vertices
        var cellAdj = cell.adjacent
        for(var i=0; i<=d; ++i) {
          var neighbor = cellAdj[i]
          if(!neighbor.boundary || neighbor.lastVisited <= -n) {
            continue
          }
          var nv = neighbor.vertices
          for(var j=0; j<=d; ++j) {
            var vv = nv[j]
            if(vv < 0) {
              tuple[j] = point
            } else {
              tuple[j] = verts[vv]
            }
          }
          var o = this.orient()
          if(o > 0) {
            return neighbor
          }
          neighbor.lastVisited = -n
          if(o === 0) {
            toVisit.push(neighbor)
          }
        }
      }
      return null
    }
    
    proto.walk = function(point, random) {
      //Alias local properties
      var n = this.vertices.length - 1
      var d = this.dimension
      var verts = this.vertices
      var tuple = this.tuple
    
      //Compute initial jump cell
      var initIndex = random ? (this.interior.length * Math.random())|0 : (this.interior.length-1)
      var cell = this.interior[ initIndex ]
    
      //Start walking
    outerLoop:
      while(!cell.boundary) {
        var cellVerts = cell.vertices
        var cellAdj = cell.adjacent
    
        for(var i=0; i<=d; ++i) {
          tuple[i] = verts[cellVerts[i]]
        }
        cell.lastVisited = n
    
        //Find farthest adjacent cell
        for(var i=0; i<=d; ++i) {
          var neighbor = cellAdj[i]
          if(neighbor.lastVisited >= n) {
            continue
          }
          var prev = tuple[i]
          tuple[i] = point
          var o = this.orient()
          tuple[i] = prev
          if(o < 0) {
            cell = neighbor
            continue outerLoop
          } else {
            if(!neighbor.boundary) {
              neighbor.lastVisited = n
            } else {
              neighbor.lastVisited = -n
            }
          }
        }
        return
      }
    
      return cell
    }
    
    proto.addPeaks = function(point, cell) {
      var n = this.vertices.length - 1
      var d = this.dimension
      var verts = this.vertices
      var tuple = this.tuple
      var interior = this.interior
      var simplices = this.simplices
    
      //Walking finished at boundary, time to add peaks
      var tovisit = [ cell ]
    
      //Stretch initial boundary cell into a peak
      cell.lastVisited = n
      cell.vertices[cell.vertices.indexOf(-1)] = n
      cell.boundary = false
      interior.push(cell)
    
      //Record a list of all new boundaries created by added peaks so we can glue them together when we are all done
      var glueFacets = []
    
      //Do a traversal of the boundary walking outward from starting peak
      while(tovisit.length > 0) {
        //Pop off peak and walk over adjacent cells
        var cell = tovisit.pop()
        var cellVerts = cell.vertices
        var cellAdj = cell.adjacent
        var indexOfN = cellVerts.indexOf(n)
        if(indexOfN < 0) {
          continue
        }
    
        for(var i=0; i<=d; ++i) {
          if(i === indexOfN) {
            continue
          }
    
          //For each boundary neighbor of the cell
          var neighbor = cellAdj[i]
          if(!neighbor.boundary || neighbor.lastVisited >= n) {
            continue
          }
    
          var nv = neighbor.vertices
    
          //Test if neighbor is a peak
          if(neighbor.lastVisited !== -n) {      
            //Compute orientation of p relative to each boundary peak
            var indexOfNeg1 = 0
            for(var j=0; j<=d; ++j) {
              if(nv[j] < 0) {
                indexOfNeg1 = j
                tuple[j] = point
              } else {
                tuple[j] = verts[nv[j]]
              }
            }
            var o = this.orient()
    
            //Test if neighbor cell is also a peak
            if(o > 0) {
              nv[indexOfNeg1] = n
              neighbor.boundary = false
              interior.push(neighbor)
              tovisit.push(neighbor)
              neighbor.lastVisited = n
              continue
            } else {
              neighbor.lastVisited = -n
            }
          }
    
          var na = neighbor.adjacent
    
          //Otherwise, replace neighbor with new face
          var vverts = cellVerts.slice()
          var vadj = cellAdj.slice()
          var ncell = new Simplex(vverts, vadj, true)
          simplices.push(ncell)
    
          //Connect to neighbor
          var opposite = na.indexOf(cell)
          if(opposite < 0) {
            continue
          }
          na[opposite] = ncell
          vadj[indexOfN] = neighbor
    
          //Connect to cell
          vverts[i] = -1
          vadj[i] = cell
          cellAdj[i] = ncell
    
          //Flip facet
          ncell.flip()
    
          //Add to glue list
          for(var j=0; j<=d; ++j) {
            var uu = vverts[j]
            if(uu < 0 || uu === n) {
              continue
            }
            var nface = new Array(d-1)
            var nptr = 0
            for(var k=0; k<=d; ++k) {
              var vv = vverts[k]
              if(vv < 0 || k === j) {
                continue
              }
              nface[nptr++] = vv
            }
            glueFacets.push(new GlueFacet(nface, ncell, j))
          }
        }
      }
    
      //Glue boundary facets together
      glueFacets.sort(compareGlue)
    
      for(var i=0; i+1<glueFacets.length; i+=2) {
        var a = glueFacets[i]
        var b = glueFacets[i+1]
        var ai = a.index
        var bi = b.index
        if(ai < 0 || bi < 0) {
          continue
        }
        a.cell.adjacent[a.index] = b.cell
        b.cell.adjacent[b.index] = a.cell
      }
    }
    
    proto.insert = function(point, random) {
      //Add point
      var verts = this.vertices
      verts.push(point)
    
      var cell = this.walk(point, random)
      if(!cell) {
        return
      }
    
      //Alias local properties
      var d = this.dimension
      var tuple = this.tuple
    
      //Degenerate case: If point is coplanar to cell, then walk until we find a non-degenerate boundary
      for(var i=0; i<=d; ++i) {
        var vv = cell.vertices[i]
        if(vv < 0) {
          tuple[i] = point
        } else {
          tuple[i] = verts[vv]
        }
      }
      var o = this.orient(tuple)
      if(o < 0) {
        return
      } else if(o === 0) {
        cell = this.handleBoundaryDegeneracy(cell, point)
        if(!cell) {
          return
        }
      }
    
      //Add peaks
      this.addPeaks(point, cell)
    }
    
    //Extract all boundary cells
    proto.boundary = function() {
      var d = this.dimension
      var boundary = []
      var cells = this.simplices
      var nc = cells.length
      for(var i=0; i<nc; ++i) {
        var c = cells[i]
        if(c.boundary) {
          var bcell = new Array(d)
          var cv = c.vertices
          var ptr = 0
          var parity = 0
          for(var j=0; j<=d; ++j) {
            if(cv[j] >= 0) {
              bcell[ptr++] = cv[j]
            } else {
              parity = j&1
            }
          }
          if(parity === (d&1)) {
            var t = bcell[0]
            bcell[0] = bcell[1]
            bcell[1] = t
          }
          boundary.push(bcell)
        }
      }
      return boundary
    }
    
    function incrementalConvexHull(points, randomSearch) {
      var n = points.length
      if(n === 0) {
        throw new Error("Must have at least d+1 points")
      }
      var d = points[0].length
      if(n <= d) {
        throw new Error("Must input at least d+1 points")
      }
    
      //FIXME: This could be degenerate, but need to select d+1 non-coplanar points to bootstrap process
      var initialSimplex = points.slice(0, d+1)
    
      //Make sure initial simplex is positively oriented
      var o = orient.apply(void 0, initialSimplex)
      if(o === 0) {
        throw new Error("Input not in general position")
      }
      var initialCoords = new Array(d+1)
      for(var i=0; i<=d; ++i) {
        initialCoords[i] = i
      }
      if(o < 0) {
        initialCoords[0] = 1
        initialCoords[1] = 0
      }
    
      //Create initial topological index, glue pointers together (kind of messy)
      var initialCell = new Simplex(initialCoords, new Array(d+1), false)
      var boundary = initialCell.adjacent
      var list = new Array(d+2)
      for(var i=0; i<=d; ++i) {
        var verts = initialCoords.slice()
        for(var j=0; j<=d; ++j) {
          if(j === i) {
            verts[j] = -1
          }
        }
        var t = verts[0]
        verts[0] = verts[1]
        verts[1] = t
        var cell = new Simplex(verts, new Array(d+1), true)
        boundary[i] = cell
        list[i] = cell
      }
      list[d+1] = initialCell
      for(var i=0; i<=d; ++i) {
        var verts = boundary[i].vertices
        var adj = boundary[i].adjacent
        for(var j=0; j<=d; ++j) {
          var v = verts[j]
          if(v < 0) {
            adj[j] = initialCell
            continue
          }
          for(var k=0; k<=d; ++k) {
            if(boundary[k].vertices.indexOf(v) < 0) {
              adj[j] = boundary[k]
            }
          }
        }
      }
    
      //Initialize triangles
      var triangles = new Triangulation(d, initialSimplex, list)
    
      //Insert remaining points
      var useRandom = !!randomSearch
      for(var i=d+1; i<n; ++i) {
        triangles.insert(points[i], useRandom)
      }
      
      //Extract boundary cells
      return triangles.boundary()
    }
    },{"robust-orientation":66,"simplicial-complex":82}],63:[function(require,module,exports){
    /**
     * AUTHOR OF INITIAL JS LIBRARY
     * k-d Tree JavaScript - V 1.0
     *
     * https://github.com/ubilabs/kd-tree-javascript
     *
     * @author Mircea Pricop <pricop@ubilabs.net>, 2012
     * @author Martin Kleppe <kleppe@ubilabs.net>, 2012
     * @author Ubilabs http://ubilabs.net, 2012
     * @license MIT License <http://www.opensource.org/licenses/mit-license.php>
     */
    
    
    function Node(obj, dimension, parent) {
      this.obj = obj;
      this.left = null;
      this.right = null;
      this.parent = parent;
      this.dimension = dimension;
    }
    
    function KdTree(points, metric, dimensions) {
    
      var self = this;
      
      function buildTree(points, depth, parent) {
        var dim = depth % dimensions.length,
          median,
          node;
    
        if (points.length === 0) {
          return null;
        }
        if (points.length === 1) {
          return new Node(points[0], dim, parent);
        }
    
        points.sort(function (a, b) {
          return a[dimensions[dim]] - b[dimensions[dim]];
        });
    
        median = Math.floor(points.length / 2);
        node = new Node(points[median], dim, parent);
        node.left = buildTree(points.slice(0, median), depth + 1, node);
        node.right = buildTree(points.slice(median + 1), depth + 1, node);
    
        return node;
      }
    
      this.root = buildTree(points, 0, null);
    
      this.insert = function (point) {
        function innerSearch(node, parent) {
    
          if (node === null) {
            return parent;
          }
    
          var dimension = dimensions[node.dimension];
          if (point[dimension] < node.obj[dimension]) {
            return innerSearch(node.left, node);
          } else {
            return innerSearch(node.right, node);
          }
        }
    
        var insertPosition = innerSearch(this.root, null),
          newNode,
          dimension;
    
        if (insertPosition === null) {
          this.root = new Node(point, 0, null);
          return;
        }
    
        newNode = new Node(point, (insertPosition.dimension + 1) % dimensions.length, insertPosition);
        dimension = dimensions[insertPosition.dimension];
    
        if (point[dimension] < insertPosition.obj[dimension]) {
          insertPosition.left = newNode;
        } else {
          insertPosition.right = newNode;
        }
      };
    
      this.remove = function (point) {
        var node;
    
        function nodeSearch(node) {
          if (node === null) {
            return null;
          }
    
          if (node.obj === point) {
            return node;
          }
    
          var dimension = dimensions[node.dimension];
    
          if (point[dimension] < node.obj[dimension]) {
            return nodeSearch(node.left, node);
          } else {
            return nodeSearch(node.right, node);
          }
        }
    
        function removeNode(node) {
          var nextNode,
            nextObj,
            pDimension;
    
          function findMax(node, dim) {
            var dimension,
              own,
              left,
              right,
              max;
    
            if (node === null) {
              return null;
            }
    
            dimension = dimensions[dim];
            if (node.dimension === dim) {
              if (node.right !== null) {
                return findMax(node.right, dim);
              }
              return node;
            }
    
            own = node.obj[dimension];
            left = findMax(node.left, dim);
            right = findMax(node.right, dim);
            max = node;
    
            if (left !== null && left.obj[dimension] > own) {
              max = left;
            }
    
            if (right !== null && right.obj[dimension] > max.obj[dimension]) {
              max = right;
            }
            return max;
          }
    
          function findMin(node, dim) {
            var dimension,
              own,
              left,
              right,
              min;
    
            if (node === null) {
              return null;
            }
    
            dimension = dimensions[dim];
    
            if (node.dimension === dim) {
              if (node.left !== null) {
                return findMin(node.left, dim);
              }
              return node;
            }
    
            own = node.obj[dimension];
            left = findMin(node.left, dim);
            right = findMin(node.right, dim);
            min = node;
    
            if (left !== null && left.obj[dimension] < own) {
              min = left;
            }
            if (right !== null && right.obj[dimension] < min.obj[dimension]) {
              min = right;
            }
            return min;
          }
    
          if (node.left === null && node.right === null) {
            if (node.parent === null) {
              self.root = null;
              return;
            }
    
            pDimension = dimensions[node.parent.dimension];
    
            if (node.obj[pDimension] < node.parent.obj[pDimension]) {
              node.parent.left = null;
            } else {
              node.parent.right = null;
            }
            return;
          }
    
          if (node.left !== null) {
            nextNode = findMax(node.left, node.dimension);
          } else {
            nextNode = findMin(node.right, node.dimension);
          }
    
          nextObj = nextNode.obj;
          removeNode(nextNode);
          node.obj = nextObj;
    
        }
    
        node = nodeSearch(self.root);
    
        if (node === null) { return; }
    
        removeNode(node);
      };
    
      this.nearest = function (point, maxNodes, maxDistance) {
        var i,
          result,
          bestNodes;
    
        bestNodes = new BinaryHeap(
          function (e) { return -e[1]; }
        );
    
        function nearestSearch(node) {
          if(!self.root){
            return [];
          }
          var bestChild,
            dimension = dimensions[node.dimension],
            ownDistance = metric(point, node.obj),
            linearPoint = {},
            linearDistance,
            otherChild,
            i;
    
          function saveNode(node, distance) {
            bestNodes.push([node, distance]);
            if (bestNodes.size() > maxNodes) {
              bestNodes.pop();
            }
          }
    
          for (i = 0; i < dimensions.length; i += 1) {
            if (i === node.dimension) {
              linearPoint[dimensions[i]] = point[dimensions[i]];
            } else {
              linearPoint[dimensions[i]] = node.obj[dimensions[i]];
            }
          }
    
          linearDistance = metric(linearPoint, node.obj);
    
          if (node.right === null && node.left === null) {
            if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {
              saveNode(node, ownDistance);
            }
            return;
          }
    
          if (node.right === null) {
            bestChild = node.left;
          } else if (node.left === null) {
            bestChild = node.right;
          } else {
            if (point[dimension] < node.obj[dimension]) {
              bestChild = node.left;
            } else {
              bestChild = node.right;
            }
          }
    
          nearestSearch(bestChild);
    
          if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {
            saveNode(node, ownDistance);
          }
    
          if (bestNodes.size() < maxNodes || Math.abs(linearDistance) < bestNodes.peek()[1]) {
            if (bestChild === node.left) {
              otherChild = node.right;
            } else {
              otherChild = node.left;
            }
            if (otherChild !== null) {
              nearestSearch(otherChild);
            }
          }
        }
    
        if (maxDistance) {
          for (i = 0; i < maxNodes; i += 1) {
            bestNodes.push([null, maxDistance]);
          }
        }
    
        nearestSearch(self.root);
    
        result = [];
    
        for (i = 0; i < maxNodes && i < bestNodes.content.length; i += 1) {
          if (bestNodes.content[i][0]) {
            result.push([bestNodes.content[i][0].obj, bestNodes.content[i][1]]);
          }
        }
        return result;
      };
    
      this.balanceFactor = function () {
        function height(node) {
          if (node === null) {
            return 0;
          }
          return Math.max(height(node.left), height(node.right)) + 1;
        }
    
        function count(node) {
          if (node === null) {
            return 0;
          }
          return count(node.left) + count(node.right) + 1;
        }
    
        return height(self.root) / (Math.log(count(self.root)) / Math.log(2));
      };
    }
    
    // Binary heap implementation from:
    // http://eloquentjavascript.net/appendix2.html
    
    function BinaryHeap(scoreFunction){
      this.content = [];
      this.scoreFunction = scoreFunction;
    }
    
    BinaryHeap.prototype = {
      push: function(element) {
        // Add the new element to the end of the array.
        this.content.push(element);
        // Allow it to bubble up.
        this.bubbleUp(this.content.length - 1);
      },
    
      pop: function() {
        // Store the first element so we can return it later.
        var result = this.content[0];
        // Get the element at the end of the array.
        var end = this.content.pop();
        // If there are any elements left, put the end element at the
        // start, and let it sink down.
        if (this.content.length > 0) {
          this.content[0] = end;
          this.sinkDown(0);
        }
        return result;
      },
    
      peek: function() {
        return this.content[0];
      },
    
      remove: function(node) {
        var len = this.content.length;
        // To remove a value, we must search through the array to find
        // it.
        for (var i = 0; i < len; i++) {
          if (this.content[i] == node) {
            // When it is found, the process seen in 'pop' is repeated
            // to fill up the hole.
            var end = this.content.pop();
            if (i != len - 1) {
              this.content[i] = end;
              if (this.scoreFunction(end) < this.scoreFunction(node))
                this.bubbleUp(i);
              else
                this.sinkDown(i);
            }
            return;
          }
        }
        throw new Error("Node not found.");
      },
    
      size: function() {
        return this.content.length;
      },
    
      bubbleUp: function(n) {
        // Fetch the element that has to be moved.
        var element = this.content[n];
        // When at 0, an element can not go up any further.
        while (n > 0) {
          // Compute the parent element's index, and fetch it.
          var parentN = Math.floor((n + 1) / 2) - 1,
              parent = this.content[parentN];
          // Swap the elements if the parent is greater.
          if (this.scoreFunction(element) < this.scoreFunction(parent)) {
            this.content[parentN] = element;
            this.content[n] = parent;
            // Update 'n' to continue at the new position.
            n = parentN;
          }
          // Found a parent that is less, no need to move it further.
          else {
            break;
          }
        }
      },
    
      sinkDown: function(n) {
        // Look up the target element and its score.
        var length = this.content.length,
            element = this.content[n],
            elemScore = this.scoreFunction(element);
    
        while(true) {
          // Compute the indices of the child elements.
          var child2N = (n + 1) * 2, child1N = child2N - 1;
          // This is used to store the new position of the element,
          // if any.
          var swap = null;
          // If the first child exists (is inside the array)...
          if (child1N < length) {
            // Look it up and compute its score.
            var child1 = this.content[child1N],
                child1Score = this.scoreFunction(child1);
            // If the score is less than our element's, we need to swap.
            if (child1Score < elemScore)
              swap = child1N;
          }
          // Do the same checks for the other child.
          if (child2N < length) {
            var child2 = this.content[child2N],
                child2Score = this.scoreFunction(child2);
            if (child2Score < (swap == null ? elemScore : child1Score)){
              swap = child2N;
            }
          }
    
          // If the element needs to be moved, swap it, and continue.
          if (swap != null) {
            this.content[n] = this.content[swap];
            this.content[swap] = element;
            n = swap;
          }
          // Otherwise, we are done.
          else {
            break;
          }
        }
      }
    };
    
    module.exports = {
      createKdTree: function (points, metric, dimensions) {
        return new KdTree(points, metric, dimensions)
      }
    }
    
    },{}],64:[function(require,module,exports){
    'use strict'
    
    module.exports = monotoneConvexHull2D
    
    var orient = require('robust-orientation')[3]
    
    function monotoneConvexHull2D(points) {
      var n = points.length
    
      if(n < 3) {
        var result = new Array(n)
        for(var i=0; i<n; ++i) {
          result[i] = i
        }
    
        if(n === 2 &&
           points[0][0] === points[1][0] &&
           points[0][1] === points[1][1]) {
          return [0]
        }
    
        return result
      }
    
      //Sort point indices along x-axis
      var sorted = new Array(n)
      for(var i=0; i<n; ++i) {
        sorted[i] = i
      }
      sorted.sort(function(a,b) {
        var d = points[a][0]-points[b][0]
        if(d) {
          return d
        }
        return points[a][1] - points[b][1]
      })
    
      //Construct upper and lower hulls
      var lower = [sorted[0], sorted[1]]
      var upper = [sorted[0], sorted[1]]
    
      for(var i=2; i<n; ++i) {
        var idx = sorted[i]
        var p   = points[idx]
    
        //Insert into lower list
        var m = lower.length
        while(m > 1 && orient(
            points[lower[m-2]], 
            points[lower[m-1]], 
            p) <= 0) {
          m -= 1
          lower.pop()
        }
        lower.push(idx)
    
        //Insert into upper list
        m = upper.length
        while(m > 1 && orient(
            points[upper[m-2]], 
            points[upper[m-1]], 
            p) >= 0) {
          m -= 1
          upper.pop()
        }
        upper.push(idx)
      }
    
      //Merge lists together
      var result = new Array(upper.length + lower.length - 2)
      var ptr    = 0
      for(var i=0, nl=lower.length; i<nl; ++i) {
        result[ptr++] = lower[i]
      }
      for(var j=upper.length-2; j>0; --j) {
        result[ptr++] = upper[j]
      }
    
      //Return result
      return result
    }
    },{"robust-orientation":66}],65:[function(require,module,exports){
    (function (global){
    "use strict";
    
    var numeric = (typeof exports === "undefined")?(function numeric() {}):(exports);
    if(typeof global !== "undefined") { global.numeric = numeric; }
    
    numeric.version = "1.2.6";
    
    // 1. Utility functions
    numeric.bench = function bench (f,interval) {
        var t1,t2,n,i;
        if(typeof interval === "undefined") { interval = 15; }
        n = 0.5;
        t1 = new Date();
        while(1) {
            n*=2;
            for(i=n;i>3;i-=4) { f(); f(); f(); f(); }
            while(i>0) { f(); i--; }
            t2 = new Date();
            if(t2-t1 > interval) break;
        }
        for(i=n;i>3;i-=4) { f(); f(); f(); f(); }
        while(i>0) { f(); i--; }
        t2 = new Date();
        return 1000*(3*n-1)/(t2-t1);
    }
    
    numeric._myIndexOf = (function _myIndexOf(w) {
        var n = this.length,k;
        for(k=0;k<n;++k) if(this[k]===w) return k;
        return -1;
    });
    numeric.myIndexOf = (Array.prototype.indexOf)?Array.prototype.indexOf:numeric._myIndexOf;
    
    numeric.Function = Function;
    numeric.precision = 4;
    numeric.largeArray = 50;
    
    numeric.prettyPrint = function prettyPrint(x) {
        function fmtnum(x) {
            if(x === 0) { return '0'; }
            if(isNaN(x)) { return 'NaN'; }
            if(x<0) { return '-'+fmtnum(-x); }
            if(isFinite(x)) {
                var scale = Math.floor(Math.log(x) / Math.log(10));
                var normalized = x / Math.pow(10,scale);
                var basic = normalized.toPrecision(numeric.precision);
                if(parseFloat(basic) === 10) { scale++; normalized = 1; basic = normalized.toPrecision(numeric.precision); }
                return parseFloat(basic).toString()+'e'+scale.toString();
            }
            return 'Infinity';
        }
        var ret = [];
        function foo(x) {
            var k;
            if(typeof x === "undefined") { ret.push(Array(numeric.precision+8).join(' ')); return false; }
            if(typeof x === "string") { ret.push('"'+x+'"'); return false; }
            if(typeof x === "boolean") { ret.push(x.toString()); return false; }
            if(typeof x === "number") {
                var a = fmtnum(x);
                var b = x.toPrecision(numeric.precision);
                var c = parseFloat(x.toString()).toString();
                var d = [a,b,c,parseFloat(b).toString(),parseFloat(c).toString()];
                for(k=1;k<d.length;k++) { if(d[k].length < a.length) a = d[k]; }
                ret.push(Array(numeric.precision+8-a.length).join(' ')+a);
                return false;
            }
            if(x === null) { ret.push("null"); return false; }
            if(typeof x === "function") { 
                ret.push(x.toString());
                var flag = false;
                for(k in x) { if(x.hasOwnProperty(k)) { 
                    if(flag) ret.push(',\n');
                    else ret.push('\n{');
                    flag = true; 
                    ret.push(k); 
                    ret.push(': \n'); 
                    foo(x[k]); 
                } }
                if(flag) ret.push('}\n');
                return true;
            }
            if(x instanceof Array) {
                if(x.length > numeric.largeArray) { ret.push('...Large Array...'); return true; }
                var flag = false;
                ret.push('[');
                for(k=0;k<x.length;k++) { if(k>0) { ret.push(','); if(flag) ret.push('\n '); } flag = foo(x[k]); }
                ret.push(']');
                return true;
            }
            ret.push('{');
            var flag = false;
            for(k in x) { if(x.hasOwnProperty(k)) { if(flag) ret.push(',\n'); flag = true; ret.push(k); ret.push(': \n'); foo(x[k]); } }
            ret.push('}');
            return true;
        }
        foo(x);
        return ret.join('');
    }
    
    numeric.parseDate = function parseDate(d) {
        function foo(d) {
            if(typeof d === 'string') { return Date.parse(d.replace(/-/g,'/')); }
            if(!(d instanceof Array)) { throw new Error("parseDate: parameter must be arrays of strings"); }
            var ret = [],k;
            for(k=0;k<d.length;k++) { ret[k] = foo(d[k]); }
            return ret;
        }
        return foo(d);
    }
    
    numeric.parseFloat = function parseFloat_(d) {
        function foo(d) {
            if(typeof d === 'string') { return parseFloat(d); }
            if(!(d instanceof Array)) { throw new Error("parseFloat: parameter must be arrays of strings"); }
            var ret = [],k;
            for(k=0;k<d.length;k++) { ret[k] = foo(d[k]); }
            return ret;
        }
        return foo(d);
    }
    
    numeric.parseCSV = function parseCSV(t) {
        var foo = t.split('\n');
        var j,k;
        var ret = [];
        var pat = /(([^'",]*)|('[^']*')|("[^"]*")),/g;
        var patnum = /^\s*(([+-]?[0-9]+(\.[0-9]*)?(e[+-]?[0-9]+)?)|([+-]?[0-9]*(\.[0-9]+)?(e[+-]?[0-9]+)?))\s*$/;
        var stripper = function(n) { return n.substr(0,n.length-1); }
        var count = 0;
        for(k=0;k<foo.length;k++) {
          var bar = (foo[k]+",").match(pat),baz;
          if(bar.length>0) {
              ret[count] = [];
              for(j=0;j<bar.length;j++) {
                  baz = stripper(bar[j]);
                  if(patnum.test(baz)) { ret[count][j] = parseFloat(baz); }
                  else ret[count][j] = baz;
              }
              count++;
          }
        }
        return ret;
    }
    
    numeric.toCSV = function toCSV(A) {
        var s = numeric.dim(A);
        var i,j,m,n,row,ret;
        m = s[0];
        n = s[1];
        ret = [];
        for(i=0;i<m;i++) {
            row = [];
            for(j=0;j<m;j++) { row[j] = A[i][j].toString(); }
            ret[i] = row.join(', ');
        }
        return ret.join('\n')+'\n';
    }
    
    numeric.getURL = function getURL(url) {
        var client = new XMLHttpRequest();
        client.open("GET",url,false);
        client.send();
        return client;
    }
    
    numeric.imageURL = function imageURL(img) {
        function base64(A) {
            var n = A.length, i,x,y,z,p,q,r,s;
            var key = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
            var ret = "";
            for(i=0;i<n;i+=3) {
                x = A[i];
                y = A[i+1];
                z = A[i+2];
                p = x >> 2;
                q = ((x & 3) << 4) + (y >> 4);
                r = ((y & 15) << 2) + (z >> 6);
                s = z & 63;
                if(i+1>=n) { r = s = 64; }
                else if(i+2>=n) { s = 64; }
                ret += key.charAt(p) + key.charAt(q) + key.charAt(r) + key.charAt(s);
                }
            return ret;
        }
        function crc32Array (a,from,to) {
            if(typeof from === "undefined") { from = 0; }
            if(typeof to === "undefined") { to = a.length; }
            var table = [0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,
                         0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91, 
                         0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,
                         0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5, 
                         0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 
                         0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 
                         0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
                         0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,
                         0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,
                         0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01, 
                         0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, 
                         0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65, 
                         0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 
                         0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9, 
                         0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F, 
                         0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, 
                         0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683, 
                         0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 
                         0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7, 
                         0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, 
                         0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B, 
                         0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79, 
                         0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 
                         0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D, 
                         0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713, 
                         0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 
                         0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777, 
                         0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, 
                         0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB, 
                         0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9, 
                         0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF, 
                         0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D];
         
            var crc = -1, y = 0, n = a.length,i;
    
            for (i = from; i < to; i++) {
                y = (crc ^ a[i]) & 0xFF;
                crc = (crc >>> 8) ^ table[y];
            }
         
            return crc ^ (-1);
        }
    
        var h = img[0].length, w = img[0][0].length, s1, s2, next,k,length,a,b,i,j,adler32,crc32;
        var stream = [
                      137, 80, 78, 71, 13, 10, 26, 10,                           //  0: PNG signature
                      0,0,0,13,                                                  //  8: IHDR Chunk length
                      73, 72, 68, 82,                                            // 12: "IHDR" 
                      (w >> 24) & 255, (w >> 16) & 255, (w >> 8) & 255, w&255,   // 16: Width
                      (h >> 24) & 255, (h >> 16) & 255, (h >> 8) & 255, h&255,   // 20: Height
                      8,                                                         // 24: bit depth
                      2,                                                         // 25: RGB
                      0,                                                         // 26: deflate
                      0,                                                         // 27: no filter
                      0,                                                         // 28: no interlace
                      -1,-2,-3,-4,                                               // 29: CRC
                      -5,-6,-7,-8,                                               // 33: IDAT Chunk length
                      73, 68, 65, 84,                                            // 37: "IDAT"
                      // RFC 1950 header starts here
                      8,                                                         // 41: RFC1950 CMF
                      29                                                         // 42: RFC1950 FLG
                      ];
        crc32 = crc32Array(stream,12,29);
        stream[29] = (crc32>>24)&255;
        stream[30] = (crc32>>16)&255;
        stream[31] = (crc32>>8)&255;
        stream[32] = (crc32)&255;
        s1 = 1;
        s2 = 0;
        for(i=0;i<h;i++) {
            if(i<h-1) { stream.push(0); }
            else { stream.push(1); }
            a = (3*w+1+(i===0))&255; b = ((3*w+1+(i===0))>>8)&255;
            stream.push(a); stream.push(b);
            stream.push((~a)&255); stream.push((~b)&255);
            if(i===0) stream.push(0);
            for(j=0;j<w;j++) {
                for(k=0;k<3;k++) {
                    a = img[k][i][j];
                    if(a>255) a = 255;
                    else if(a<0) a=0;
                    else a = Math.round(a);
                    s1 = (s1 + a )%65521;
                    s2 = (s2 + s1)%65521;
                    stream.push(a);
                }
            }
            stream.push(0);
        }
        adler32 = (s2<<16)+s1;
        stream.push((adler32>>24)&255);
        stream.push((adler32>>16)&255);
        stream.push((adler32>>8)&255);
        stream.push((adler32)&255);
        length = stream.length - 41;
        stream[33] = (length>>24)&255;
        stream[34] = (length>>16)&255;
        stream[35] = (length>>8)&255;
        stream[36] = (length)&255;
        crc32 = crc32Array(stream,37);
        stream.push((crc32>>24)&255);
        stream.push((crc32>>16)&255);
        stream.push((crc32>>8)&255);
        stream.push((crc32)&255);
        stream.push(0);
        stream.push(0);
        stream.push(0);
        stream.push(0);
    //    a = stream.length;
        stream.push(73);  // I
        stream.push(69);  // E
        stream.push(78);  // N
        stream.push(68);  // D
        stream.push(174); // CRC1
        stream.push(66);  // CRC2
        stream.push(96);  // CRC3
        stream.push(130); // CRC4
        return 'data:image/png;base64,'+base64(stream);
    }
    
    // 2. Linear algebra with Arrays.
    numeric._dim = function _dim(x) {
        var ret = [];
        while(typeof x === "object") { ret.push(x.length); x = x[0]; }
        return ret;
    }
    
    numeric.dim = function dim(x) {
        var y,z;
        if(typeof x === "object") {
            y = x[0];
            if(typeof y === "object") {
                z = y[0];
                if(typeof z === "object") {
                    return numeric._dim(x);
                }
                return [x.length,y.length];
            }
            return [x.length];
        }
        return [];
    }
    
    numeric.mapreduce = function mapreduce(body,init) {
        return Function('x','accum','_s','_k',
                'if(typeof accum === "undefined") accum = '+init+';\n'+
                'if(typeof x === "number") { var xi = x; '+body+'; return accum; }\n'+
                'if(typeof _s === "undefined") _s = numeric.dim(x);\n'+
                'if(typeof _k === "undefined") _k = 0;\n'+
                'var _n = _s[_k];\n'+
                'var i,xi;\n'+
                'if(_k < _s.length-1) {\n'+
                '    for(i=_n-1;i>=0;i--) {\n'+
                '        accum = arguments.callee(x[i],accum,_s,_k+1);\n'+
                '    }'+
                '    return accum;\n'+
                '}\n'+
                'for(i=_n-1;i>=1;i-=2) { \n'+
                '    xi = x[i];\n'+
                '    '+body+';\n'+
                '    xi = x[i-1];\n'+
                '    '+body+';\n'+
                '}\n'+
                'if(i === 0) {\n'+
                '    xi = x[i];\n'+
                '    '+body+'\n'+
                '}\n'+
                'return accum;'
                );
    }
    numeric.mapreduce2 = function mapreduce2(body,setup) {
        return Function('x',
                'var n = x.length;\n'+
                'var i,xi;\n'+setup+';\n'+
                'for(i=n-1;i!==-1;--i) { \n'+
                '    xi = x[i];\n'+
                '    '+body+';\n'+
                '}\n'+
                'return accum;'
                );
    }
    
    
    numeric.same = function same(x,y) {
        var i,n;
        if(!(x instanceof Array) || !(y instanceof Array)) { return false; }
        n = x.length;
        if(n !== y.length) { return false; }
        for(i=0;i<n;i++) {
            if(x[i] === y[i]) { continue; }
            if(typeof x[i] === "object") { if(!same(x[i],y[i])) return false; }
            else { return false; }
        }
        return true;
    }
    
    numeric.rep = function rep(s,v,k) {
        if(typeof k === "undefined") { k=0; }
        var n = s[k], ret = Array(n), i;
        if(k === s.length-1) {
            for(i=n-2;i>=0;i-=2) { ret[i+1] = v; ret[i] = v; }
            if(i===-1) { ret[0] = v; }
            return ret;
        }
        for(i=n-1;i>=0;i--) { ret[i] = numeric.rep(s,v,k+1); }
        return ret;
    }
    
    
    numeric.dotMMsmall = function dotMMsmall(x,y) {
        var i,j,k,p,q,r,ret,foo,bar,woo,i0,k0,p0,r0;
        p = x.length; q = y.length; r = y[0].length;
        ret = Array(p);
        for(i=p-1;i>=0;i--) {
            foo = Array(r);
            bar = x[i];
            for(k=r-1;k>=0;k--) {
                woo = bar[q-1]*y[q-1][k];
                for(j=q-2;j>=1;j-=2) {
                    i0 = j-1;
                    woo += bar[j]*y[j][k] + bar[i0]*y[i0][k];
                }
                if(j===0) { woo += bar[0]*y[0][k]; }
                foo[k] = woo;
            }
            ret[i] = foo;
        }
        return ret;
    }
    numeric._getCol = function _getCol(A,j,x) {
        var n = A.length, i;
        for(i=n-1;i>0;--i) {
            x[i] = A[i][j];
            --i;
            x[i] = A[i][j];
        }
        if(i===0) x[0] = A[0][j];
    }
    numeric.dotMMbig = function dotMMbig(x,y){
        var gc = numeric._getCol, p = y.length, v = Array(p);
        var m = x.length, n = y[0].length, A = new Array(m), xj;
        var VV = numeric.dotVV;
        var i,j,k,z;
        --p;
        --m;
        for(i=m;i!==-1;--i) A[i] = Array(n);
        --n;
        for(i=n;i!==-1;--i) {
            gc(y,i,v);
            for(j=m;j!==-1;--j) {
                z=0;
                xj = x[j];
                A[j][i] = VV(xj,v);
            }
        }
        return A;
    }
    
    numeric.dotMV = function dotMV(x,y) {
        var p = x.length, q = y.length,i;
        var ret = Array(p), dotVV = numeric.dotVV;
        for(i=p-1;i>=0;i--) { ret[i] = dotVV(x[i],y); }
        return ret;
    }
    
    numeric.dotVM = function dotVM(x,y) {
        var i,j,k,p,q,r,ret,foo,bar,woo,i0,k0,p0,r0,s1,s2,s3,baz,accum;
        p = x.length; q = y[0].length;
        ret = Array(q);
        for(k=q-1;k>=0;k--) {
            woo = x[p-1]*y[p-1][k];
            for(j=p-2;j>=1;j-=2) {
                i0 = j-1;
                woo += x[j]*y[j][k] + x[i0]*y[i0][k];
            }
            if(j===0) { woo += x[0]*y[0][k]; }
            ret[k] = woo;
        }
        return ret;
    }
    
    numeric.dotVV = function dotVV(x,y) {
        var i,n=x.length,i1,ret = x[n-1]*y[n-1];
        for(i=n-2;i>=1;i-=2) {
            i1 = i-1;
            ret += x[i]*y[i] + x[i1]*y[i1];
        }
        if(i===0) { ret += x[0]*y[0]; }
        return ret;
    }
    
    numeric.dot = function dot(x,y) {
        var d = numeric.dim;
        switch(d(x).length*1000+d(y).length) {
        case 2002:
            if(y.length < 10) return numeric.dotMMsmall(x,y);
            else return numeric.dotMMbig(x,y);
        case 2001: return numeric.dotMV(x,y);
        case 1002: return numeric.dotVM(x,y);
        case 1001: return numeric.dotVV(x,y);
        case 1000: return numeric.mulVS(x,y);
        case 1: return numeric.mulSV(x,y);
        case 0: return x*y;
        default: throw new Error('numeric.dot only works on vectors and matrices');
        }
    }
    
    numeric.diag = function diag(d) {
        var i,i1,j,n = d.length, A = Array(n), Ai;
        for(i=n-1;i>=0;i--) {
            Ai = Array(n);
            i1 = i+2;
            for(j=n-1;j>=i1;j-=2) {
                Ai[j] = 0;
                Ai[j-1] = 0;
            }
            if(j>i) { Ai[j] = 0; }
            Ai[i] = d[i];
            for(j=i-1;j>=1;j-=2) {
                Ai[j] = 0;
                Ai[j-1] = 0;
            }
            if(j===0) { Ai[0] = 0; }
            A[i] = Ai;
        }
        return A;
    }
    numeric.getDiag = function(A) {
        var n = Math.min(A.length,A[0].length),i,ret = Array(n);
        for(i=n-1;i>=1;--i) {
            ret[i] = A[i][i];
            --i;
            ret[i] = A[i][i];
        }
        if(i===0) {
            ret[0] = A[0][0];
        }
        return ret;
    }
    
    numeric.identity = function identity(n) { return numeric.diag(numeric.rep([n],1)); }
    numeric.pointwise = function pointwise(params,body,setup) {
        if(typeof setup === "undefined") { setup = ""; }
        var fun = [];
        var k;
        var avec = /\[i\]$/,p,thevec = '';
        var haveret = false;
        for(k=0;k<params.length;k++) {
            if(avec.test(params[k])) {
                p = params[k].substring(0,params[k].length-3);
                thevec = p;
            } else { p = params[k]; }
            if(p==='ret') haveret = true;
            fun.push(p);
        }
        fun[params.length] = '_s';
        fun[params.length+1] = '_k';
        fun[params.length+2] = (
                'if(typeof _s === "undefined") _s = numeric.dim('+thevec+');\n'+
                'if(typeof _k === "undefined") _k = 0;\n'+
                'var _n = _s[_k];\n'+
                'var i'+(haveret?'':', ret = Array(_n)')+';\n'+
                'if(_k < _s.length-1) {\n'+
                '    for(i=_n-1;i>=0;i--) ret[i] = arguments.callee('+params.join(',')+',_s,_k+1);\n'+
                '    return ret;\n'+
                '}\n'+
                setup+'\n'+
                'for(i=_n-1;i!==-1;--i) {\n'+
                '    '+body+'\n'+
                '}\n'+
                'return ret;'
                );
        return Function.apply(null,fun);
    }
    numeric.pointwise2 = function pointwise2(params,body,setup) {
        if(typeof setup === "undefined") { setup = ""; }
        var fun = [];
        var k;
        var avec = /\[i\]$/,p,thevec = '';
        var haveret = false;
        for(k=0;k<params.length;k++) {
            if(avec.test(params[k])) {
                p = params[k].substring(0,params[k].length-3);
                thevec = p;
            } else { p = params[k]; }
            if(p==='ret') haveret = true;
            fun.push(p);
        }
        fun[params.length] = (
                'var _n = '+thevec+'.length;\n'+
                'var i'+(haveret?'':', ret = Array(_n)')+';\n'+
                setup+'\n'+
                'for(i=_n-1;i!==-1;--i) {\n'+
                body+'\n'+
                '}\n'+
                'return ret;'
                );
        return Function.apply(null,fun);
    }
    numeric._biforeach = (function _biforeach(x,y,s,k,f) {
        if(k === s.length-1) { f(x,y); return; }
        var i,n=s[k];
        for(i=n-1;i>=0;i--) { _biforeach(typeof x==="object"?x[i]:x,typeof y==="object"?y[i]:y,s,k+1,f); }
    });
    numeric._biforeach2 = (function _biforeach2(x,y,s,k,f) {
        if(k === s.length-1) { return f(x,y); }
        var i,n=s[k],ret = Array(n);
        for(i=n-1;i>=0;--i) { ret[i] = _biforeach2(typeof x==="object"?x[i]:x,typeof y==="object"?y[i]:y,s,k+1,f); }
        return ret;
    });
    numeric._foreach = (function _foreach(x,s,k,f) {
        if(k === s.length-1) { f(x); return; }
        var i,n=s[k];
        for(i=n-1;i>=0;i--) { _foreach(x[i],s,k+1,f); }
    });
    numeric._foreach2 = (function _foreach2(x,s,k,f) {
        if(k === s.length-1) { return f(x); }
        var i,n=s[k], ret = Array(n);
        for(i=n-1;i>=0;i--) { ret[i] = _foreach2(x[i],s,k+1,f); }
        return ret;
    });
    
    /*numeric.anyV = numeric.mapreduce('if(xi) return true;','false');
    numeric.allV = numeric.mapreduce('if(!xi) return false;','true');
    numeric.any = function(x) { if(typeof x.length === "undefined") return x; return numeric.anyV(x); }
    numeric.all = function(x) { if(typeof x.length === "undefined") return x; return numeric.allV(x); }*/
    
    numeric.ops2 = {
            add: '+',
            sub: '-',
            mul: '*',
            div: '/',
            mod: '%',
            and: '&&',
            or:  '||',
            eq:  '===',
            neq: '!==',
            lt:  '<',
            gt:  '>',
            leq: '<=',
            geq: '>=',
            band: '&',
            bor: '|',
            bxor: '^',
            lshift: '<<',
            rshift: '>>',
            rrshift: '>>>'
    };
    numeric.opseq = {
            addeq: '+=',
            subeq: '-=',
            muleq: '*=',
            diveq: '/=',
            modeq: '%=',
            lshifteq: '<<=',
            rshifteq: '>>=',
            rrshifteq: '>>>=',
            bandeq: '&=',
            boreq: '|=',
            bxoreq: '^='
    };
    numeric.mathfuns = ['abs','acos','asin','atan','ceil','cos',
                        'exp','floor','log','round','sin','sqrt','tan',
                        'isNaN','isFinite'];
    numeric.mathfuns2 = ['atan2','pow','max','min'];
    numeric.ops1 = {
            neg: '-',
            not: '!',
            bnot: '~',
            clone: ''
    };
    numeric.mapreducers = {
            any: ['if(xi) return true;','var accum = false;'],
            all: ['if(!xi) return false;','var accum = true;'],
            sum: ['accum += xi;','var accum = 0;'],
            prod: ['accum *= xi;','var accum = 1;'],
            norm2Squared: ['accum += xi*xi;','var accum = 0;'],
            norminf: ['accum = max(accum,abs(xi));','var accum = 0, max = Math.max, abs = Math.abs;'],
            norm1: ['accum += abs(xi)','var accum = 0, abs = Math.abs;'],
            sup: ['accum = max(accum,xi);','var accum = -Infinity, max = Math.max;'],
            inf: ['accum = min(accum,xi);','var accum = Infinity, min = Math.min;']
    };
    
    (function () {
        var i,o;
        for(i=0;i<numeric.mathfuns2.length;++i) {
            o = numeric.mathfuns2[i];
            numeric.ops2[o] = o;
        }
        for(i in numeric.ops2) {
            if(numeric.ops2.hasOwnProperty(i)) {
                o = numeric.ops2[i];
                var code, codeeq, setup = '';
                if(numeric.myIndexOf.call(numeric.mathfuns2,i)!==-1) {
                    setup = 'var '+o+' = Math.'+o+';\n';
                    code = function(r,x,y) { return r+' = '+o+'('+x+','+y+')'; };
                    codeeq = function(x,y) { return x+' = '+o+'('+x+','+y+')'; };
                } else {
                    code = function(r,x,y) { return r+' = '+x+' '+o+' '+y; };
                    if(numeric.opseq.hasOwnProperty(i+'eq')) {
                        codeeq = function(x,y) { return x+' '+o+'= '+y; };
                    } else {
                        codeeq = function(x,y) { return x+' = '+x+' '+o+' '+y; };                    
                    }
                }
                numeric[i+'VV'] = numeric.pointwise2(['x[i]','y[i]'],code('ret[i]','x[i]','y[i]'),setup);
                numeric[i+'SV'] = numeric.pointwise2(['x','y[i]'],code('ret[i]','x','y[i]'),setup);
                numeric[i+'VS'] = numeric.pointwise2(['x[i]','y'],code('ret[i]','x[i]','y'),setup);
                numeric[i] = Function(
                        'var n = arguments.length, i, x = arguments[0], y;\n'+
                        'var VV = numeric.'+i+'VV, VS = numeric.'+i+'VS, SV = numeric.'+i+'SV;\n'+
                        'var dim = numeric.dim;\n'+
                        'for(i=1;i!==n;++i) { \n'+
                        '  y = arguments[i];\n'+
                        '  if(typeof x === "object") {\n'+
                        '      if(typeof y === "object") x = numeric._biforeach2(x,y,dim(x),0,VV);\n'+
                        '      else x = numeric._biforeach2(x,y,dim(x),0,VS);\n'+
                        '  } else if(typeof y === "object") x = numeric._biforeach2(x,y,dim(y),0,SV);\n'+
                        '  else '+codeeq('x','y')+'\n'+
                        '}\nreturn x;\n');
                numeric[o] = numeric[i];
                numeric[i+'eqV'] = numeric.pointwise2(['ret[i]','x[i]'], codeeq('ret[i]','x[i]'),setup);
                numeric[i+'eqS'] = numeric.pointwise2(['ret[i]','x'], codeeq('ret[i]','x'),setup);
                numeric[i+'eq'] = Function(
                        'var n = arguments.length, i, x = arguments[0], y;\n'+
                        'var V = numeric.'+i+'eqV, S = numeric.'+i+'eqS\n'+
                        'var s = numeric.dim(x);\n'+
                        'for(i=1;i!==n;++i) { \n'+
                        '  y = arguments[i];\n'+
                        '  if(typeof y === "object") numeric._biforeach(x,y,s,0,V);\n'+
                        '  else numeric._biforeach(x,y,s,0,S);\n'+
                        '}\nreturn x;\n');
            }
        }
        for(i=0;i<numeric.mathfuns2.length;++i) {
            o = numeric.mathfuns2[i];
            delete numeric.ops2[o];
        }
        for(i=0;i<numeric.mathfuns.length;++i) {
            o = numeric.mathfuns[i];
            numeric.ops1[o] = o;
        }
        for(i in numeric.ops1) {
            if(numeric.ops1.hasOwnProperty(i)) {
                setup = '';
                o = numeric.ops1[i];
                if(numeric.myIndexOf.call(numeric.mathfuns,i)!==-1) {
                    if(Math.hasOwnProperty(o)) setup = 'var '+o+' = Math.'+o+';\n';
                }
                numeric[i+'eqV'] = numeric.pointwise2(['ret[i]'],'ret[i] = '+o+'(ret[i]);',setup);
                numeric[i+'eq'] = Function('x',
                        'if(typeof x !== "object") return '+o+'x\n'+
                        'var i;\n'+
                        'var V = numeric.'+i+'eqV;\n'+
                        'var s = numeric.dim(x);\n'+
                        'numeric._foreach(x,s,0,V);\n'+
                        'return x;\n');
                numeric[i+'V'] = numeric.pointwise2(['x[i]'],'ret[i] = '+o+'(x[i]);',setup);
                numeric[i] = Function('x',
                        'if(typeof x !== "object") return '+o+'(x)\n'+
                        'var i;\n'+
                        'var V = numeric.'+i+'V;\n'+
                        'var s = numeric.dim(x);\n'+
                        'return numeric._foreach2(x,s,0,V);\n');
            }
        }
        for(i=0;i<numeric.mathfuns.length;++i) {
            o = numeric.mathfuns[i];
            delete numeric.ops1[o];
        }
        for(i in numeric.mapreducers) {
            if(numeric.mapreducers.hasOwnProperty(i)) {
                o = numeric.mapreducers[i];
                numeric[i+'V'] = numeric.mapreduce2(o[0],o[1]);
                numeric[i] = Function('x','s','k',
                        o[1]+
                        'if(typeof x !== "object") {'+
                        '    xi = x;\n'+
                        o[0]+';\n'+
                        '    return accum;\n'+
                        '}'+
                        'if(typeof s === "undefined") s = numeric.dim(x);\n'+
                        'if(typeof k === "undefined") k = 0;\n'+
                        'if(k === s.length-1) return numeric.'+i+'V(x);\n'+
                        'var xi;\n'+
                        'var n = x.length, i;\n'+
                        'for(i=n-1;i!==-1;--i) {\n'+
                        '   xi = arguments.callee(x[i]);\n'+
                        o[0]+';\n'+
                        '}\n'+
                        'return accum;\n');
            }
        }
    }());
    
    numeric.truncVV = numeric.pointwise(['x[i]','y[i]'],'ret[i] = round(x[i]/y[i])*y[i];','var round = Math.round;');
    numeric.truncVS = numeric.pointwise(['x[i]','y'],'ret[i] = round(x[i]/y)*y;','var round = Math.round;');
    numeric.truncSV = numeric.pointwise(['x','y[i]'],'ret[i] = round(x/y[i])*y[i];','var round = Math.round;');
    numeric.trunc = function trunc(x,y) {
        if(typeof x === "object") {
            if(typeof y === "object") return numeric.truncVV(x,y);
            return numeric.truncVS(x,y);
        }
        if (typeof y === "object") return numeric.truncSV(x,y);
        return Math.round(x/y)*y;
    }
    
    numeric.inv = function inv(x) {
        var s = numeric.dim(x), abs = Math.abs, m = s[0], n = s[1];
        var A = numeric.clone(x), Ai, Aj;
        var I = numeric.identity(m), Ii, Ij;
        var i,j,k,x;
        for(j=0;j<n;++j) {
            var i0 = -1;
            var v0 = -1;
            for(i=j;i!==m;++i) { k = abs(A[i][j]); if(k>v0) { i0 = i; v0 = k; } }
            Aj = A[i0]; A[i0] = A[j]; A[j] = Aj;
            Ij = I[i0]; I[i0] = I[j]; I[j] = Ij;
            x = Aj[j];
            for(k=j;k!==n;++k)    Aj[k] /= x; 
            for(k=n-1;k!==-1;--k) Ij[k] /= x;
            for(i=m-1;i!==-1;--i) {
                if(i!==j) {
                    Ai = A[i];
                    Ii = I[i];
                    x = Ai[j];
                    for(k=j+1;k!==n;++k)  Ai[k] -= Aj[k]*x;
                    for(k=n-1;k>0;--k) { Ii[k] -= Ij[k]*x; --k; Ii[k] -= Ij[k]*x; }
                    if(k===0) Ii[0] -= Ij[0]*x;
                }
            }
        }
        return I;
    }
    
    numeric.det = function det(x) {
        var s = numeric.dim(x);
        if(s.length !== 2 || s[0] !== s[1]) { throw new Error('numeric: det() only works on square matrices'); }
        var n = s[0], ret = 1,i,j,k,A = numeric.clone(x),Aj,Ai,alpha,temp,k1,k2,k3;
        for(j=0;j<n-1;j++) {
            k=j;
            for(i=j+1;i<n;i++) { if(Math.abs(A[i][j]) > Math.abs(A[k][j])) { k = i; } }
            if(k !== j) {
                temp = A[k]; A[k] = A[j]; A[j] = temp;
                ret *= -1;
            }
            Aj = A[j];
            for(i=j+1;i<n;i++) {
                Ai = A[i];
                alpha = Ai[j]/Aj[j];
                for(k=j+1;k<n-1;k+=2) {
                    k1 = k+1;
                    Ai[k] -= Aj[k]*alpha;
                    Ai[k1] -= Aj[k1]*alpha;
                }
                if(k!==n) { Ai[k] -= Aj[k]*alpha; }
            }
            if(Aj[j] === 0) { return 0; }
            ret *= Aj[j];
        }
        return ret*A[j][j];
    }
    
    numeric.transpose = function transpose(x) {
        var i,j,m = x.length,n = x[0].length, ret=Array(n),A0,A1,Bj;
        for(j=0;j<n;j++) ret[j] = Array(m);
        for(i=m-1;i>=1;i-=2) {
            A1 = x[i];
            A0 = x[i-1];
            for(j=n-1;j>=1;--j) {
                Bj = ret[j]; Bj[i] = A1[j]; Bj[i-1] = A0[j];
                --j;
                Bj = ret[j]; Bj[i] = A1[j]; Bj[i-1] = A0[j];
            }
            if(j===0) {
                Bj = ret[0]; Bj[i] = A1[0]; Bj[i-1] = A0[0];
            }
        }
        if(i===0) {
            A0 = x[0];
            for(j=n-1;j>=1;--j) {
                ret[j][0] = A0[j];
                --j;
                ret[j][0] = A0[j];
            }
            if(j===0) { ret[0][0] = A0[0]; }
        }
        return ret;
    }
    numeric.negtranspose = function negtranspose(x) {
        var i,j,m = x.length,n = x[0].length, ret=Array(n),A0,A1,Bj;
        for(j=0;j<n;j++) ret[j] = Array(m);
        for(i=m-1;i>=1;i-=2) {
            A1 = x[i];
            A0 = x[i-1];
            for(j=n-1;j>=1;--j) {
                Bj = ret[j]; Bj[i] = -A1[j]; Bj[i-1] = -A0[j];
                --j;
                Bj = ret[j]; Bj[i] = -A1[j]; Bj[i-1] = -A0[j];
            }
            if(j===0) {
                Bj = ret[0]; Bj[i] = -A1[0]; Bj[i-1] = -A0[0];
            }
        }
        if(i===0) {
            A0 = x[0];
            for(j=n-1;j>=1;--j) {
                ret[j][0] = -A0[j];
                --j;
                ret[j][0] = -A0[j];
            }
            if(j===0) { ret[0][0] = -A0[0]; }
        }
        return ret;
    }
    
    numeric._random = function _random(s,k) {
        var i,n=s[k],ret=Array(n), rnd;
        if(k === s.length-1) {
            rnd = Math.random;
            for(i=n-1;i>=1;i-=2) {
                ret[i] = rnd();
                ret[i-1] = rnd();
            }
            if(i===0) { ret[0] = rnd(); }
            return ret;
        }
        for(i=n-1;i>=0;i--) ret[i] = _random(s,k+1);
        return ret;
    }
    numeric.random = function random(s) { return numeric._random(s,0); }
    
    numeric.norm2 = function norm2(x) { return Math.sqrt(numeric.norm2Squared(x)); }
    
    numeric.linspace = function linspace(a,b,n) {
        if(typeof n === "undefined") n = Math.max(Math.round(b-a)+1,1);
        if(n<2) { return n===1?[a]:[]; }
        var i,ret = Array(n);
        n--;
        for(i=n;i>=0;i--) { ret[i] = (i*b+(n-i)*a)/n; }
        return ret;
    }
    
    numeric.getBlock = function getBlock(x,from,to) {
        var s = numeric.dim(x);
        function foo(x,k) {
            var i,a = from[k], n = to[k]-a, ret = Array(n);
            if(k === s.length-1) {
                for(i=n;i>=0;i--) { ret[i] = x[i+a]; }
                return ret;
            }
            for(i=n;i>=0;i--) { ret[i] = foo(x[i+a],k+1); }
            return ret;
        }
        return foo(x,0);
    }
    
    numeric.setBlock = function setBlock(x,from,to,B) {
        var s = numeric.dim(x);
        function foo(x,y,k) {
            var i,a = from[k], n = to[k]-a;
            if(k === s.length-1) { for(i=n;i>=0;i--) { x[i+a] = y[i]; } }
            for(i=n;i>=0;i--) { foo(x[i+a],y[i],k+1); }
        }
        foo(x,B,0);
        return x;
    }
    
    numeric.getRange = function getRange(A,I,J) {
        var m = I.length, n = J.length;
        var i,j;
        var B = Array(m), Bi, AI;
        for(i=m-1;i!==-1;--i) {
            B[i] = Array(n);
            Bi = B[i];
            AI = A[I[i]];
            for(j=n-1;j!==-1;--j) Bi[j] = AI[J[j]];
        }
        return B;
    }
    
    numeric.blockMatrix = function blockMatrix(X) {
        var s = numeric.dim(X);
        if(s.length<4) return numeric.blockMatrix([X]);
        var m=s[0],n=s[1],M,N,i,j,Xij;
        M = 0; N = 0;
        for(i=0;i<m;++i) M+=X[i][0].length;
        for(j=0;j<n;++j) N+=X[0][j][0].length;
        var Z = Array(M);
        for(i=0;i<M;++i) Z[i] = Array(N);
        var I=0,J,ZI,k,l,Xijk;
        for(i=0;i<m;++i) {
            J=N;
            for(j=n-1;j!==-1;--j) {
                Xij = X[i][j];
                J -= Xij[0].length;
                for(k=Xij.length-1;k!==-1;--k) {
                    Xijk = Xij[k];
                    ZI = Z[I+k];
                    for(l = Xijk.length-1;l!==-1;--l) ZI[J+l] = Xijk[l];
                }
            }
            I += X[i][0].length;
        }
        return Z;
    }
    
    numeric.tensor = function tensor(x,y) {
        if(typeof x === "number" || typeof y === "number") return numeric.mul(x,y);
        var s1 = numeric.dim(x), s2 = numeric.dim(y);
        if(s1.length !== 1 || s2.length !== 1) {
            throw new Error('numeric: tensor product is only defined for vectors');
        }
        var m = s1[0], n = s2[0], A = Array(m), Ai, i,j,xi;
        for(i=m-1;i>=0;i--) {
            Ai = Array(n);
            xi = x[i];
            for(j=n-1;j>=3;--j) {
                Ai[j] = xi * y[j];
                --j;
                Ai[j] = xi * y[j];
                --j;
                Ai[j] = xi * y[j];
                --j;
                Ai[j] = xi * y[j];
            }
            while(j>=0) { Ai[j] = xi * y[j]; --j; }
            A[i] = Ai;
        }
        return A;
    }
    
    // 3. The Tensor type T
    numeric.T = function T(x,y) { this.x = x; this.y = y; }
    numeric.t = function t(x,y) { return new numeric.T(x,y); }
    
    numeric.Tbinop = function Tbinop(rr,rc,cr,cc,setup) {
        var io = numeric.indexOf;
        if(typeof setup !== "string") {
            var k;
            setup = '';
            for(k in numeric) {
                if(numeric.hasOwnProperty(k) && (rr.indexOf(k)>=0 || rc.indexOf(k)>=0 || cr.indexOf(k)>=0 || cc.indexOf(k)>=0) && k.length>1) {
                    setup += 'var '+k+' = numeric.'+k+';\n';
                }
            }
        }
        return Function(['y'],
                'var x = this;\n'+
                'if(!(y instanceof numeric.T)) { y = new numeric.T(y); }\n'+
                setup+'\n'+
                'if(x.y) {'+
                '  if(y.y) {'+
                '    return new numeric.T('+cc+');\n'+
                '  }\n'+
                '  return new numeric.T('+cr+');\n'+
                '}\n'+
                'if(y.y) {\n'+
                '  return new numeric.T('+rc+');\n'+
                '}\n'+
                'return new numeric.T('+rr+');\n'
        );
    }
    
    numeric.T.prototype.add = numeric.Tbinop(
            'add(x.x,y.x)',
            'add(x.x,y.x),y.y',
            'add(x.x,y.x),x.y',
            'add(x.x,y.x),add(x.y,y.y)');
    numeric.T.prototype.sub = numeric.Tbinop(
            'sub(x.x,y.x)',
            'sub(x.x,y.x),neg(y.y)',
            'sub(x.x,y.x),x.y',
            'sub(x.x,y.x),sub(x.y,y.y)');
    numeric.T.prototype.mul = numeric.Tbinop(
            'mul(x.x,y.x)',
            'mul(x.x,y.x),mul(x.x,y.y)',
            'mul(x.x,y.x),mul(x.y,y.x)',
            'sub(mul(x.x,y.x),mul(x.y,y.y)),add(mul(x.x,y.y),mul(x.y,y.x))');
    
    numeric.T.prototype.reciprocal = function reciprocal() {
        var mul = numeric.mul, div = numeric.div;
        if(this.y) {
            var d = numeric.add(mul(this.x,this.x),mul(this.y,this.y));
            return new numeric.T(div(this.x,d),div(numeric.neg(this.y),d));
        }
        return new T(div(1,this.x));
    }
    numeric.T.prototype.div = function div(y) {
        if(!(y instanceof numeric.T)) y = new numeric.T(y);
        if(y.y) { return this.mul(y.reciprocal()); }
        var div = numeric.div;
        if(this.y) { return new numeric.T(div(this.x,y.x),div(this.y,y.x)); }
        return new numeric.T(div(this.x,y.x));
    }
    numeric.T.prototype.dot = numeric.Tbinop(
            'dot(x.x,y.x)',
            'dot(x.x,y.x),dot(x.x,y.y)',
            'dot(x.x,y.x),dot(x.y,y.x)',
            'sub(dot(x.x,y.x),dot(x.y,y.y)),add(dot(x.x,y.y),dot(x.y,y.x))'
            );
    numeric.T.prototype.transpose = function transpose() {
        var t = numeric.transpose, x = this.x, y = this.y;
        if(y) { return new numeric.T(t(x),t(y)); }
        return new numeric.T(t(x));
    }
    numeric.T.prototype.transjugate = function transjugate() {
        var t = numeric.transpose, x = this.x, y = this.y;
        if(y) { return new numeric.T(t(x),numeric.negtranspose(y)); }
        return new numeric.T(t(x));
    }
    numeric.Tunop = function Tunop(r,c,s) {
        if(typeof s !== "string") { s = ''; }
        return Function(
                'var x = this;\n'+
                s+'\n'+
                'if(x.y) {'+
                '  '+c+';\n'+
                '}\n'+
                r+';\n'
        );
    }
    
    numeric.T.prototype.exp = numeric.Tunop(
            'return new numeric.T(ex)',
            'return new numeric.T(mul(cos(x.y),ex),mul(sin(x.y),ex))',
            'var ex = numeric.exp(x.x), cos = numeric.cos, sin = numeric.sin, mul = numeric.mul;');
    numeric.T.prototype.conj = numeric.Tunop(
            'return new numeric.T(x.x);',
            'return new numeric.T(x.x,numeric.neg(x.y));');
    numeric.T.prototype.neg = numeric.Tunop(
            'return new numeric.T(neg(x.x));',
            'return new numeric.T(neg(x.x),neg(x.y));',
            'var neg = numeric.neg;');
    numeric.T.prototype.sin = numeric.Tunop(
            'return new numeric.T(numeric.sin(x.x))',
            'return x.exp().sub(x.neg().exp()).div(new numeric.T(0,2));');
    numeric.T.prototype.cos = numeric.Tunop(
            'return new numeric.T(numeric.cos(x.x))',
            'return x.exp().add(x.neg().exp()).div(2);');
    numeric.T.prototype.abs = numeric.Tunop(
            'return new numeric.T(numeric.abs(x.x));',
            'return new numeric.T(numeric.sqrt(numeric.add(mul(x.x,x.x),mul(x.y,x.y))));',
            'var mul = numeric.mul;');
    numeric.T.prototype.log = numeric.Tunop(
            'return new numeric.T(numeric.log(x.x));',
            'var theta = new numeric.T(numeric.atan2(x.y,x.x)), r = x.abs();\n'+
            'return new numeric.T(numeric.log(r.x),theta.x);');
    numeric.T.prototype.norm2 = numeric.Tunop(
            'return numeric.norm2(x.x);',
            'var f = numeric.norm2Squared;\n'+
            'return Math.sqrt(f(x.x)+f(x.y));');
    numeric.T.prototype.inv = function inv() {
        var A = this;
        if(typeof A.y === "undefined") { return new numeric.T(numeric.inv(A.x)); }
        var n = A.x.length, i, j, k;
        var Rx = numeric.identity(n),Ry = numeric.rep([n,n],0);
        var Ax = numeric.clone(A.x), Ay = numeric.clone(A.y);
        var Aix, Aiy, Ajx, Ajy, Rix, Riy, Rjx, Rjy;
        var i,j,k,d,d1,ax,ay,bx,by,temp;
        for(i=0;i<n;i++) {
            ax = Ax[i][i]; ay = Ay[i][i];
            d = ax*ax+ay*ay;
            k = i;
            for(j=i+1;j<n;j++) {
                ax = Ax[j][i]; ay = Ay[j][i];
                d1 = ax*ax+ay*ay;
                if(d1 > d) { k=j; d = d1; }
            }
            if(k!==i) {
                temp = Ax[i]; Ax[i] = Ax[k]; Ax[k] = temp;
                temp = Ay[i]; Ay[i] = Ay[k]; Ay[k] = temp;
                temp = Rx[i]; Rx[i] = Rx[k]; Rx[k] = temp;
                temp = Ry[i]; Ry[i] = Ry[k]; Ry[k] = temp;
            }
            Aix = Ax[i]; Aiy = Ay[i];
            Rix = Rx[i]; Riy = Ry[i];
            ax = Aix[i]; ay = Aiy[i];
            for(j=i+1;j<n;j++) {
                bx = Aix[j]; by = Aiy[j];
                Aix[j] = (bx*ax+by*ay)/d;
                Aiy[j] = (by*ax-bx*ay)/d;
            }
            for(j=0;j<n;j++) {
                bx = Rix[j]; by = Riy[j];
                Rix[j] = (bx*ax+by*ay)/d;
                Riy[j] = (by*ax-bx*ay)/d;
            }
            for(j=i+1;j<n;j++) {
                Ajx = Ax[j]; Ajy = Ay[j];
                Rjx = Rx[j]; Rjy = Ry[j];
                ax = Ajx[i]; ay = Ajy[i];
                for(k=i+1;k<n;k++) {
                    bx = Aix[k]; by = Aiy[k];
                    Ajx[k] -= bx*ax-by*ay;
                    Ajy[k] -= by*ax+bx*ay;
                }
                for(k=0;k<n;k++) {
                    bx = Rix[k]; by = Riy[k];
                    Rjx[k] -= bx*ax-by*ay;
                    Rjy[k] -= by*ax+bx*ay;
                }
            }
        }
        for(i=n-1;i>0;i--) {
            Rix = Rx[i]; Riy = Ry[i];
            for(j=i-1;j>=0;j--) {
                Rjx = Rx[j]; Rjy = Ry[j];
                ax = Ax[j][i]; ay = Ay[j][i];
                for(k=n-1;k>=0;k--) {
                    bx = Rix[k]; by = Riy[k];
                    Rjx[k] -= ax*bx - ay*by;
                    Rjy[k] -= ax*by + ay*bx;
                }
            }
        }
        return new numeric.T(Rx,Ry);
    }
    numeric.T.prototype.get = function get(i) {
        var x = this.x, y = this.y, k = 0, ik, n = i.length;
        if(y) {
            while(k<n) {
                ik = i[k];
                x = x[ik];
                y = y[ik];
                k++;
            }
            return new numeric.T(x,y);
        }
        while(k<n) {
            ik = i[k];
            x = x[ik];
            k++;
        }
        return new numeric.T(x);
    }
    numeric.T.prototype.set = function set(i,v) {
        var x = this.x, y = this.y, k = 0, ik, n = i.length, vx = v.x, vy = v.y;
        if(n===0) {
            if(vy) { this.y = vy; }
            else if(y) { this.y = undefined; }
            this.x = x;
            return this;
        }
        if(vy) {
            if(y) { /* ok */ }
            else {
                y = numeric.rep(numeric.dim(x),0);
                this.y = y;
            }
            while(k<n-1) {
                ik = i[k];
                x = x[ik];
                y = y[ik];
                k++;
            }
            ik = i[k];
            x[ik] = vx;
            y[ik] = vy;
            return this;
        }
        if(y) {
            while(k<n-1) {
                ik = i[k];
                x = x[ik];
                y = y[ik];
                k++;
            }
            ik = i[k];
            x[ik] = vx;
            if(vx instanceof Array) y[ik] = numeric.rep(numeric.dim(vx),0);
            else y[ik] = 0;
            return this;
        }
        while(k<n-1) {
            ik = i[k];
            x = x[ik];
            k++;
        }
        ik = i[k];
        x[ik] = vx;
        return this;
    }
    numeric.T.prototype.getRows = function getRows(i0,i1) {
        var n = i1-i0+1, j;
        var rx = Array(n), ry, x = this.x, y = this.y;
        for(j=i0;j<=i1;j++) { rx[j-i0] = x[j]; }
        if(y) {
            ry = Array(n);
            for(j=i0;j<=i1;j++) { ry[j-i0] = y[j]; }
            return new numeric.T(rx,ry);
        }
        return new numeric.T(rx);
    }
    numeric.T.prototype.setRows = function setRows(i0,i1,A) {
        var j;
        var rx = this.x, ry = this.y, x = A.x, y = A.y;
        for(j=i0;j<=i1;j++) { rx[j] = x[j-i0]; }
        if(y) {
            if(!ry) { ry = numeric.rep(numeric.dim(rx),0); this.y = ry; }
            for(j=i0;j<=i1;j++) { ry[j] = y[j-i0]; }
        } else if(ry) {
            for(j=i0;j<=i1;j++) { ry[j] = numeric.rep([x[j-i0].length],0); }
        }
        return this;
    }
    numeric.T.prototype.getRow = function getRow(k) {
        var x = this.x, y = this.y;
        if(y) { return new numeric.T(x[k],y[k]); }
        return new numeric.T(x[k]);
    }
    numeric.T.prototype.setRow = function setRow(i,v) {
        var rx = this.x, ry = this.y, x = v.x, y = v.y;
        rx[i] = x;
        if(y) {
            if(!ry) { ry = numeric.rep(numeric.dim(rx),0); this.y = ry; }
            ry[i] = y;
        } else if(ry) {
            ry = numeric.rep([x.length],0);
        }
        return this;
    }
    
    numeric.T.prototype.getBlock = function getBlock(from,to) {
        var x = this.x, y = this.y, b = numeric.getBlock;
        if(y) { return new numeric.T(b(x,from,to),b(y,from,to)); }
        return new numeric.T(b(x,from,to));
    }
    numeric.T.prototype.setBlock = function setBlock(from,to,A) {
        if(!(A instanceof numeric.T)) A = new numeric.T(A);
        var x = this.x, y = this.y, b = numeric.setBlock, Ax = A.x, Ay = A.y;
        if(Ay) {
            if(!y) { this.y = numeric.rep(numeric.dim(this),0); y = this.y; }
            b(x,from,to,Ax);
            b(y,from,to,Ay);
            return this;
        }
        b(x,from,to,Ax);
        if(y) b(y,from,to,numeric.rep(numeric.dim(Ax),0));
    }
    numeric.T.rep = function rep(s,v) {
        var T = numeric.T;
        if(!(v instanceof T)) v = new T(v);
        var x = v.x, y = v.y, r = numeric.rep;
        if(y) return new T(r(s,x),r(s,y));
        return new T(r(s,x));
    }
    numeric.T.diag = function diag(d) {
        if(!(d instanceof numeric.T)) d = new numeric.T(d);
        var x = d.x, y = d.y, diag = numeric.diag;
        if(y) return new numeric.T(diag(x),diag(y));
        return new numeric.T(diag(x));
    }
    numeric.T.eig = function eig() {
        if(this.y) { throw new Error('eig: not implemented for complex matrices.'); }
        return numeric.eig(this.x);
    }
    numeric.T.identity = function identity(n) { return new numeric.T(numeric.identity(n)); }
    numeric.T.prototype.getDiag = function getDiag() {
        var n = numeric;
        var x = this.x, y = this.y;
        if(y) { return new n.T(n.getDiag(x),n.getDiag(y)); }
        return new n.T(n.getDiag(x));
    }
    
    // 4. Eigenvalues of real matrices
    
    numeric.house = function house(x) {
        var v = numeric.clone(x);
        var s = x[0] >= 0 ? 1 : -1;
        var alpha = s*numeric.norm2(x);
        v[0] += alpha;
        var foo = numeric.norm2(v);
        if(foo === 0) { /* this should not happen */ throw new Error('eig: internal error'); }
        return numeric.div(v,foo);
    }
    
    numeric.toUpperHessenberg = function toUpperHessenberg(me) {
        var s = numeric.dim(me);
        if(s.length !== 2 || s[0] !== s[1]) { throw new Error('numeric: toUpperHessenberg() only works on square matrices'); }
        var m = s[0], i,j,k,x,v,A = numeric.clone(me),B,C,Ai,Ci,Q = numeric.identity(m),Qi;
        for(j=0;j<m-2;j++) {
            x = Array(m-j-1);
            for(i=j+1;i<m;i++) { x[i-j-1] = A[i][j]; }
            if(numeric.norm2(x)>0) {
                v = numeric.house(x);
                B = numeric.getBlock(A,[j+1,j],[m-1,m-1]);
                C = numeric.tensor(v,numeric.dot(v,B));
                for(i=j+1;i<m;i++) { Ai = A[i]; Ci = C[i-j-1]; for(k=j;k<m;k++) Ai[k] -= 2*Ci[k-j]; }
                B = numeric.getBlock(A,[0,j+1],[m-1,m-1]);
                C = numeric.tensor(numeric.dot(B,v),v);
                for(i=0;i<m;i++) { Ai = A[i]; Ci = C[i]; for(k=j+1;k<m;k++) Ai[k] -= 2*Ci[k-j-1]; }
                B = Array(m-j-1);
                for(i=j+1;i<m;i++) B[i-j-1] = Q[i];
                C = numeric.tensor(v,numeric.dot(v,B));
                for(i=j+1;i<m;i++) { Qi = Q[i]; Ci = C[i-j-1]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }
            }
        }
        return {H:A, Q:Q};
    }
    
    numeric.epsilon = 2.220446049250313e-16;
    
    numeric.QRFrancis = function(H,maxiter) {
        if(typeof maxiter === "undefined") { maxiter = 10000; }
        H = numeric.clone(H);
        var H0 = numeric.clone(H);
        var s = numeric.dim(H),m=s[0],x,v,a,b,c,d,det,tr, Hloc, Q = numeric.identity(m), Qi, Hi, B, C, Ci,i,j,k,iter;
        if(m<3) { return {Q:Q, B:[ [0,m-1] ]}; }
        var epsilon = numeric.epsilon;
        for(iter=0;iter<maxiter;iter++) {
            for(j=0;j<m-1;j++) {
                if(Math.abs(H[j+1][j]) < epsilon*(Math.abs(H[j][j])+Math.abs(H[j+1][j+1]))) {
                    var QH1 = numeric.QRFrancis(numeric.getBlock(H,[0,0],[j,j]),maxiter);
                    var QH2 = numeric.QRFrancis(numeric.getBlock(H,[j+1,j+1],[m-1,m-1]),maxiter);
                    B = Array(j+1);
                    for(i=0;i<=j;i++) { B[i] = Q[i]; }
                    C = numeric.dot(QH1.Q,B);
                    for(i=0;i<=j;i++) { Q[i] = C[i]; }
                    B = Array(m-j-1);
                    for(i=j+1;i<m;i++) { B[i-j-1] = Q[i]; }
                    C = numeric.dot(QH2.Q,B);
                    for(i=j+1;i<m;i++) { Q[i] = C[i-j-1]; }
                    return {Q:Q,B:QH1.B.concat(numeric.add(QH2.B,j+1))};
                }
            }
            a = H[m-2][m-2]; b = H[m-2][m-1];
            c = H[m-1][m-2]; d = H[m-1][m-1];
            tr = a+d;
            det = (a*d-b*c);
            Hloc = numeric.getBlock(H, [0,0], [2,2]);
            if(tr*tr>=4*det) {
                var s1,s2;
                s1 = 0.5*(tr+Math.sqrt(tr*tr-4*det));
                s2 = 0.5*(tr-Math.sqrt(tr*tr-4*det));
                Hloc = numeric.add(numeric.sub(numeric.dot(Hloc,Hloc),
                                               numeric.mul(Hloc,s1+s2)),
                                   numeric.diag(numeric.rep([3],s1*s2)));
            } else {
                Hloc = numeric.add(numeric.sub(numeric.dot(Hloc,Hloc),
                                               numeric.mul(Hloc,tr)),
                                   numeric.diag(numeric.rep([3],det)));
            }
            x = [Hloc[0][0],Hloc[1][0],Hloc[2][0]];
            v = numeric.house(x);
            B = [H[0],H[1],H[2]];
            C = numeric.tensor(v,numeric.dot(v,B));
            for(i=0;i<3;i++) { Hi = H[i]; Ci = C[i]; for(k=0;k<m;k++) Hi[k] -= 2*Ci[k]; }
            B = numeric.getBlock(H, [0,0],[m-1,2]);
            C = numeric.tensor(numeric.dot(B,v),v);
            for(i=0;i<m;i++) { Hi = H[i]; Ci = C[i]; for(k=0;k<3;k++) Hi[k] -= 2*Ci[k]; }
            B = [Q[0],Q[1],Q[2]];
            C = numeric.tensor(v,numeric.dot(v,B));
            for(i=0;i<3;i++) { Qi = Q[i]; Ci = C[i]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }
            var J;
            for(j=0;j<m-2;j++) {
                for(k=j;k<=j+1;k++) {
                    if(Math.abs(H[k+1][k]) < epsilon*(Math.abs(H[k][k])+Math.abs(H[k+1][k+1]))) {
                        var QH1 = numeric.QRFrancis(numeric.getBlock(H,[0,0],[k,k]),maxiter);
                        var QH2 = numeric.QRFrancis(numeric.getBlock(H,[k+1,k+1],[m-1,m-1]),maxiter);
                        B = Array(k+1);
                        for(i=0;i<=k;i++) { B[i] = Q[i]; }
                        C = numeric.dot(QH1.Q,B);
                        for(i=0;i<=k;i++) { Q[i] = C[i]; }
                        B = Array(m-k-1);
                        for(i=k+1;i<m;i++) { B[i-k-1] = Q[i]; }
                        C = numeric.dot(QH2.Q,B);
                        for(i=k+1;i<m;i++) { Q[i] = C[i-k-1]; }
                        return {Q:Q,B:QH1.B.concat(numeric.add(QH2.B,k+1))};
                    }
                }
                J = Math.min(m-1,j+3);
                x = Array(J-j);
                for(i=j+1;i<=J;i++) { x[i-j-1] = H[i][j]; }
                v = numeric.house(x);
                B = numeric.getBlock(H, [j+1,j],[J,m-1]);
                C = numeric.tensor(v,numeric.dot(v,B));
                for(i=j+1;i<=J;i++) { Hi = H[i]; Ci = C[i-j-1]; for(k=j;k<m;k++) Hi[k] -= 2*Ci[k-j]; }
                B = numeric.getBlock(H, [0,j+1],[m-1,J]);
                C = numeric.tensor(numeric.dot(B,v),v);
                for(i=0;i<m;i++) { Hi = H[i]; Ci = C[i]; for(k=j+1;k<=J;k++) Hi[k] -= 2*Ci[k-j-1]; }
                B = Array(J-j);
                for(i=j+1;i<=J;i++) B[i-j-1] = Q[i];
                C = numeric.tensor(v,numeric.dot(v,B));
                for(i=j+1;i<=J;i++) { Qi = Q[i]; Ci = C[i-j-1]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }
            }
        }
        throw new Error('numeric: eigenvalue iteration does not converge -- increase maxiter?');
    }
    
    numeric.eig = function eig(A,maxiter) {
        var QH = numeric.toUpperHessenberg(A);
        var QB = numeric.QRFrancis(QH.H,maxiter);
        var T = numeric.T;
        var n = A.length,i,k,flag = false,B = QB.B,H = numeric.dot(QB.Q,numeric.dot(QH.H,numeric.transpose(QB.Q)));
        var Q = new T(numeric.dot(QB.Q,QH.Q)),Q0;
        var m = B.length,j;
        var a,b,c,d,p1,p2,disc,x,y,p,q,n1,n2;
        var sqrt = Math.sqrt;
        for(k=0;k<m;k++) {
            i = B[k][0];
            if(i === B[k][1]) {
                // nothing
            } else {
                j = i+1;
                a = H[i][i];
                b = H[i][j];
                c = H[j][i];
                d = H[j][j];
                if(b === 0 && c === 0) continue;
                p1 = -a-d;
                p2 = a*d-b*c;
                disc = p1*p1-4*p2;
                if(disc>=0) {
                    if(p1<0) x = -0.5*(p1-sqrt(disc));
                    else     x = -0.5*(p1+sqrt(disc));
                    n1 = (a-x)*(a-x)+b*b;
                    n2 = c*c+(d-x)*(d-x);
                    if(n1>n2) {
                        n1 = sqrt(n1);
                        p = (a-x)/n1;
                        q = b/n1;
                    } else {
                        n2 = sqrt(n2);
                        p = c/n2;
                        q = (d-x)/n2;
                    }
                    Q0 = new T([[q,-p],[p,q]]);
                    Q.setRows(i,j,Q0.dot(Q.getRows(i,j)));
                } else {
                    x = -0.5*p1;
                    y = 0.5*sqrt(-disc);
                    n1 = (a-x)*(a-x)+b*b;
                    n2 = c*c+(d-x)*(d-x);
                    if(n1>n2) {
                        n1 = sqrt(n1+y*y);
                        p = (a-x)/n1;
                        q = b/n1;
                        x = 0;
                        y /= n1;
                    } else {
                        n2 = sqrt(n2+y*y);
                        p = c/n2;
                        q = (d-x)/n2;
                        x = y/n2;
                        y = 0;
                    }
                    Q0 = new T([[q,-p],[p,q]],[[x,y],[y,-x]]);
                    Q.setRows(i,j,Q0.dot(Q.getRows(i,j)));
                }
            }
        }
        var R = Q.dot(A).dot(Q.transjugate()), n = A.length, E = numeric.T.identity(n);
        for(j=0;j<n;j++) {
            if(j>0) {
                for(k=j-1;k>=0;k--) {
                    var Rk = R.get([k,k]), Rj = R.get([j,j]);
                    if(numeric.neq(Rk.x,Rj.x) || numeric.neq(Rk.y,Rj.y)) {
                        x = R.getRow(k).getBlock([k],[j-1]);
                        y = E.getRow(j).getBlock([k],[j-1]);
                        E.set([j,k],(R.get([k,j]).neg().sub(x.dot(y))).div(Rk.sub(Rj)));
                    } else {
                        E.setRow(j,E.getRow(k));
                        continue;
                    }
                }
            }
        }
        for(j=0;j<n;j++) {
            x = E.getRow(j);
            E.setRow(j,x.div(x.norm2()));
        }
        E = E.transpose();
        E = Q.transjugate().dot(E);
        return { lambda:R.getDiag(), E:E };
    };
    
    // 5. Compressed Column Storage matrices
    numeric.ccsSparse = function ccsSparse(A) {
        var m = A.length,n,foo, i,j, counts = [];
        for(i=m-1;i!==-1;--i) {
            foo = A[i];
            for(j in foo) {
                j = parseInt(j);
                while(j>=counts.length) counts[counts.length] = 0;
                if(foo[j]!==0) counts[j]++;
            }
        }
        var n = counts.length;
        var Ai = Array(n+1);
        Ai[0] = 0;
        for(i=0;i<n;++i) Ai[i+1] = Ai[i] + counts[i];
        var Aj = Array(Ai[n]), Av = Array(Ai[n]);
        for(i=m-1;i!==-1;--i) {
            foo = A[i];
            for(j in foo) {
                if(foo[j]!==0) {
                    counts[j]--;
                    Aj[Ai[j]+counts[j]] = i;
                    Av[Ai[j]+counts[j]] = foo[j];
                }
            }
        }
        return [Ai,Aj,Av];
    }
    numeric.ccsFull = function ccsFull(A) {
        var Ai = A[0], Aj = A[1], Av = A[2], s = numeric.ccsDim(A), m = s[0], n = s[1], i,j,j0,j1,k;
        var B = numeric.rep([m,n],0);
        for(i=0;i<n;i++) {
            j0 = Ai[i];
            j1 = Ai[i+1];
            for(j=j0;j<j1;++j) { B[Aj[j]][i] = Av[j]; }
        }
        return B;
    }
    numeric.ccsTSolve = function ccsTSolve(A,b,x,bj,xj) {
        var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, max = Math.max,n=0;
        if(typeof bj === "undefined") x = numeric.rep([m],0);
        if(typeof bj === "undefined") bj = numeric.linspace(0,x.length-1);
        if(typeof xj === "undefined") xj = [];
        function dfs(j) {
            var k;
            if(x[j] !== 0) return;
            x[j] = 1;
            for(k=Ai[j];k<Ai[j+1];++k) dfs(Aj[k]);
            xj[n] = j;
            ++n;
        }
        var i,j,j0,j1,k,l,l0,l1,a;
        for(i=bj.length-1;i!==-1;--i) { dfs(bj[i]); }
        xj.length = n;
        for(i=xj.length-1;i!==-1;--i) { x[xj[i]] = 0; }
        for(i=bj.length-1;i!==-1;--i) { j = bj[i]; x[j] = b[j]; }
        for(i=xj.length-1;i!==-1;--i) {
            j = xj[i];
            j0 = Ai[j];
            j1 = max(Ai[j+1],j0);
            for(k=j0;k!==j1;++k) { if(Aj[k] === j) { x[j] /= Av[k]; break; } }
            a = x[j];
            for(k=j0;k!==j1;++k) {
                l = Aj[k];
                if(l !== j) x[l] -= a*Av[k];
            }
        }
        return x;
    }
    numeric.ccsDFS = function ccsDFS(n) {
        this.k = Array(n);
        this.k1 = Array(n);
        this.j = Array(n);
    }
    numeric.ccsDFS.prototype.dfs = function dfs(J,Ai,Aj,x,xj,Pinv) {
        var m = 0,foo,n=xj.length;
        var k = this.k, k1 = this.k1, j = this.j,km,k11;
        if(x[J]!==0) return;
        x[J] = 1;
        j[0] = J;
        k[0] = km = Ai[J];
        k1[0] = k11 = Ai[J+1];
        while(1) {
            if(km >= k11) {
                xj[n] = j[m];
                if(m===0) return;
                ++n;
                --m;
                km = k[m];
                k11 = k1[m];
            } else {
                foo = Pinv[Aj[km]];
                if(x[foo] === 0) {
                    x[foo] = 1;
                    k[m] = km;
                    ++m;
                    j[m] = foo;
                    km = Ai[foo];
                    k1[m] = k11 = Ai[foo+1];
                } else ++km;
            }
        }
    }
    numeric.ccsLPSolve = function ccsLPSolve(A,B,x,xj,I,Pinv,dfs) {
        var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, n=0;
        var Bi = B[0], Bj = B[1], Bv = B[2];
        
        var i,i0,i1,j,J,j0,j1,k,l,l0,l1,a;
        i0 = Bi[I];
        i1 = Bi[I+1];
        xj.length = 0;
        for(i=i0;i<i1;++i) { dfs.dfs(Pinv[Bj[i]],Ai,Aj,x,xj,Pinv); }
        for(i=xj.length-1;i!==-1;--i) { x[xj[i]] = 0; }
        for(i=i0;i!==i1;++i) { j = Pinv[Bj[i]]; x[j] = Bv[i]; }
        for(i=xj.length-1;i!==-1;--i) {
            j = xj[i];
            j0 = Ai[j];
            j1 = Ai[j+1];
            for(k=j0;k<j1;++k) { if(Pinv[Aj[k]] === j) { x[j] /= Av[k]; break; } }
            a = x[j];
            for(k=j0;k<j1;++k) {
                l = Pinv[Aj[k]];
                if(l !== j) x[l] -= a*Av[k];
            }
        }
        return x;
    }
    numeric.ccsLUP1 = function ccsLUP1(A,threshold) {
        var m = A[0].length-1;
        var L = [numeric.rep([m+1],0),[],[]], U = [numeric.rep([m+1], 0),[],[]];
        var Li = L[0], Lj = L[1], Lv = L[2], Ui = U[0], Uj = U[1], Uv = U[2];
        var x = numeric.rep([m],0), xj = numeric.rep([m],0);
        var i,j,k,j0,j1,a,e,c,d,K;
        var sol = numeric.ccsLPSolve, max = Math.max, abs = Math.abs;
        var P = numeric.linspace(0,m-1),Pinv = numeric.linspace(0,m-1);
        var dfs = new numeric.ccsDFS(m);
        if(typeof threshold === "undefined") { threshold = 1; }
        for(i=0;i<m;++i) {
            sol(L,A,x,xj,i,Pinv,dfs);
            a = -1;
            e = -1;
            for(j=xj.length-1;j!==-1;--j) {
                k = xj[j];
                if(k <= i) continue;
                c = abs(x[k]);
                if(c > a) { e = k; a = c; }
            }
            if(abs(x[i])<threshold*a) {
                j = P[i];
                a = P[e];
                P[i] = a; Pinv[a] = i;
                P[e] = j; Pinv[j] = e;
                a = x[i]; x[i] = x[e]; x[e] = a;
            }
            a = Li[i];
            e = Ui[i];
            d = x[i];
            Lj[a] = P[i];
            Lv[a] = 1;
            ++a;
            for(j=xj.length-1;j!==-1;--j) {
                k = xj[j];
                c = x[k];
                xj[j] = 0;
                x[k] = 0;
                if(k<=i) { Uj[e] = k; Uv[e] = c;   ++e; }
                else     { Lj[a] = P[k]; Lv[a] = c/d; ++a; }
            }
            Li[i+1] = a;
            Ui[i+1] = e;
        }
        for(j=Lj.length-1;j!==-1;--j) { Lj[j] = Pinv[Lj[j]]; }
        return {L:L, U:U, P:P, Pinv:Pinv};
    }
    numeric.ccsDFS0 = function ccsDFS0(n) {
        this.k = Array(n);
        this.k1 = Array(n);
        this.j = Array(n);
    }
    numeric.ccsDFS0.prototype.dfs = function dfs(J,Ai,Aj,x,xj,Pinv,P) {
        var m = 0,foo,n=xj.length;
        var k = this.k, k1 = this.k1, j = this.j,km,k11;
        if(x[J]!==0) return;
        x[J] = 1;
        j[0] = J;
        k[0] = km = Ai[Pinv[J]];
        k1[0] = k11 = Ai[Pinv[J]+1];
        while(1) {
            if(isNaN(km)) throw new Error("Ow!");
            if(km >= k11) {
                xj[n] = Pinv[j[m]];
                if(m===0) return;
                ++n;
                --m;
                km = k[m];
                k11 = k1[m];
            } else {
                foo = Aj[km];
                if(x[foo] === 0) {
                    x[foo] = 1;
                    k[m] = km;
                    ++m;
                    j[m] = foo;
                    foo = Pinv[foo];
                    km = Ai[foo];
                    k1[m] = k11 = Ai[foo+1];
                } else ++km;
            }
        }
    }
    numeric.ccsLPSolve0 = function ccsLPSolve0(A,B,y,xj,I,Pinv,P,dfs) {
        var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, n=0;
        var Bi = B[0], Bj = B[1], Bv = B[2];
        
        var i,i0,i1,j,J,j0,j1,k,l,l0,l1,a;
        i0 = Bi[I];
        i1 = Bi[I+1];
        xj.length = 0;
        for(i=i0;i<i1;++i) { dfs.dfs(Bj[i],Ai,Aj,y,xj,Pinv,P); }
        for(i=xj.length-1;i!==-1;--i) { j = xj[i]; y[P[j]] = 0; }
        for(i=i0;i!==i1;++i) { j = Bj[i]; y[j] = Bv[i]; }
        for(i=xj.length-1;i!==-1;--i) {
            j = xj[i];
            l = P[j];
            j0 = Ai[j];
            j1 = Ai[j+1];
            for(k=j0;k<j1;++k) { if(Aj[k] === l) { y[l] /= Av[k]; break; } }
            a = y[l];
            for(k=j0;k<j1;++k) y[Aj[k]] -= a*Av[k];
            y[l] = a;
        }
    }
    numeric.ccsLUP0 = function ccsLUP0(A,threshold) {
        var m = A[0].length-1;
        var L = [numeric.rep([m+1],0),[],[]], U = [numeric.rep([m+1], 0),[],[]];
        var Li = L[0], Lj = L[1], Lv = L[2], Ui = U[0], Uj = U[1], Uv = U[2];
        var y = numeric.rep([m],0), xj = numeric.rep([m],0);
        var i,j,k,j0,j1,a,e,c,d,K;
        var sol = numeric.ccsLPSolve0, max = Math.max, abs = Math.abs;
        var P = numeric.linspace(0,m-1),Pinv = numeric.linspace(0,m-1);
        var dfs = new numeric.ccsDFS0(m);
        if(typeof threshold === "undefined") { threshold = 1; }
        for(i=0;i<m;++i) {
            sol(L,A,y,xj,i,Pinv,P,dfs);
            a = -1;
            e = -1;
            for(j=xj.length-1;j!==-1;--j) {
                k = xj[j];
                if(k <= i) continue;
                c = abs(y[P[k]]);
                if(c > a) { e = k; a = c; }
            }
            if(abs(y[P[i]])<threshold*a) {
                j = P[i];
                a = P[e];
                P[i] = a; Pinv[a] = i;
                P[e] = j; Pinv[j] = e;
            }
            a = Li[i];
            e = Ui[i];
            d = y[P[i]];
            Lj[a] = P[i];
            Lv[a] = 1;
            ++a;
            for(j=xj.length-1;j!==-1;--j) {
                k = xj[j];
                c = y[P[k]];
                xj[j] = 0;
                y[P[k]] = 0;
                if(k<=i) { Uj[e] = k; Uv[e] = c;   ++e; }
                else     { Lj[a] = P[k]; Lv[a] = c/d; ++a; }
            }
            Li[i+1] = a;
            Ui[i+1] = e;
        }
        for(j=Lj.length-1;j!==-1;--j) { Lj[j] = Pinv[Lj[j]]; }
        return {L:L, U:U, P:P, Pinv:Pinv};
    }
    numeric.ccsLUP = numeric.ccsLUP0;
    
    numeric.ccsDim = function ccsDim(A) { return [numeric.sup(A[1])+1,A[0].length-1]; }
    numeric.ccsGetBlock = function ccsGetBlock(A,i,j) {
        var s = numeric.ccsDim(A),m=s[0],n=s[1];
        if(typeof i === "undefined") { i = numeric.linspace(0,m-1); }
        else if(typeof i === "number") { i = [i]; }
        if(typeof j === "undefined") { j = numeric.linspace(0,n-1); }
        else if(typeof j === "number") { j = [j]; }
        var p,p0,p1,P = i.length,q,Q = j.length,r,jq,ip;
        var Bi = numeric.rep([n],0), Bj=[], Bv=[], B = [Bi,Bj,Bv];
        var Ai = A[0], Aj = A[1], Av = A[2];
        var x = numeric.rep([m],0),count=0,flags = numeric.rep([m],0);
        for(q=0;q<Q;++q) {
            jq = j[q];
            var q0 = Ai[jq];
            var q1 = Ai[jq+1];
            for(p=q0;p<q1;++p) {
                r = Aj[p];
                flags[r] = 1;
                x[r] = Av[p];
            }
            for(p=0;p<P;++p) {
                ip = i[p];
                if(flags[ip]) {
                    Bj[count] = p;
                    Bv[count] = x[i[p]];
                    ++count;
                }
            }
            for(p=q0;p<q1;++p) {
                r = Aj[p];
                flags[r] = 0;
            }
            Bi[q+1] = count;
        }
        return B;
    }
    
    numeric.ccsDot = function ccsDot(A,B) {
        var Ai = A[0], Aj = A[1], Av = A[2];
        var Bi = B[0], Bj = B[1], Bv = B[2];
        var sA = numeric.ccsDim(A), sB = numeric.ccsDim(B);
        var m = sA[0], n = sA[1], o = sB[1];
        var x = numeric.rep([m],0), flags = numeric.rep([m],0), xj = Array(m);
        var Ci = numeric.rep([o],0), Cj = [], Cv = [], C = [Ci,Cj,Cv];
        var i,j,k,j0,j1,i0,i1,l,p,a,b;
        for(k=0;k!==o;++k) {
            j0 = Bi[k];
            j1 = Bi[k+1];
            p = 0;
            for(j=j0;j<j1;++j) {
                a = Bj[j];
                b = Bv[j];
                i0 = Ai[a];
                i1 = Ai[a+1];
                for(i=i0;i<i1;++i) {
                    l = Aj[i];
                    if(flags[l]===0) {
                        xj[p] = l;
                        flags[l] = 1;
                        p = p+1;
                    }
                    x[l] = x[l] + Av[i]*b;
                }
            }
            j0 = Ci[k];
            j1 = j0+p;
            Ci[k+1] = j1;
            for(j=p-1;j!==-1;--j) {
                b = j0+j;
                i = xj[j];
                Cj[b] = i;
                Cv[b] = x[i];
                flags[i] = 0;
                x[i] = 0;
            }
            Ci[k+1] = Ci[k]+p;
        }
        return C;
    }
    
    numeric.ccsLUPSolve = function ccsLUPSolve(LUP,B) {
        var L = LUP.L, U = LUP.U, P = LUP.P;
        var Bi = B[0];
        var flag = false;
        if(typeof Bi !== "object") { B = [[0,B.length],numeric.linspace(0,B.length-1),B]; Bi = B[0]; flag = true; }
        var Bj = B[1], Bv = B[2];
        var n = L[0].length-1, m = Bi.length-1;
        var x = numeric.rep([n],0), xj = Array(n);
        var b = numeric.rep([n],0), bj = Array(n);
        var Xi = numeric.rep([m+1],0), Xj = [], Xv = [];
        var sol = numeric.ccsTSolve;
        var i,j,j0,j1,k,J,N=0;
        for(i=0;i<m;++i) {
            k = 0;
            j0 = Bi[i];
            j1 = Bi[i+1];
            for(j=j0;j<j1;++j) { 
                J = LUP.Pinv[Bj[j]];
                bj[k] = J;
                b[J] = Bv[j];
                ++k;
            }
            bj.length = k;
            sol(L,b,x,bj,xj);
            for(j=bj.length-1;j!==-1;--j) b[bj[j]] = 0;
            sol(U,x,b,xj,bj);
            if(flag) return b;
            for(j=xj.length-1;j!==-1;--j) x[xj[j]] = 0;
            for(j=bj.length-1;j!==-1;--j) {
                J = bj[j];
                Xj[N] = J;
                Xv[N] = b[J];
                b[J] = 0;
                ++N;
            }
            Xi[i+1] = N;
        }
        return [Xi,Xj,Xv];
    }
    
    numeric.ccsbinop = function ccsbinop(body,setup) {
        if(typeof setup === "undefined") setup='';
        return Function('X','Y',
                'var Xi = X[0], Xj = X[1], Xv = X[2];\n'+
                'var Yi = Y[0], Yj = Y[1], Yv = Y[2];\n'+
                'var n = Xi.length-1,m = Math.max(numeric.sup(Xj),numeric.sup(Yj))+1;\n'+
                'var Zi = numeric.rep([n+1],0), Zj = [], Zv = [];\n'+
                'var x = numeric.rep([m],0),y = numeric.rep([m],0);\n'+
                'var xk,yk,zk;\n'+
                'var i,j,j0,j1,k,p=0;\n'+
                setup+
                'for(i=0;i<n;++i) {\n'+
                '  j0 = Xi[i]; j1 = Xi[i+1];\n'+
                '  for(j=j0;j!==j1;++j) {\n'+
                '    k = Xj[j];\n'+
                '    x[k] = 1;\n'+
                '    Zj[p] = k;\n'+
                '    ++p;\n'+
                '  }\n'+
                '  j0 = Yi[i]; j1 = Yi[i+1];\n'+
                '  for(j=j0;j!==j1;++j) {\n'+
                '    k = Yj[j];\n'+
                '    y[k] = Yv[j];\n'+
                '    if(x[k] === 0) {\n'+
                '      Zj[p] = k;\n'+
                '      ++p;\n'+
                '    }\n'+
                '  }\n'+
                '  Zi[i+1] = p;\n'+
                '  j0 = Xi[i]; j1 = Xi[i+1];\n'+
                '  for(j=j0;j!==j1;++j) x[Xj[j]] = Xv[j];\n'+
                '  j0 = Zi[i]; j1 = Zi[i+1];\n'+
                '  for(j=j0;j!==j1;++j) {\n'+
                '    k = Zj[j];\n'+
                '    xk = x[k];\n'+
                '    yk = y[k];\n'+
                body+'\n'+
                '    Zv[j] = zk;\n'+
                '  }\n'+
                '  j0 = Xi[i]; j1 = Xi[i+1];\n'+
                '  for(j=j0;j!==j1;++j) x[Xj[j]] = 0;\n'+
                '  j0 = Yi[i]; j1 = Yi[i+1];\n'+
                '  for(j=j0;j!==j1;++j) y[Yj[j]] = 0;\n'+
                '}\n'+
                'return [Zi,Zj,Zv];'
                );
    };
    
    (function() {
        var k,A,B,C;
        for(k in numeric.ops2) {
            if(isFinite(eval('1'+numeric.ops2[k]+'0'))) A = '[Y[0],Y[1],numeric.'+k+'(X,Y[2])]';
            else A = 'NaN';
            if(isFinite(eval('0'+numeric.ops2[k]+'1'))) B = '[X[0],X[1],numeric.'+k+'(X[2],Y)]';
            else B = 'NaN';
            if(isFinite(eval('1'+numeric.ops2[k]+'0')) && isFinite(eval('0'+numeric.ops2[k]+'1'))) C = 'numeric.ccs'+k+'MM(X,Y)';
            else C = 'NaN';
            numeric['ccs'+k+'MM'] = numeric.ccsbinop('zk = xk '+numeric.ops2[k]+'yk;');
            numeric['ccs'+k] = Function('X','Y',
                    'if(typeof X === "number") return '+A+';\n'+
                    'if(typeof Y === "number") return '+B+';\n'+
                    'return '+C+';\n'
                    );
        }
    }());
    
    numeric.ccsScatter = function ccsScatter(A) {
        var Ai = A[0], Aj = A[1], Av = A[2];
        var n = numeric.sup(Aj)+1,m=Ai.length;
        var Ri = numeric.rep([n],0),Rj=Array(m), Rv = Array(m);
        var counts = numeric.rep([n],0),i;
        for(i=0;i<m;++i) counts[Aj[i]]++;
        for(i=0;i<n;++i) Ri[i+1] = Ri[i] + counts[i];
        var ptr = Ri.slice(0),k,Aii;
        for(i=0;i<m;++i) {
            Aii = Aj[i];
            k = ptr[Aii];
            Rj[k] = Ai[i];
            Rv[k] = Av[i];
            ptr[Aii]=ptr[Aii]+1;
        }
        return [Ri,Rj,Rv];
    }
    
    numeric.ccsGather = function ccsGather(A) {
        var Ai = A[0], Aj = A[1], Av = A[2];
        var n = Ai.length-1,m = Aj.length;
        var Ri = Array(m), Rj = Array(m), Rv = Array(m);
        var i,j,j0,j1,p;
        p=0;
        for(i=0;i<n;++i) {
            j0 = Ai[i];
            j1 = Ai[i+1];
            for(j=j0;j!==j1;++j) {
                Rj[p] = i;
                Ri[p] = Aj[j];
                Rv[p] = Av[j];
                ++p;
            }
        }
        return [Ri,Rj,Rv];
    }
    
    // The following sparse linear algebra routines are deprecated.
    
    numeric.sdim = function dim(A,ret,k) {
        if(typeof ret === "undefined") { ret = []; }
        if(typeof A !== "object") return ret;
        if(typeof k === "undefined") { k=0; }
        if(!(k in ret)) { ret[k] = 0; }
        if(A.length > ret[k]) ret[k] = A.length;
        var i;
        for(i in A) {
            if(A.hasOwnProperty(i)) dim(A[i],ret,k+1);
        }
        return ret;
    };
    
    numeric.sclone = function clone(A,k,n) {
        if(typeof k === "undefined") { k=0; }
        if(typeof n === "undefined") { n = numeric.sdim(A).length; }
        var i,ret = Array(A.length);
        if(k === n-1) {
            for(i in A) { if(A.hasOwnProperty(i)) ret[i] = A[i]; }
            return ret;
        }
        for(i in A) {
            if(A.hasOwnProperty(i)) ret[i] = clone(A[i],k+1,n);
        }
        return ret;
    }
    
    numeric.sdiag = function diag(d) {
        var n = d.length,i,ret = Array(n),i1,i2,i3;
        for(i=n-1;i>=1;i-=2) {
            i1 = i-1;
            ret[i] = []; ret[i][i] = d[i];
            ret[i1] = []; ret[i1][i1] = d[i1];
        }
        if(i===0) { ret[0] = []; ret[0][0] = d[i]; }
        return ret;
    }
    
    numeric.sidentity = function identity(n) { return numeric.sdiag(numeric.rep([n],1)); }
    
    numeric.stranspose = function transpose(A) {
        var ret = [], n = A.length, i,j,Ai;
        for(i in A) {
            if(!(A.hasOwnProperty(i))) continue;
            Ai = A[i];
            for(j in Ai) {
                if(!(Ai.hasOwnProperty(j))) continue;
                if(typeof ret[j] !== "object") { ret[j] = []; }
                ret[j][i] = Ai[j];
            }
        }
        return ret;
    }
    
    numeric.sLUP = function LUP(A,tol) {
        throw new Error("The function numeric.sLUP had a bug in it and has been removed. Please use the new numeric.ccsLUP function instead.");
    };
    
    numeric.sdotMM = function dotMM(A,B) {
        var p = A.length, q = B.length, BT = numeric.stranspose(B), r = BT.length, Ai, BTk;
        var i,j,k,accum;
        var ret = Array(p),reti;
        for(i=p-1;i>=0;i--) {
            reti = [];
            Ai = A[i];
            for(k=r-1;k>=0;k--) {
                accum = 0;
                BTk = BT[k];
                for(j in Ai) {
                    if(!(Ai.hasOwnProperty(j))) continue;
                    if(j in BTk) { accum += Ai[j]*BTk[j]; }
                }
                if(accum) reti[k] = accum;
            }
            ret[i] = reti;
        }
        return ret;
    }
    
    numeric.sdotMV = function dotMV(A,x) {
        var p = A.length, Ai, i,j;
        var ret = Array(p), accum;
        for(i=p-1;i>=0;i--) {
            Ai = A[i];
            accum = 0;
            for(j in Ai) {
                if(!(Ai.hasOwnProperty(j))) continue;
                if(x[j]) accum += Ai[j]*x[j];
            }
            if(accum) ret[i] = accum;
        }
        return ret;
    }
    
    numeric.sdotVM = function dotMV(x,A) {
        var i,j,Ai,alpha;
        var ret = [], accum;
        for(i in x) {
            if(!x.hasOwnProperty(i)) continue;
            Ai = A[i];
            alpha = x[i];
            for(j in Ai) {
                if(!Ai.hasOwnProperty(j)) continue;
                if(!ret[j]) { ret[j] = 0; }
                ret[j] += alpha*Ai[j];
            }
        }
        return ret;
    }
    
    numeric.sdotVV = function dotVV(x,y) {
        var i,ret=0;
        for(i in x) { if(x[i] && y[i]) ret+= x[i]*y[i]; }
        return ret;
    }
    
    numeric.sdot = function dot(A,B) {
        var m = numeric.sdim(A).length, n = numeric.sdim(B).length;
        var k = m*1000+n;
        switch(k) {
        case 0: return A*B;
        case 1001: return numeric.sdotVV(A,B);
        case 2001: return numeric.sdotMV(A,B);
        case 1002: return numeric.sdotVM(A,B);
        case 2002: return numeric.sdotMM(A,B);
        default: throw new Error('numeric.sdot not implemented for tensors of order '+m+' and '+n);
        }
    }
    
    numeric.sscatter = function scatter(V) {
        var n = V[0].length, Vij, i, j, m = V.length, A = [], Aj;
        for(i=n-1;i>=0;--i) {
            if(!V[m-1][i]) continue;
            Aj = A;
            for(j=0;j<m-2;j++) {
                Vij = V[j][i];
                if(!Aj[Vij]) Aj[Vij] = [];
                Aj = Aj[Vij];
            }
            Aj[V[j][i]] = V[j+1][i];
        }
        return A;
    }
    
    numeric.sgather = function gather(A,ret,k) {
        if(typeof ret === "undefined") ret = [];
        if(typeof k === "undefined") k = [];
        var n,i,Ai;
        n = k.length;
        for(i in A) {
            if(A.hasOwnProperty(i)) {
                k[n] = parseInt(i);
                Ai = A[i];
                if(typeof Ai === "number") {
                    if(Ai) {
                        if(ret.length === 0) {
                            for(i=n+1;i>=0;--i) ret[i] = [];
                        }
                        for(i=n;i>=0;--i) ret[i].push(k[i]);
                        ret[n+1].push(Ai);
                    }
                } else gather(Ai,ret,k);
            }
        }
        if(k.length>n) k.pop();
        return ret;
    }
    
    // 6. Coordinate matrices
    numeric.cLU = function LU(A) {
        var I = A[0], J = A[1], V = A[2];
        var p = I.length, m=0, i,j,k,a,b,c;
        for(i=0;i<p;i++) if(I[i]>m) m=I[i];
        m++;
        var L = Array(m), U = Array(m), left = numeric.rep([m],Infinity), right = numeric.rep([m],-Infinity);
        var Ui, Uj,alpha;
        for(k=0;k<p;k++) {
            i = I[k];
            j = J[k];
            if(j<left[i]) left[i] = j;
            if(j>right[i]) right[i] = j;
        }
        for(i=0;i<m-1;i++) { if(right[i] > right[i+1]) right[i+1] = right[i]; }
        for(i=m-1;i>=1;i--) { if(left[i]<left[i-1]) left[i-1] = left[i]; }
        var countL = 0, countU = 0;
        for(i=0;i<m;i++) {
            U[i] = numeric.rep([right[i]-left[i]+1],0);
            L[i] = numeric.rep([i-left[i]],0);
            countL += i-left[i]+1;
            countU += right[i]-i+1;
        }
        for(k=0;k<p;k++) { i = I[k]; U[i][J[k]-left[i]] = V[k]; }
        for(i=0;i<m-1;i++) {
            a = i-left[i];
            Ui = U[i];
            for(j=i+1;left[j]<=i && j<m;j++) {
                b = i-left[j];
                c = right[i]-i;
                Uj = U[j];
                alpha = Uj[b]/Ui[a];
                if(alpha) {
                    for(k=1;k<=c;k++) { Uj[k+b] -= alpha*Ui[k+a]; }
                    L[j][i-left[j]] = alpha;
                }
            }
        }
        var Ui = [], Uj = [], Uv = [], Li = [], Lj = [], Lv = [];
        var p,q,foo;
        p=0; q=0;
        for(i=0;i<m;i++) {
            a = left[i];
            b = right[i];
            foo = U[i];
            for(j=i;j<=b;j++) {
                if(foo[j-a]) {
                    Ui[p] = i;
                    Uj[p] = j;
                    Uv[p] = foo[j-a];
                    p++;
                }
            }
            foo = L[i];
            for(j=a;j<i;j++) {
                if(foo[j-a]) {
                    Li[q] = i;
                    Lj[q] = j;
                    Lv[q] = foo[j-a];
                    q++;
                }
            }
            Li[q] = i;
            Lj[q] = i;
            Lv[q] = 1;
            q++;
        }
        return {U:[Ui,Uj,Uv], L:[Li,Lj,Lv]};
    };
    
    numeric.cLUsolve = function LUsolve(lu,b) {
        var L = lu.L, U = lu.U, ret = numeric.clone(b);
        var Li = L[0], Lj = L[1], Lv = L[2];
        var Ui = U[0], Uj = U[1], Uv = U[2];
        var p = Ui.length, q = Li.length;
        var m = ret.length,i,j,k;
        k = 0;
        for(i=0;i<m;i++) {
            while(Lj[k] < i) {
                ret[i] -= Lv[k]*ret[Lj[k]];
                k++;
            }
            k++;
        }
        k = p-1;
        for(i=m-1;i>=0;i--) {
            while(Uj[k] > i) {
                ret[i] -= Uv[k]*ret[Uj[k]];
                k--;
            }
            ret[i] /= Uv[k];
            k--;
        }
        return ret;
    };
    
    numeric.cgrid = function grid(n,shape) {
        if(typeof n === "number") n = [n,n];
        var ret = numeric.rep(n,-1);
        var i,j,count;
        if(typeof shape !== "function") {
            switch(shape) {
            case 'L':
                shape = function(i,j) { return (i>=n[0]/2 || j<n[1]/2); }
                break;
            default:
                shape = function(i,j) { return true; };
                break;
            }
        }
        count=0;
        for(i=1;i<n[0]-1;i++) for(j=1;j<n[1]-1;j++) 
            if(shape(i,j)) {
                ret[i][j] = count;
                count++;
            }
        return ret;
    }
    
    numeric.cdelsq = function delsq(g) {
        var dir = [[-1,0],[0,-1],[0,1],[1,0]];
        var s = numeric.dim(g), m = s[0], n = s[1], i,j,k,p,q;
        var Li = [], Lj = [], Lv = [];
        for(i=1;i<m-1;i++) for(j=1;j<n-1;j++) {
            if(g[i][j]<0) continue;
            for(k=0;k<4;k++) {
                p = i+dir[k][0];
                q = j+dir[k][1];
                if(g[p][q]<0) continue;
                Li.push(g[i][j]);
                Lj.push(g[p][q]);
                Lv.push(-1);
            }
            Li.push(g[i][j]);
            Lj.push(g[i][j]);
            Lv.push(4);
        }
        return [Li,Lj,Lv];
    }
    
    numeric.cdotMV = function dotMV(A,x) {
        var ret, Ai = A[0], Aj = A[1], Av = A[2],k,p=Ai.length,N;
        N=0;
        for(k=0;k<p;k++) { if(Ai[k]>N) N = Ai[k]; }
        N++;
        ret = numeric.rep([N],0);
        for(k=0;k<p;k++) { ret[Ai[k]]+=Av[k]*x[Aj[k]]; }
        return ret;
    }
    
    // 7. Splines
    
    numeric.Spline = function Spline(x,yl,yr,kl,kr) { this.x = x; this.yl = yl; this.yr = yr; this.kl = kl; this.kr = kr; }
    numeric.Spline.prototype._at = function _at(x1,p) {
        var x = this.x;
        var yl = this.yl;
        var yr = this.yr;
        var kl = this.kl;
        var kr = this.kr;
        var x1,a,b,t;
        var add = numeric.add, sub = numeric.sub, mul = numeric.mul;
        a = sub(mul(kl[p],x[p+1]-x[p]),sub(yr[p+1],yl[p]));
        b = add(mul(kr[p+1],x[p]-x[p+1]),sub(yr[p+1],yl[p]));
        t = (x1-x[p])/(x[p+1]-x[p]);
        var s = t*(1-t);
        return add(add(add(mul(1-t,yl[p]),mul(t,yr[p+1])),mul(a,s*(1-t))),mul(b,s*t));
    }
    numeric.Spline.prototype.at = function at(x0) {
        if(typeof x0 === "number") {
            var x = this.x;
            var n = x.length;
            var p,q,mid,floor = Math.floor,a,b,t;
            p = 0;
            q = n-1;
            while(q-p>1) {
                mid = floor((p+q)/2);
                if(x[mid] <= x0) p = mid;
                else q = mid;
            }
            return this._at(x0,p);
        }
        var n = x0.length, i, ret = Array(n);
        for(i=n-1;i!==-1;--i) ret[i] = this.at(x0[i]);
        return ret;
    }
    numeric.Spline.prototype.diff = function diff() {
        var x = this.x;
        var yl = this.yl;
        var yr = this.yr;
        var kl = this.kl;
        var kr = this.kr;
        var n = yl.length;
        var i,dx,dy;
        var zl = kl, zr = kr, pl = Array(n), pr = Array(n);
        var add = numeric.add, mul = numeric.mul, div = numeric.div, sub = numeric.sub;
        for(i=n-1;i!==-1;--i) {
            dx = x[i+1]-x[i];
            dy = sub(yr[i+1],yl[i]);
            pl[i] = div(add(mul(dy, 6),mul(kl[i],-4*dx),mul(kr[i+1],-2*dx)),dx*dx);
            pr[i+1] = div(add(mul(dy,-6),mul(kl[i], 2*dx),mul(kr[i+1], 4*dx)),dx*dx);
        }
        return new numeric.Spline(x,zl,zr,pl,pr);
    }
    numeric.Spline.prototype.roots = function roots() {
        function sqr(x) { return x*x; }
        function heval(y0,y1,k0,k1,x) {
            var A = k0*2-(y1-y0);
            var B = -k1*2+(y1-y0);
            var t = (x+1)*0.5;
            var s = t*(1-t);
            return (1-t)*y0+t*y1+A*s*(1-t)+B*s*t;
        }
        var ret = [];
        var x = this.x, yl = this.yl, yr = this.yr, kl = this.kl, kr = this.kr;
        if(typeof yl[0] === "number") {
            yl = [yl];
            yr = [yr];
            kl = [kl];
            kr = [kr];
        }
        var m = yl.length,n=x.length-1,i,j,k,y,s,t;
        var ai,bi,ci,di, ret = Array(m),ri,k0,k1,y0,y1,A,B,D,dx,cx,stops,z0,z1,zm,t0,t1,tm;
        var sqrt = Math.sqrt;
        for(i=0;i!==m;++i) {
            ai = yl[i];
            bi = yr[i];
            ci = kl[i];
            di = kr[i];
            ri = [];
            for(j=0;j!==n;j++) {
                if(j>0 && bi[j]*ai[j]<0) ri.push(x[j]);
                dx = (x[j+1]-x[j]);
                cx = x[j];
                y0 = ai[j];
                y1 = bi[j+1];
                k0 = ci[j]/dx;
                k1 = di[j+1]/dx;
                D = sqr(k0-k1+3*(y0-y1)) + 12*k1*y0;
                A = k1+3*y0+2*k0-3*y1;
                B = 3*(k1+k0+2*(y0-y1));
                if(D<=0) {
                    z0 = A/B;
                    if(z0>x[j] && z0<x[j+1]) stops = [x[j],z0,x[j+1]];
                    else stops = [x[j],x[j+1]];
                } else {
                    z0 = (A-sqrt(D))/B;
                    z1 = (A+sqrt(D))/B;
                    stops = [x[j]];
                    if(z0>x[j] && z0<x[j+1]) stops.push(z0);
                    if(z1>x[j] && z1<x[j+1]) stops.push(z1);
                    stops.push(x[j+1]);
                }
                t0 = stops[0];
                z0 = this._at(t0,j);
                for(k=0;k<stops.length-1;k++) {
                    t1 = stops[k+1];
                    z1 = this._at(t1,j);
                    if(z0 === 0) {
                        ri.push(t0); 
                        t0 = t1;
                        z0 = z1;
                        continue;
                    }
                    if(z1 === 0 || z0*z1>0) {
                        t0 = t1;
                        z0 = z1;
                        continue;
                    }
                    var side = 0;
                    while(1) {
                        tm = (z0*t1-z1*t0)/(z0-z1);
                        if(tm <= t0 || tm >= t1) { break; }
                        zm = this._at(tm,j);
                        if(zm*z1>0) {
                            t1 = tm;
                            z1 = zm;
                            if(side === -1) z0*=0.5;
                            side = -1;
                        } else if(zm*z0>0) {
                            t0 = tm;
                            z0 = zm;
                            if(side === 1) z1*=0.5;
                            side = 1;
                        } else break;
                    }
                    ri.push(tm);
                    t0 = stops[k+1];
                    z0 = this._at(t0, j);
                }
                if(z1 === 0) ri.push(t1);
            }
            ret[i] = ri;
        }
        if(typeof this.yl[0] === "number") return ret[0];
        return ret;
    }
    numeric.spline = function spline(x,y,k1,kn) {
        var n = x.length, b = [], dx = [], dy = [];
        var i;
        var sub = numeric.sub,mul = numeric.mul,add = numeric.add;
        for(i=n-2;i>=0;i--) { dx[i] = x[i+1]-x[i]; dy[i] = sub(y[i+1],y[i]); }
        if(typeof k1 === "string" || typeof kn === "string") { 
            k1 = kn = "periodic";
        }
        // Build sparse tridiagonal system
        var T = [[],[],[]];
        switch(typeof k1) {
        case "undefined":
            b[0] = mul(3/(dx[0]*dx[0]),dy[0]);
            T[0].push(0,0);
            T[1].push(0,1);
            T[2].push(2/dx[0],1/dx[0]);
            break;
        case "string":
            b[0] = add(mul(3/(dx[n-2]*dx[n-2]),dy[n-2]),mul(3/(dx[0]*dx[0]),dy[0]));
            T[0].push(0,0,0);
            T[1].push(n-2,0,1);
            T[2].push(1/dx[n-2],2/dx[n-2]+2/dx[0],1/dx[0]);
            break;
        default:
            b[0] = k1;
            T[0].push(0);
            T[1].push(0);
            T[2].push(1);
            break;
        }
        for(i=1;i<n-1;i++) {
            b[i] = add(mul(3/(dx[i-1]*dx[i-1]),dy[i-1]),mul(3/(dx[i]*dx[i]),dy[i]));
            T[0].push(i,i,i);
            T[1].push(i-1,i,i+1);
            T[2].push(1/dx[i-1],2/dx[i-1]+2/dx[i],1/dx[i]);
        }
        switch(typeof kn) {
        case "undefined":
            b[n-1] = mul(3/(dx[n-2]*dx[n-2]),dy[n-2]);
            T[0].push(n-1,n-1);
            T[1].push(n-2,n-1);
            T[2].push(1/dx[n-2],2/dx[n-2]);
            break;
        case "string":
            T[1][T[1].length-1] = 0;
            break;
        default:
            b[n-1] = kn;
            T[0].push(n-1);
            T[1].push(n-1);
            T[2].push(1);
            break;
        }
        if(typeof b[0] !== "number") b = numeric.transpose(b);
        else b = [b];
        var k = Array(b.length);
        if(typeof k1 === "string") {
            for(i=k.length-1;i!==-1;--i) {
                k[i] = numeric.ccsLUPSolve(numeric.ccsLUP(numeric.ccsScatter(T)),b[i]);
                k[i][n-1] = k[i][0];
            }
        } else {
            for(i=k.length-1;i!==-1;--i) {
                k[i] = numeric.cLUsolve(numeric.cLU(T),b[i]);
            }
        }
        if(typeof y[0] === "number") k = k[0];
        else k = numeric.transpose(k);
        return new numeric.Spline(x,y,y,k,k);
    }
    
    // 8. FFT
    numeric.fftpow2 = function fftpow2(x,y) {
        var n = x.length;
        if(n === 1) return;
        var cos = Math.cos, sin = Math.sin, i,j;
        var xe = Array(n/2), ye = Array(n/2), xo = Array(n/2), yo = Array(n/2);
        j = n/2;
        for(i=n-1;i!==-1;--i) {
            --j;
            xo[j] = x[i];
            yo[j] = y[i];
            --i;
            xe[j] = x[i];
            ye[j] = y[i];
        }
        fftpow2(xe,ye);
        fftpow2(xo,yo);
        j = n/2;
        var t,k = (-6.2831853071795864769252867665590057683943387987502116419/n),ci,si;
        for(i=n-1;i!==-1;--i) {
            --j;
            if(j === -1) j = n/2-1;
            t = k*i;
            ci = cos(t);
            si = sin(t);
            x[i] = xe[j] + ci*xo[j] - si*yo[j];
            y[i] = ye[j] + ci*yo[j] + si*xo[j];
        }
    }
    numeric._ifftpow2 = function _ifftpow2(x,y) {
        var n = x.length;
        if(n === 1) return;
        var cos = Math.cos, sin = Math.sin, i,j;
        var xe = Array(n/2), ye = Array(n/2), xo = Array(n/2), yo = Array(n/2);
        j = n/2;
        for(i=n-1;i!==-1;--i) {
            --j;
            xo[j] = x[i];
            yo[j] = y[i];
            --i;
            xe[j] = x[i];
            ye[j] = y[i];
        }
        _ifftpow2(xe,ye);
        _ifftpow2(xo,yo);
        j = n/2;
        var t,k = (6.2831853071795864769252867665590057683943387987502116419/n),ci,si;
        for(i=n-1;i!==-1;--i) {
            --j;
            if(j === -1) j = n/2-1;
            t = k*i;
            ci = cos(t);
            si = sin(t);
            x[i] = xe[j] + ci*xo[j] - si*yo[j];
            y[i] = ye[j] + ci*yo[j] + si*xo[j];
        }
    }
    numeric.ifftpow2 = function ifftpow2(x,y) {
        numeric._ifftpow2(x,y);
        numeric.diveq(x,x.length);
        numeric.diveq(y,y.length);
    }
    numeric.convpow2 = function convpow2(ax,ay,bx,by) {
        numeric.fftpow2(ax,ay);
        numeric.fftpow2(bx,by);
        var i,n = ax.length,axi,bxi,ayi,byi;
        for(i=n-1;i!==-1;--i) {
            axi = ax[i]; ayi = ay[i]; bxi = bx[i]; byi = by[i];
            ax[i] = axi*bxi-ayi*byi;
            ay[i] = axi*byi+ayi*bxi;
        }
        numeric.ifftpow2(ax,ay);
    }
    numeric.T.prototype.fft = function fft() {
        var x = this.x, y = this.y;
        var n = x.length, log = Math.log, log2 = log(2),
            p = Math.ceil(log(2*n-1)/log2), m = Math.pow(2,p);
        var cx = numeric.rep([m],0), cy = numeric.rep([m],0), cos = Math.cos, sin = Math.sin;
        var k, c = (-3.141592653589793238462643383279502884197169399375105820/n),t;
        var a = numeric.rep([m],0), b = numeric.rep([m],0),nhalf = Math.floor(n/2);
        for(k=0;k<n;k++) a[k] = x[k];
        if(typeof y !== "undefined") for(k=0;k<n;k++) b[k] = y[k];
        cx[0] = 1;
        for(k=1;k<=m/2;k++) {
            t = c*k*k;
            cx[k] = cos(t);
            cy[k] = sin(t);
            cx[m-k] = cos(t);
            cy[m-k] = sin(t)
        }
        var X = new numeric.T(a,b), Y = new numeric.T(cx,cy);
        X = X.mul(Y);
        numeric.convpow2(X.x,X.y,numeric.clone(Y.x),numeric.neg(Y.y));
        X = X.mul(Y);
        X.x.length = n;
        X.y.length = n;
        return X;
    }
    numeric.T.prototype.ifft = function ifft() {
        var x = this.x, y = this.y;
        var n = x.length, log = Math.log, log2 = log(2),
            p = Math.ceil(log(2*n-1)/log2), m = Math.pow(2,p);
        var cx = numeric.rep([m],0), cy = numeric.rep([m],0), cos = Math.cos, sin = Math.sin;
        var k, c = (3.141592653589793238462643383279502884197169399375105820/n),t;
        var a = numeric.rep([m],0), b = numeric.rep([m],0),nhalf = Math.floor(n/2);
        for(k=0;k<n;k++) a[k] = x[k];
        if(typeof y !== "undefined") for(k=0;k<n;k++) b[k] = y[k];
        cx[0] = 1;
        for(k=1;k<=m/2;k++) {
            t = c*k*k;
            cx[k] = cos(t);
            cy[k] = sin(t);
            cx[m-k] = cos(t);
            cy[m-k] = sin(t)
        }
        var X = new numeric.T(a,b), Y = new numeric.T(cx,cy);
        X = X.mul(Y);
        numeric.convpow2(X.x,X.y,numeric.clone(Y.x),numeric.neg(Y.y));
        X = X.mul(Y);
        X.x.length = n;
        X.y.length = n;
        return X.div(n);
    }
    
    //9. Unconstrained optimization
    numeric.gradient = function gradient(f,x) {
        var n = x.length;
        var f0 = f(x);
        if(isNaN(f0)) throw new Error('gradient: f(x) is a NaN!');
        var max = Math.max;
        var i,x0 = numeric.clone(x),f1,f2, J = Array(n);
        var div = numeric.div, sub = numeric.sub,errest,roundoff,max = Math.max,eps = 1e-3,abs = Math.abs, min = Math.min;
        var t0,t1,t2,it=0,d1,d2,N;
        for(i=0;i<n;i++) {
            var h = max(1e-6*f0,1e-8);
            while(1) {
                ++it;
                if(it>20) { throw new Error("Numerical gradient fails"); }
                x0[i] = x[i]+h;
                f1 = f(x0);
                x0[i] = x[i]-h;
                f2 = f(x0);
                x0[i] = x[i];
                if(isNaN(f1) || isNaN(f2)) { h/=16; continue; }
                J[i] = (f1-f2)/(2*h);
                t0 = x[i]-h;
                t1 = x[i];
                t2 = x[i]+h;
                d1 = (f1-f0)/h;
                d2 = (f0-f2)/h;
                N = max(abs(J[i]),abs(f0),abs(f1),abs(f2),abs(t0),abs(t1),abs(t2),1e-8);
                errest = min(max(abs(d1-J[i]),abs(d2-J[i]),abs(d1-d2))/N,h/N);
                if(errest>eps) { h/=16; }
                else break;
                }
        }
        return J;
    }
    
    numeric.uncmin = function uncmin(f,x0,tol,gradient,maxit,callback,options) {
        var grad = numeric.gradient;
        if(typeof options === "undefined") { options = {}; }
        if(typeof tol === "undefined") { tol = 1e-8; }
        if(typeof gradient === "undefined") { gradient = function(x) { return grad(f,x); }; }
        if(typeof maxit === "undefined") maxit = 1000;
        x0 = numeric.clone(x0);
        var n = x0.length;
        var f0 = f(x0),f1,df0;
        if(isNaN(f0)) throw new Error('uncmin: f(x0) is a NaN!');
        var max = Math.max, norm2 = numeric.norm2;
        tol = max(tol,numeric.epsilon);
        var step,g0,g1,H1 = options.Hinv || numeric.identity(n);
        var dot = numeric.dot, inv = numeric.inv, sub = numeric.sub, add = numeric.add, ten = numeric.tensor, div = numeric.div, mul = numeric.mul;
        var all = numeric.all, isfinite = numeric.isFinite, neg = numeric.neg;
        var it=0,i,s,x1,y,Hy,Hs,ys,i0,t,nstep,t1,t2;
        var msg = "";
        g0 = gradient(x0);
        while(it<maxit) {
            if(typeof callback === "function") { if(callback(it,x0,f0,g0,H1)) { msg = "Callback returned true"; break; } }
            if(!all(isfinite(g0))) { msg = "Gradient has Infinity or NaN"; break; }
            step = neg(dot(H1,g0));
            if(!all(isfinite(step))) { msg = "Search direction has Infinity or NaN"; break; }
            nstep = norm2(step);
            if(nstep < tol) { msg="Newton step smaller than tol"; break; }
            t = 1;
            df0 = dot(g0,step);
            // line search
            x1 = x0;
            while(it < maxit) {
                if(t*nstep < tol) { break; }
                s = mul(step,t);
                x1 = add(x0,s);
                f1 = f(x1);
                if(f1-f0 >= 0.1*t*df0 || isNaN(f1)) {
                    t *= 0.5;
                    ++it;
                    continue;
                }
                break;
            }
            if(t*nstep < tol) { msg = "Line search step size smaller than tol"; break; }
            if(it === maxit) { msg = "maxit reached during line search"; break; }
            g1 = gradient(x1);
            y = sub(g1,g0);
            ys = dot(y,s);
            Hy = dot(H1,y);
            H1 = sub(add(H1,
                    mul(
                            (ys+dot(y,Hy))/(ys*ys),
                            ten(s,s)    )),
                    div(add(ten(Hy,s),ten(s,Hy)),ys));
            x0 = x1;
            f0 = f1;
            g0 = g1;
            ++it;
        }
        return {solution: x0, f: f0, gradient: g0, invHessian: H1, iterations:it, message: msg};
    }
    
    // 10. Ode solver (Dormand-Prince)
    numeric.Dopri = function Dopri(x,y,f,ymid,iterations,msg,events) {
        this.x = x;
        this.y = y;
        this.f = f;
        this.ymid = ymid;
        this.iterations = iterations;
        this.events = events;
        this.message = msg;
    }
    numeric.Dopri.prototype._at = function _at(xi,j) {
        function sqr(x) { return x*x; }
        var sol = this;
        var xs = sol.x;
        var ys = sol.y;
        var k1 = sol.f;
        var ymid = sol.ymid;
        var n = xs.length;
        var x0,x1,xh,y0,y1,yh,xi;
        var floor = Math.floor,h;
        var c = 0.5;
        var add = numeric.add, mul = numeric.mul,sub = numeric.sub, p,q,w;
        x0 = xs[j];
        x1 = xs[j+1];
        y0 = ys[j];
        y1 = ys[j+1];
        h  = x1-x0;
        xh = x0+c*h;
        yh = ymid[j];
        p = sub(k1[j  ],mul(y0,1/(x0-xh)+2/(x0-x1)));
        q = sub(k1[j+1],mul(y1,1/(x1-xh)+2/(x1-x0)));
        w = [sqr(xi - x1) * (xi - xh) / sqr(x0 - x1) / (x0 - xh),
             sqr(xi - x0) * sqr(xi - x1) / sqr(x0 - xh) / sqr(x1 - xh),
             sqr(xi - x0) * (xi - xh) / sqr(x1 - x0) / (x1 - xh),
             (xi - x0) * sqr(xi - x1) * (xi - xh) / sqr(x0-x1) / (x0 - xh),
             (xi - x1) * sqr(xi - x0) * (xi - xh) / sqr(x0-x1) / (x1 - xh)];
        return add(add(add(add(mul(y0,w[0]),
                               mul(yh,w[1])),
                               mul(y1,w[2])),
                               mul( p,w[3])),
                               mul( q,w[4]));
    }
    numeric.Dopri.prototype.at = function at(x) {
        var i,j,k,floor = Math.floor;
        if(typeof x !== "number") {
            var n = x.length, ret = Array(n);
            for(i=n-1;i!==-1;--i) {
                ret[i] = this.at(x[i]);
            }
            return ret;
        }
        var x0 = this.x;
        i = 0; j = x0.length-1;
        while(j-i>1) {
            k = floor(0.5*(i+j));
            if(x0[k] <= x) i = k;
            else j = k;
        }
        return this._at(x,i);
    }
    
    numeric.dopri = function dopri(x0,x1,y0,f,tol,maxit,event) {
        if(typeof tol === "undefined") { tol = 1e-6; }
        if(typeof maxit === "undefined") { maxit = 1000; }
        var xs = [x0], ys = [y0], k1 = [f(x0,y0)], k2,k3,k4,k5,k6,k7, ymid = [];
        var A2 = 1/5;
        var A3 = [3/40,9/40];
        var A4 = [44/45,-56/15,32/9];
        var A5 = [19372/6561,-25360/2187,64448/6561,-212/729];
        var A6 = [9017/3168,-355/33,46732/5247,49/176,-5103/18656];
        var b = [35/384,0,500/1113,125/192,-2187/6784,11/84];
        var bm = [0.5*6025192743/30085553152,
                  0,
                  0.5*51252292925/65400821598,
                  0.5*-2691868925/45128329728,
                  0.5*187940372067/1594534317056,
                  0.5*-1776094331/19743644256,
                  0.5*11237099/235043384];
        var c = [1/5,3/10,4/5,8/9,1,1];
        var e = [-71/57600,0,71/16695,-71/1920,17253/339200,-22/525,1/40];
        var i = 0,er,j;
        var h = (x1-x0)/10;
        var it = 0;
        var add = numeric.add, mul = numeric.mul, y1,erinf;
        var max = Math.max, min = Math.min, abs = Math.abs, norminf = numeric.norminf,pow = Math.pow;
        var any = numeric.any, lt = numeric.lt, and = numeric.and, sub = numeric.sub;
        var e0, e1, ev;
        var ret = new numeric.Dopri(xs,ys,k1,ymid,-1,"");
        if(typeof event === "function") e0 = event(x0,y0);
        while(x0<x1 && it<maxit) {
            ++it;
            if(x0+h>x1) h = x1-x0;
            k2 = f(x0+c[0]*h,                add(y0,mul(   A2*h,k1[i])));
            k3 = f(x0+c[1]*h,            add(add(y0,mul(A3[0]*h,k1[i])),mul(A3[1]*h,k2)));
            k4 = f(x0+c[2]*h,        add(add(add(y0,mul(A4[0]*h,k1[i])),mul(A4[1]*h,k2)),mul(A4[2]*h,k3)));
            k5 = f(x0+c[3]*h,    add(add(add(add(y0,mul(A5[0]*h,k1[i])),mul(A5[1]*h,k2)),mul(A5[2]*h,k3)),mul(A5[3]*h,k4)));
            k6 = f(x0+c[4]*h,add(add(add(add(add(y0,mul(A6[0]*h,k1[i])),mul(A6[1]*h,k2)),mul(A6[2]*h,k3)),mul(A6[3]*h,k4)),mul(A6[4]*h,k5)));
            y1 = add(add(add(add(add(y0,mul(k1[i],h*b[0])),mul(k3,h*b[2])),mul(k4,h*b[3])),mul(k5,h*b[4])),mul(k6,h*b[5]));
            k7 = f(x0+h,y1);
            er = add(add(add(add(add(mul(k1[i],h*e[0]),mul(k3,h*e[2])),mul(k4,h*e[3])),mul(k5,h*e[4])),mul(k6,h*e[5])),mul(k7,h*e[6]));
            if(typeof er === "number") erinf = abs(er);
            else erinf = norminf(er);
            if(erinf > tol) { // reject
                h = 0.2*h*pow(tol/erinf,0.25);
                if(x0+h === x0) {
                    ret.msg = "Step size became too small";
                    break;
                }
                continue;
            }
            ymid[i] = add(add(add(add(add(add(y0,
                    mul(k1[i],h*bm[0])),
                    mul(k3   ,h*bm[2])),
                    mul(k4   ,h*bm[3])),
                    mul(k5   ,h*bm[4])),
                    mul(k6   ,h*bm[5])),
                    mul(k7   ,h*bm[6]));
            ++i;
            xs[i] = x0+h;
            ys[i] = y1;
            k1[i] = k7;
            if(typeof event === "function") {
                var yi,xl = x0,xr = x0+0.5*h,xi;
                e1 = event(xr,ymid[i-1]);
                ev = and(lt(e0,0),lt(0,e1));
                if(!any(ev)) { xl = xr; xr = x0+h; e0 = e1; e1 = event(xr,y1); ev = and(lt(e0,0),lt(0,e1)); }
                if(any(ev)) {
                    var xc, yc, en,ei;
                    var side=0, sl = 1.0, sr = 1.0;
                    while(1) {
                        if(typeof e0 === "number") xi = (sr*e1*xl-sl*e0*xr)/(sr*e1-sl*e0);
                        else {
                            xi = xr;
                            for(j=e0.length-1;j!==-1;--j) {
                                if(e0[j]<0 && e1[j]>0) xi = min(xi,(sr*e1[j]*xl-sl*e0[j]*xr)/(sr*e1[j]-sl*e0[j]));
                            }
                        }
                        if(xi <= xl || xi >= xr) break;
                        yi = ret._at(xi, i-1);
                        ei = event(xi,yi);
                        en = and(lt(e0,0),lt(0,ei));
                        if(any(en)) {
                            xr = xi;
                            e1 = ei;
                            ev = en;
                            sr = 1.0;
                            if(side === -1) sl *= 0.5;
                            else sl = 1.0;
                            side = -1;
                        } else {
                            xl = xi;
                            e0 = ei;
                            sl = 1.0;
                            if(side === 1) sr *= 0.5;
                            else sr = 1.0;
                            side = 1;
                        }
                    }
                    y1 = ret._at(0.5*(x0+xi),i-1);
                    ret.f[i] = f(xi,yi);
                    ret.x[i] = xi;
                    ret.y[i] = yi;
                    ret.ymid[i-1] = y1;
                    ret.events = ev;
                    ret.iterations = it;
                    return ret;
                }
            }
            x0 += h;
            y0 = y1;
            e0 = e1;
            h = min(0.8*h*pow(tol/erinf,0.25),4*h);
        }
        ret.iterations = it;
        return ret;
    }
    
    // 11. Ax = b
    numeric.LU = function(A, fast) {
      fast = fast || false;
    
      var abs = Math.abs;
      var i, j, k, absAjk, Akk, Ak, Pk, Ai;
      var max;
      var n = A.length, n1 = n-1;
      var P = new Array(n);
      if(!fast) A = numeric.clone(A);
    
      for (k = 0; k < n; ++k) {
        Pk = k;
        Ak = A[k];
        max = abs(Ak[k]);
        for (j = k + 1; j < n; ++j) {
          absAjk = abs(A[j][k]);
          if (max < absAjk) {
            max = absAjk;
            Pk = j;
          }
        }
        P[k] = Pk;
    
        if (Pk != k) {
          A[k] = A[Pk];
          A[Pk] = Ak;
          Ak = A[k];
        }
    
        Akk = Ak[k];
    
        for (i = k + 1; i < n; ++i) {
          A[i][k] /= Akk;
        }
    
        for (i = k + 1; i < n; ++i) {
          Ai = A[i];
          for (j = k + 1; j < n1; ++j) {
            Ai[j] -= Ai[k] * Ak[j];
            ++j;
            Ai[j] -= Ai[k] * Ak[j];
          }
          if(j===n1) Ai[j] -= Ai[k] * Ak[j];
        }
      }
    
      return {
        LU: A,
        P:  P
      };
    }
    
    numeric.LUsolve = function LUsolve(LUP, b) {
      var i, j;
      var LU = LUP.LU;
      var n   = LU.length;
      var x = numeric.clone(b);
      var P   = LUP.P;
      var Pi, LUi, LUii, tmp;
    
      for (i=n-1;i!==-1;--i) x[i] = b[i];
      for (i = 0; i < n; ++i) {
        Pi = P[i];
        if (P[i] !== i) {
          tmp = x[i];
          x[i] = x[Pi];
          x[Pi] = tmp;
        }
    
        LUi = LU[i];
        for (j = 0; j < i; ++j) {
          x[i] -= x[j] * LUi[j];
        }
      }
    
      for (i = n - 1; i >= 0; --i) {
        LUi = LU[i];
        for (j = i + 1; j < n; ++j) {
          x[i] -= x[j] * LUi[j];
        }
    
        x[i] /= LUi[i];
      }
    
      return x;
    }
    
    numeric.solve = function solve(A,b,fast) { return numeric.LUsolve(numeric.LU(A,fast), b); }
    
    // 12. Linear programming
    numeric.echelonize = function echelonize(A) {
        var s = numeric.dim(A), m = s[0], n = s[1];
        var I = numeric.identity(m);
        var P = Array(m);
        var i,j,k,l,Ai,Ii,Z,a;
        var abs = Math.abs;
        var diveq = numeric.diveq;
        A = numeric.clone(A);
        for(i=0;i<m;++i) {
            k = 0;
            Ai = A[i];
            Ii = I[i];
            for(j=1;j<n;++j) if(abs(Ai[k])<abs(Ai[j])) k=j;
            P[i] = k;
            diveq(Ii,Ai[k]);
            diveq(Ai,Ai[k]);
            for(j=0;j<m;++j) if(j!==i) {
                Z = A[j]; a = Z[k];
                for(l=n-1;l!==-1;--l) Z[l] -= Ai[l]*a;
                Z = I[j];
                for(l=m-1;l!==-1;--l) Z[l] -= Ii[l]*a;
            }
        }
        return {I:I, A:A, P:P};
    }
    
    numeric.__solveLP = function __solveLP(c,A,b,tol,maxit,x,flag) {
        var sum = numeric.sum, log = numeric.log, mul = numeric.mul, sub = numeric.sub, dot = numeric.dot, div = numeric.div, add = numeric.add;
        var m = c.length, n = b.length,y;
        var unbounded = false, cb,i0=0;
        var alpha = 1.0;
        var f0,df0,AT = numeric.transpose(A), svd = numeric.svd,transpose = numeric.transpose,leq = numeric.leq, sqrt = Math.sqrt, abs = Math.abs;
        var muleq = numeric.muleq;
        var norm = numeric.norminf, any = numeric.any,min = Math.min;
        var all = numeric.all, gt = numeric.gt;
        var p = Array(m), A0 = Array(n),e=numeric.rep([n],1), H;
        var solve = numeric.solve, z = sub(b,dot(A,x)),count;
        var dotcc = dot(c,c);
        var g;
        for(count=i0;count<maxit;++count) {
            var i,j,d;
            for(i=n-1;i!==-1;--i) A0[i] = div(A[i],z[i]);
            var A1 = transpose(A0);
            for(i=m-1;i!==-1;--i) p[i] = (/*x[i]+*/sum(A1[i]));
            alpha = 0.25*abs(dotcc/dot(c,p));
            var a1 = 100*sqrt(dotcc/dot(p,p));
            if(!isFinite(alpha) || alpha>a1) alpha = a1;
            g = add(c,mul(alpha,p));
            H = dot(A1,A0);
            for(i=m-1;i!==-1;--i) H[i][i] += 1;
            d = solve(H,div(g,alpha),true);
            var t0 = div(z,dot(A,d));
            var t = 1.0;
            for(i=n-1;i!==-1;--i) if(t0[i]<0) t = min(t,-0.999*t0[i]);
            y = sub(x,mul(d,t));
            z = sub(b,dot(A,y));
            if(!all(gt(z,0))) return { solution: x, message: "", iterations: count };
            x = y;
            if(alpha<tol) return { solution: y, message: "", iterations: count };
            if(flag) {
                var s = dot(c,g), Ag = dot(A,g);
                unbounded = true;
                for(i=n-1;i!==-1;--i) if(s*Ag[i]<0) { unbounded = false; break; }
            } else {
                if(x[m-1]>=0) unbounded = false;
                else unbounded = true;
            }
            if(unbounded) return { solution: y, message: "Unbounded", iterations: count };
        }
        return { solution: x, message: "maximum iteration count exceeded", iterations:count };
    }
    
    numeric._solveLP = function _solveLP(c,A,b,tol,maxit) {
        var m = c.length, n = b.length,y;
        var sum = numeric.sum, log = numeric.log, mul = numeric.mul, sub = numeric.sub, dot = numeric.dot, div = numeric.div, add = numeric.add;
        var c0 = numeric.rep([m],0).concat([1]);
        var J = numeric.rep([n,1],-1);
        var A0 = numeric.blockMatrix([[A                   ,   J  ]]);
        var b0 = b;
        var y = numeric.rep([m],0).concat(Math.max(0,numeric.sup(numeric.neg(b)))+1);
        var x0 = numeric.__solveLP(c0,A0,b0,tol,maxit,y,false);
        var x = numeric.clone(x0.solution);
        x.length = m;
        var foo = numeric.inf(sub(b,dot(A,x)));
        if(foo<0) { return { solution: NaN, message: "Infeasible", iterations: x0.iterations }; }
        var ret = numeric.__solveLP(c, A, b, tol, maxit-x0.iterations, x, true);
        ret.iterations += x0.iterations;
        return ret;
    };
    
    numeric.solveLP = function solveLP(c,A,b,Aeq,beq,tol,maxit) {
        if(typeof maxit === "undefined") maxit = 1000;
        if(typeof tol === "undefined") tol = numeric.epsilon;
        if(typeof Aeq === "undefined") return numeric._solveLP(c,A,b,tol,maxit);
        var m = Aeq.length, n = Aeq[0].length, o = A.length;
        var B = numeric.echelonize(Aeq);
        var flags = numeric.rep([n],0);
        var P = B.P;
        var Q = [];
        var i;
        for(i=P.length-1;i!==-1;--i) flags[P[i]] = 1;
        for(i=n-1;i!==-1;--i) if(flags[i]===0) Q.push(i);
        var g = numeric.getRange;
        var I = numeric.linspace(0,m-1), J = numeric.linspace(0,o-1);
        var Aeq2 = g(Aeq,I,Q), A1 = g(A,J,P), A2 = g(A,J,Q), dot = numeric.dot, sub = numeric.sub;
        var A3 = dot(A1,B.I);
        var A4 = sub(A2,dot(A3,Aeq2)), b4 = sub(b,dot(A3,beq));
        var c1 = Array(P.length), c2 = Array(Q.length);
        for(i=P.length-1;i!==-1;--i) c1[i] = c[P[i]];
        for(i=Q.length-1;i!==-1;--i) c2[i] = c[Q[i]];
        var c4 = sub(c2,dot(c1,dot(B.I,Aeq2)));
        var S = numeric._solveLP(c4,A4,b4,tol,maxit);
        var x2 = S.solution;
        if(x2!==x2) return S;
        var x1 = dot(B.I,sub(beq,dot(Aeq2,x2)));
        var x = Array(c.length);
        for(i=P.length-1;i!==-1;--i) x[P[i]] = x1[i];
        for(i=Q.length-1;i!==-1;--i) x[Q[i]] = x2[i];
        return { solution: x, message:S.message, iterations: S.iterations };
    }
    
    numeric.MPStoLP = function MPStoLP(MPS) {
        if(MPS instanceof String) { MPS.split('\n'); }
        var state = 0;
        var states = ['Initial state','NAME','ROWS','COLUMNS','RHS','BOUNDS','ENDATA'];
        var n = MPS.length;
        var i,j,z,N=0,rows = {}, sign = [], rl = 0, vars = {}, nv = 0;
        var name;
        var c = [], A = [], b = [];
        function err(e) { throw new Error('MPStoLP: '+e+'\nLine '+i+': '+MPS[i]+'\nCurrent state: '+states[state]+'\n'); }
        for(i=0;i<n;++i) {
            z = MPS[i];
            var w0 = z.match(/\S*/g);
            var w = [];
            for(j=0;j<w0.length;++j) if(w0[j]!=="") w.push(w0[j]);
            if(w.length === 0) continue;
            for(j=0;j<states.length;++j) if(z.substr(0,states[j].length) === states[j]) break;
            if(j<states.length) {
                state = j;
                if(j===1) { name = w[1]; }
                if(j===6) return { name:name, c:c, A:numeric.transpose(A), b:b, rows:rows, vars:vars };
                continue;
            }
            switch(state) {
            case 0: case 1: err('Unexpected line');
            case 2: 
                switch(w[0]) {
                case 'N': if(N===0) N = w[1]; else err('Two or more N rows'); break;
                case 'L': rows[w[1]] = rl; sign[rl] = 1; b[rl] = 0; ++rl; break;
                case 'G': rows[w[1]] = rl; sign[rl] = -1;b[rl] = 0; ++rl; break;
                case 'E': rows[w[1]] = rl; sign[rl] = 0;b[rl] = 0; ++rl; break;
                default: err('Parse error '+numeric.prettyPrint(w));
                }
                break;
            case 3:
                if(!vars.hasOwnProperty(w[0])) { vars[w[0]] = nv; c[nv] = 0; A[nv] = numeric.rep([rl],0); ++nv; }
                var p = vars[w[0]];
                for(j=1;j<w.length;j+=2) {
                    if(w[j] === N) { c[p] = parseFloat(w[j+1]); continue; }
                    var q = rows[w[j]];
                    A[p][q] = (sign[q]<0?-1:1)*parseFloat(w[j+1]);
                }
                break;
            case 4:
                for(j=1;j<w.length;j+=2) b[rows[w[j]]] = (sign[rows[w[j]]]<0?-1:1)*parseFloat(w[j+1]);
                break;
            case 5: /*FIXME*/ break;
            case 6: err('Internal error');
            }
        }
        err('Reached end of file without ENDATA');
    }
    // seedrandom.js version 2.0.
    // Author: David Bau 4/2/2011
    //
    // Defines a method Math.seedrandom() that, when called, substitutes
    // an explicitly seeded RC4-based algorithm for Math.random().  Also
    // supports automatic seeding from local or network sources of entropy.
    //
    // Usage:
    //
    //   <script src=http://davidbau.com/encode/seedrandom-min.js></script>
    //
    //   Math.seedrandom('yipee'); Sets Math.random to a function that is
    //                             initialized using the given explicit seed.
    //
    //   Math.seedrandom();        Sets Math.random to a function that is
    //                             seeded using the current time, dom state,
    //                             and other accumulated local entropy.
    //                             The generated seed string is returned.
    //
    //   Math.seedrandom('yowza', true);
    //                             Seeds using the given explicit seed mixed
    //                             together with accumulated entropy.
    //
    //   <script src="http://bit.ly/srandom-512"></script>
    //                             Seeds using physical random bits downloaded
    //                             from random.org.
    //
    //   <script src="https://jsonlib.appspot.com/urandom?callback=Math.seedrandom">
    //   </script>                 Seeds using urandom bits from call.jsonlib.com,
    //                             which is faster than random.org.
    //
    // Examples:
    //
    //   Math.seedrandom("hello");            // Use "hello" as the seed.
    //   document.write(Math.random());       // Always 0.5463663768140734
    //   document.write(Math.random());       // Always 0.43973793770592234
    //   var rng1 = Math.random;              // Remember the current prng.
    //
    //   var autoseed = Math.seedrandom();    // New prng with an automatic seed.
    //   document.write(Math.random());       // Pretty much unpredictable.
    //
    //   Math.random = rng1;                  // Continue "hello" prng sequence.
    //   document.write(Math.random());       // Always 0.554769432473455
    //
    //   Math.seedrandom(autoseed);           // Restart at the previous seed.
    //   document.write(Math.random());       // Repeat the 'unpredictable' value.
    //
    // Notes:
    //
    // Each time seedrandom('arg') is called, entropy from the passed seed
    // is accumulated in a pool to help generate future seeds for the
    // zero-argument form of Math.seedrandom, so entropy can be injected over
    // time by calling seedrandom with explicit data repeatedly.
    //
    // On speed - This javascript implementation of Math.random() is about
    // 3-10x slower than the built-in Math.random() because it is not native
    // code, but this is typically fast enough anyway.  Seeding is more expensive,
    // especially if you use auto-seeding.  Some details (timings on Chrome 4):
    //
    // Our Math.random()            - avg less than 0.002 milliseconds per call
    // seedrandom('explicit')       - avg less than 0.5 milliseconds per call
    // seedrandom('explicit', true) - avg less than 2 milliseconds per call
    // seedrandom()                 - avg about 38 milliseconds per call
    //
    // LICENSE (BSD):
    //
    // Copyright 2010 David Bau, all rights reserved.
    //
    // Redistribution and use in source and binary forms, with or without
    // modification, are permitted provided that the following conditions are met:
    // 
    //   1. Redistributions of source code must retain the above copyright
    //      notice, this list of conditions and the following disclaimer.
    //
    //   2. Redistributions in binary form must reproduce the above copyright
    //      notice, this list of conditions and the following disclaimer in the
    //      documentation and/or other materials provided with the distribution.
    // 
    //   3. Neither the name of this module nor the names of its contributors may
    //      be used to endorse or promote products derived from this software
    //      without specific prior written permission.
    // 
    // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
    // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    //
    /**
     * All code is in an anonymous closure to keep the global namespace clean.
     *
     * @param {number=} overflow 
     * @param {number=} startdenom
     */
    
    // Patched by Seb so that seedrandom.js does not pollute the Math object.
    // My tests suggest that doing Math.trouble = 1 makes Math lookups about 5%
    // slower.
    numeric.seedrandom = { pow:Math.pow, random:Math.random };
    
    (function (pool, math, width, chunks, significance, overflow, startdenom) {
    
    
    //
    // seedrandom()
    // This is the seedrandom function described above.
    //
    math['seedrandom'] = function seedrandom(seed, use_entropy) {
      var key = [];
      var arc4;
    
      // Flatten the seed string or build one from local entropy if needed.
      seed = mixkey(flatten(
        use_entropy ? [seed, pool] :
        arguments.length ? seed :
        [new Date().getTime(), pool, window], 3), key);
    
      // Use the seed to initialize an ARC4 generator.
      arc4 = new ARC4(key);
    
      // Mix the randomness into accumulated entropy.
      mixkey(arc4.S, pool);
    
      // Override Math.random
    
      // This function returns a random double in [0, 1) that contains
      // randomness in every bit of the mantissa of the IEEE 754 value.
    
      math['random'] = function random() {  // Closure to return a random double:
        var n = arc4.g(chunks);             // Start with a numerator n < 2 ^ 48
        var d = startdenom;                 //   and denominator d = 2 ^ 48.
        var x = 0;                          //   and no 'extra last byte'.
        while (n < significance) {          // Fill up all significant digits by
          n = (n + x) * width;              //   shifting numerator and
          d *= width;                       //   denominator and generating a
          x = arc4.g(1);                    //   new least-significant-byte.
        }
        while (n >= overflow) {             // To avoid rounding up, before adding
          n /= 2;                           //   last byte, shift everything
          d /= 2;                           //   right using integer math until
          x >>>= 1;                         //   we have exactly the desired bits.
        }
        return (n + x) / d;                 // Form the number within [0, 1).
      };
    
      // Return the seed that was used
      return seed;
    };
    
    //
    // ARC4
    //
    // An ARC4 implementation.  The constructor takes a key in the form of
    // an array of at most (width) integers that should be 0 <= x < (width).
    //
    // The g(count) method returns a pseudorandom integer that concatenates
    // the next (count) outputs from ARC4.  Its return value is a number x
    // that is in the range 0 <= x < (width ^ count).
    //
    /** @constructor */
    function ARC4(key) {
      var t, u, me = this, keylen = key.length;
      var i = 0, j = me.i = me.j = me.m = 0;
      me.S = [];
      me.c = [];
    
      // The empty key [] is treated as [0].
      if (!keylen) { key = [keylen++]; }
    
      // Set up S using the standard key scheduling algorithm.
      while (i < width) { me.S[i] = i++; }
      for (i = 0; i < width; i++) {
        t = me.S[i];
        j = lowbits(j + t + key[i % keylen]);
        u = me.S[j];
        me.S[i] = u;
        me.S[j] = t;
      }
    
      // The "g" method returns the next (count) outputs as one number.
      me.g = function getnext(count) {
        var s = me.S;
        var i = lowbits(me.i + 1); var t = s[i];
        var j = lowbits(me.j + t); var u = s[j];
        s[i] = u;
        s[j] = t;
        var r = s[lowbits(t + u)];
        while (--count) {
          i = lowbits(i + 1); t = s[i];
          j = lowbits(j + t); u = s[j];
          s[i] = u;
          s[j] = t;
          r = r * width + s[lowbits(t + u)];
        }
        me.i = i;
        me.j = j;
        return r;
      };
      // For robust unpredictability discard an initial batch of values.
      // See http://www.rsa.com/rsalabs/node.asp?id=2009
      me.g(width);
    }
    
    //
    // flatten()
    // Converts an object tree to nested arrays of strings.
    //
    /** @param {Object=} result 
      * @param {string=} prop
      * @param {string=} typ */
    function flatten(obj, depth, result, prop, typ) {
      result = [];
      typ = typeof(obj);
      if (depth && typ == 'object') {
        for (prop in obj) {
          if (prop.indexOf('S') < 5) {    // Avoid FF3 bug (local/sessionStorage)
            try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
          }
        }
      }
      return (result.length ? result : obj + (typ != 'string' ? '\0' : ''));
    }
    
    //
    // mixkey()
    // Mixes a string seed into a key that is an array of integers, and
    // returns a shortened string seed that is equivalent to the result key.
    //
    /** @param {number=} smear 
      * @param {number=} j */
    function mixkey(seed, key, smear, j) {
      seed += '';                         // Ensure the seed is a string
      smear = 0;
      for (j = 0; j < seed.length; j++) {
        key[lowbits(j)] =
          lowbits((smear ^= key[lowbits(j)] * 19) + seed.charCodeAt(j));
      }
      seed = '';
      for (j in key) { seed += String.fromCharCode(key[j]); }
      return seed;
    }
    
    //
    // lowbits()
    // A quick "n mod width" for width a power of 2.
    //
    function lowbits(n) { return n & (width - 1); }
    
    //
    // The following constants are related to IEEE 754 limits.
    //
    startdenom = math.pow(width, chunks);
    significance = math.pow(2, significance);
    overflow = significance * 2;
    
    //
    // When seedrandom.js is loaded, we immediately mix a few bits
    // from the built-in RNG into the entropy pool.  Because we do
    // not want to intefere with determinstic PRNG state later,
    // seedrandom will not call math.random on its own again after
    // initialization.
    //
    mixkey(math.random(), pool);
    
    // End anonymous scope, and pass initial values.
    }(
      [],   // pool: entropy pool starts empty
      numeric.seedrandom, // math: package containing random, pow, and seedrandom
      256,  // width: each RC4 output is 0 <= x < 256
      6,    // chunks: at least six RC4 outputs for each double
      52    // significance: there are 52 significant digits in a double
      ));
    /* This file is a slightly modified version of quadprog.js from Alberto Santini.
     * It has been slightly modified by Sébastien Loisel to make sure that it handles
     * 0-based Arrays instead of 1-based Arrays.
     * License is in resources/LICENSE.quadprog */
    (function(exports) {
    
    function base0to1(A) {
        if(typeof A !== "object") { return A; }
        var ret = [], i,n=A.length;
        for(i=0;i<n;i++) ret[i+1] = base0to1(A[i]);
        return ret;
    }
    function base1to0(A) {
        if(typeof A !== "object") { return A; }
        var ret = [], i,n=A.length;
        for(i=1;i<n;i++) ret[i-1] = base1to0(A[i]);
        return ret;
    }
    
    function dpori(a, lda, n) {
        var i, j, k, kp1, t;
    
        for (k = 1; k <= n; k = k + 1) {
            a[k][k] = 1 / a[k][k];
            t = -a[k][k];
            //~ dscal(k - 1, t, a[1][k], 1);
            for (i = 1; i < k; i = i + 1) {
                a[i][k] = t * a[i][k];
            }
    
            kp1 = k + 1;
            if (n < kp1) {
                break;
            }
            for (j = kp1; j <= n; j = j + 1) {
                t = a[k][j];
                a[k][j] = 0;
                //~ daxpy(k, t, a[1][k], 1, a[1][j], 1);
                for (i = 1; i <= k; i = i + 1) {
                    a[i][j] = a[i][j] + (t * a[i][k]);
                }
            }
        }
    
    }
    
    function dposl(a, lda, n, b) {
        var i, k, kb, t;
    
        for (k = 1; k <= n; k = k + 1) {
            //~ t = ddot(k - 1, a[1][k], 1, b[1], 1);
            t = 0;
            for (i = 1; i < k; i = i + 1) {
                t = t + (a[i][k] * b[i]);
            }
    
            b[k] = (b[k] - t) / a[k][k];
        }
    
        for (kb = 1; kb <= n; kb = kb + 1) {
            k = n + 1 - kb;
            b[k] = b[k] / a[k][k];
            t = -b[k];
            //~ daxpy(k - 1, t, a[1][k], 1, b[1], 1);
            for (i = 1; i < k; i = i + 1) {
                b[i] = b[i] + (t * a[i][k]);
            }
        }
    }
    
    function dpofa(a, lda, n, info) {
        var i, j, jm1, k, t, s;
    
        for (j = 1; j <= n; j = j + 1) {
            info[1] = j;
            s = 0;
            jm1 = j - 1;
            if (jm1 < 1) {
                s = a[j][j] - s;
                if (s <= 0) {
                    break;
                }
                a[j][j] = Math.sqrt(s);
            } else {
                for (k = 1; k <= jm1; k = k + 1) {
                    //~ t = a[k][j] - ddot(k - 1, a[1][k], 1, a[1][j], 1);
                    t = a[k][j];
                    for (i = 1; i < k; i = i + 1) {
                        t = t - (a[i][j] * a[i][k]);
                    }
                    t = t / a[k][k];
                    a[k][j] = t;
                    s = s + t * t;
                }
                s = a[j][j] - s;
                if (s <= 0) {
                    break;
                }
                a[j][j] = Math.sqrt(s);
            }
            info[1] = 0;
        }
    }
    
    function qpgen2(dmat, dvec, fddmat, n, sol, crval, amat,
        bvec, fdamat, q, meq, iact, nact, iter, work, ierr) {
    
        var i, j, l, l1, info, it1, iwzv, iwrv, iwrm, iwsv, iwuv, nvl, r, iwnbv,
            temp, sum, t1, tt, gc, gs, nu,
            t1inf, t2min,
            vsmall, tmpa, tmpb,
            go;
    
        r = Math.min(n, q);
        l = 2 * n + (r * (r + 5)) / 2 + 2 * q + 1;
    
        vsmall = 1.0e-60;
        do {
            vsmall = vsmall + vsmall;
            tmpa = 1 + 0.1 * vsmall;
            tmpb = 1 + 0.2 * vsmall;
        } while (tmpa <= 1 || tmpb <= 1);
    
        for (i = 1; i <= n; i = i + 1) {
            work[i] = dvec[i];
        }
        for (i = n + 1; i <= l; i = i + 1) {
            work[i] = 0;
        }
        for (i = 1; i <= q; i = i + 1) {
            iact[i] = 0;
        }
    
        info = [];
    
        if (ierr[1] === 0) {
            dpofa(dmat, fddmat, n, info);
            if (info[1] !== 0) {
                ierr[1] = 2;
                return;
            }
            dposl(dmat, fddmat, n, dvec);
            dpori(dmat, fddmat, n);
        } else {
            for (j = 1; j <= n; j = j + 1) {
                sol[j] = 0;
                for (i = 1; i <= j; i = i + 1) {
                    sol[j] = sol[j] + dmat[i][j] * dvec[i];
                }
            }
            for (j = 1; j <= n; j = j + 1) {
                dvec[j] = 0;
                for (i = j; i <= n; i = i + 1) {
                    dvec[j] = dvec[j] + dmat[j][i] * sol[i];
                }
            }
        }
    
        crval[1] = 0;
        for (j = 1; j <= n; j = j + 1) {
            sol[j] = dvec[j];
            crval[1] = crval[1] + work[j] * sol[j];
            work[j] = 0;
            for (i = j + 1; i <= n; i = i + 1) {
                dmat[i][j] = 0;
            }
        }
        crval[1] = -crval[1] / 2;
        ierr[1] = 0;
    
        iwzv = n;
        iwrv = iwzv + n;
        iwuv = iwrv + r;
        iwrm = iwuv + r + 1;
        iwsv = iwrm + (r * (r + 1)) / 2;
        iwnbv = iwsv + q;
    
        for (i = 1; i <= q; i = i + 1) {
            sum = 0;
            for (j = 1; j <= n; j = j + 1) {
                sum = sum + amat[j][i] * amat[j][i];
            }
            work[iwnbv + i] = Math.sqrt(sum);
        }
        nact = 0;
        iter[1] = 0;
        iter[2] = 0;
    
        function fn_goto_50() {
            iter[1] = iter[1] + 1;
    
            l = iwsv;
            for (i = 1; i <= q; i = i + 1) {
                l = l + 1;
                sum = -bvec[i];
                for (j = 1; j <= n; j = j + 1) {
                    sum = sum + amat[j][i] * sol[j];
                }
                if (Math.abs(sum) < vsmall) {
                    sum = 0;
                }
                if (i > meq) {
                    work[l] = sum;
                } else {
                    work[l] = -Math.abs(sum);
                    if (sum > 0) {
                        for (j = 1; j <= n; j = j + 1) {
                            amat[j][i] = -amat[j][i];
                        }
                        bvec[i] = -bvec[i];
                    }
                }
            }
    
            for (i = 1; i <= nact; i = i + 1) {
                work[iwsv + iact[i]] = 0;
            }
    
            nvl = 0;
            temp = 0;
            for (i = 1; i <= q; i = i + 1) {
                if (work[iwsv + i] < temp * work[iwnbv + i]) {
                    nvl = i;
                    temp = work[iwsv + i] / work[iwnbv + i];
                }
            }
            if (nvl === 0) {
                return 999;
            }
    
            return 0;
        }
    
        function fn_goto_55() {
            for (i = 1; i <= n; i = i + 1) {
                sum = 0;
                for (j = 1; j <= n; j = j + 1) {
                    sum = sum + dmat[j][i] * amat[j][nvl];
                }
                work[i] = sum;
            }
    
            l1 = iwzv;
            for (i = 1; i <= n; i = i + 1) {
                work[l1 + i] = 0;
            }
            for (j = nact + 1; j <= n; j = j + 1) {
                for (i = 1; i <= n; i = i + 1) {
                    work[l1 + i] = work[l1 + i] + dmat[i][j] * work[j];
                }
            }
    
            t1inf = true;
            for (i = nact; i >= 1; i = i - 1) {
                sum = work[i];
                l = iwrm + (i * (i + 3)) / 2;
                l1 = l - i;
                for (j = i + 1; j <= nact; j = j + 1) {
                    sum = sum - work[l] * work[iwrv + j];
                    l = l + j;
                }
                sum = sum / work[l1];
                work[iwrv + i] = sum;
                if (iact[i] < meq) {
                    // continue;
                    break;
                }
                if (sum < 0) {
                    // continue;
                    break;
                }
                t1inf = false;
                it1 = i;
            }
    
            if (!t1inf) {
                t1 = work[iwuv + it1] / work[iwrv + it1];
                for (i = 1; i <= nact; i = i + 1) {
                    if (iact[i] < meq) {
                        // continue;
                        break;
                    }
                    if (work[iwrv + i] < 0) {
                        // continue;
                        break;
                    }
                    temp = work[iwuv + i] / work[iwrv + i];
                    if (temp < t1) {
                        t1 = temp;
                        it1 = i;
                    }
                }
            }
    
            sum = 0;
            for (i = iwzv + 1; i <= iwzv + n; i = i + 1) {
                sum = sum + work[i] * work[i];
            }
            if (Math.abs(sum) <= vsmall) {
                if (t1inf) {
                    ierr[1] = 1;
                    // GOTO 999
                    return 999;
                } else {
                    for (i = 1; i <= nact; i = i + 1) {
                        work[iwuv + i] = work[iwuv + i] - t1 * work[iwrv + i];
                    }
                    work[iwuv + nact + 1] = work[iwuv + nact + 1] + t1;
                    // GOTO 700
                    return 700;
                }
            } else {
                sum = 0;
                for (i = 1; i <= n; i = i + 1) {
                    sum = sum + work[iwzv + i] * amat[i][nvl];
                }
                tt = -work[iwsv + nvl] / sum;
                t2min = true;
                if (!t1inf) {
                    if (t1 < tt) {
                        tt = t1;
                        t2min = false;
                    }
                }
    
                for (i = 1; i <= n; i = i + 1) {
                    sol[i] = sol[i] + tt * work[iwzv + i];
                    if (Math.abs(sol[i]) < vsmall) {
                        sol[i] = 0;
                    }
                }
    
                crval[1] = crval[1] + tt * sum * (tt / 2 + work[iwuv + nact + 1]);
                for (i = 1; i <= nact; i = i + 1) {
                    work[iwuv + i] = work[iwuv + i] - tt * work[iwrv + i];
                }
                work[iwuv + nact + 1] = work[iwuv + nact + 1] + tt;
    
                if (t2min) {
                    nact = nact + 1;
                    iact[nact] = nvl;
    
                    l = iwrm + ((nact - 1) * nact) / 2 + 1;
                    for (i = 1; i <= nact - 1; i = i + 1) {
                        work[l] = work[i];
                        l = l + 1;
                    }
    
                    if (nact === n) {
                        work[l] = work[n];
                    } else {
                        for (i = n; i >= nact + 1; i = i - 1) {
                            if (work[i] === 0) {
                                // continue;
                                break;
                            }
                            gc = Math.max(Math.abs(work[i - 1]), Math.abs(work[i]));
                            gs = Math.min(Math.abs(work[i - 1]), Math.abs(work[i]));
                            if (work[i - 1] >= 0) {
                                temp = Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
                            } else {
                                temp = -Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
                            }
                            gc = work[i - 1] / temp;
                            gs = work[i] / temp;
    
                            if (gc === 1) {
                                // continue;
                                break;
                            }
                            if (gc === 0) {
                                work[i - 1] = gs * temp;
                                for (j = 1; j <= n; j = j + 1) {
                                    temp = dmat[j][i - 1];
                                    dmat[j][i - 1] = dmat[j][i];
                                    dmat[j][i] = temp;
                                }
                            } else {
                                work[i - 1] = temp;
                                nu = gs / (1 + gc);
                                for (j = 1; j <= n; j = j + 1) {
                                    temp = gc * dmat[j][i - 1] + gs * dmat[j][i];
                                    dmat[j][i] = nu * (dmat[j][i - 1] + temp) - dmat[j][i];
                                    dmat[j][i - 1] = temp;
    
                                }
                            }
                        }
                        work[l] = work[nact];
                    }
                } else {
                    sum = -bvec[nvl];
                    for (j = 1; j <= n; j = j + 1) {
                        sum = sum + sol[j] * amat[j][nvl];
                    }
                    if (nvl > meq) {
                        work[iwsv + nvl] = sum;
                    } else {
                        work[iwsv + nvl] = -Math.abs(sum);
                        if (sum > 0) {
                            for (j = 1; j <= n; j = j + 1) {
                                amat[j][nvl] = -amat[j][nvl];
                            }
                            bvec[nvl] = -bvec[nvl];
                        }
                    }
                    // GOTO 700
                    return 700;
                }
            }
    
            return 0;
        }
    
        function fn_goto_797() {
            l = iwrm + (it1 * (it1 + 1)) / 2 + 1;
            l1 = l + it1;
            if (work[l1] === 0) {
                // GOTO 798
                return 798;
            }
            gc = Math.max(Math.abs(work[l1 - 1]), Math.abs(work[l1]));
            gs = Math.min(Math.abs(work[l1 - 1]), Math.abs(work[l1]));
            if (work[l1 - 1] >= 0) {
                temp = Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
            } else {
                temp = -Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
            }
            gc = work[l1 - 1] / temp;
            gs = work[l1] / temp;
    
            if (gc === 1) {
                // GOTO 798
                return 798;
            }
            if (gc === 0) {
                for (i = it1 + 1; i <= nact; i = i + 1) {
                    temp = work[l1 - 1];
                    work[l1 - 1] = work[l1];
                    work[l1] = temp;
                    l1 = l1 + i;
                }
                for (i = 1; i <= n; i = i + 1) {
                    temp = dmat[i][it1];
                    dmat[i][it1] = dmat[i][it1 + 1];
                    dmat[i][it1 + 1] = temp;
                }
            } else {
                nu = gs / (1 + gc);
                for (i = it1 + 1; i <= nact; i = i + 1) {
                    temp = gc * work[l1 - 1] + gs * work[l1];
                    work[l1] = nu * (work[l1 - 1] + temp) - work[l1];
                    work[l1 - 1] = temp;
                    l1 = l1 + i;
                }
                for (i = 1; i <= n; i = i + 1) {
                    temp = gc * dmat[i][it1] + gs * dmat[i][it1 + 1];
                    dmat[i][it1 + 1] = nu * (dmat[i][it1] + temp) - dmat[i][it1 + 1];
                    dmat[i][it1] = temp;
                }
            }
    
            return 0;
        }
    
        function fn_goto_798() {
            l1 = l - it1;
            for (i = 1; i <= it1; i = i + 1) {
                work[l1] = work[l];
                l = l + 1;
                l1 = l1 + 1;
            }
    
            work[iwuv + it1] = work[iwuv + it1 + 1];
            iact[it1] = iact[it1 + 1];
            it1 = it1 + 1;
            if (it1 < nact) {
                // GOTO 797
                return 797;
            }
    
            return 0;
        }
    
        function fn_goto_799() {
            work[iwuv + nact] = work[iwuv + nact + 1];
            work[iwuv + nact + 1] = 0;
            iact[nact] = 0;
            nact = nact - 1;
            iter[2] = iter[2] + 1;
    
            return 0;
        }
    
        go = 0;
        while (true) {
            go = fn_goto_50();
            if (go === 999) {
                return;
            }
            while (true) {
                go = fn_goto_55();
                if (go === 0) {
                    break;
                }
                if (go === 999) {
                    return;
                }
                if (go === 700) {
                    if (it1 === nact) {
                        fn_goto_799();
                    } else {
                        while (true) {
                            fn_goto_797();
                            go = fn_goto_798();
                            if (go !== 797) {
                                break;
                            }
                        }
                        fn_goto_799();
                    }
                }
            }
        }
    
    }
    
    function solveQP(Dmat, dvec, Amat, bvec, meq, factorized) {
        Dmat = base0to1(Dmat);
        dvec = base0to1(dvec);
        Amat = base0to1(Amat);
        var i, n, q,
            nact, r,
            crval = [], iact = [], sol = [], work = [], iter = [],
            message;
    
        meq = meq || 0;
        factorized = factorized ? base0to1(factorized) : [undefined, 0];
        bvec = bvec ? base0to1(bvec) : [];
    
        // In Fortran the array index starts from 1
        n = Dmat.length - 1;
        q = Amat[1].length - 1;
    
        if (!bvec) {
            for (i = 1; i <= q; i = i + 1) {
                bvec[i] = 0;
            }
        }
        for (i = 1; i <= q; i = i + 1) {
            iact[i] = 0;
        }
        nact = 0;
        r = Math.min(n, q);
        for (i = 1; i <= n; i = i + 1) {
            sol[i] = 0;
        }
        crval[1] = 0;
        for (i = 1; i <= (2 * n + (r * (r + 5)) / 2 + 2 * q + 1); i = i + 1) {
            work[i] = 0;
        }
        for (i = 1; i <= 2; i = i + 1) {
            iter[i] = 0;
        }
    
        qpgen2(Dmat, dvec, n, n, sol, crval, Amat,
            bvec, n, q, meq, iact, nact, iter, work, factorized);
    
        message = "";
        if (factorized[1] === 1) {
            message = "constraints are inconsistent, no solution!";
        }
        if (factorized[1] === 2) {
            message = "matrix D in quadratic function is not positive definite!";
        }
    
        return {
            solution: base1to0(sol),
            value: base1to0(crval),
            unconstrained_solution: base1to0(dvec),
            iterations: base1to0(iter),
            iact: base1to0(iact),
            message: message
        };
    }
    exports.solveQP = solveQP;
    }(numeric));
    /*
    Shanti Rao sent me this routine by private email. I had to modify it
    slightly to work on Arrays instead of using a Matrix object.
    It is apparently translated from http://stitchpanorama.sourceforge.net/Python/svd.py
    */
    
    numeric.svd= function svd(A) {
        var temp;
    //Compute the thin SVD from G. H. Golub and C. Reinsch, Numer. Math. 14, 403-420 (1970)
        var prec= numeric.epsilon; //Math.pow(2,-52) // assumes double prec
        var tolerance= 1.e-64/prec;
        var itmax= 50;
        var c=0;
        var i=0;
        var j=0;
        var k=0;
        var l=0;
        
        var u= numeric.clone(A);
        var m= u.length;
        
        var n= u[0].length;
        
        if (m < n) throw "Need more rows than columns"
        
        var e = new Array(n);
        var q = new Array(n);
        for (i=0; i<n; i++) e[i] = q[i] = 0.0;
        var v = numeric.rep([n,n],0);
    //	v.zero();
        
         function pythag(a,b)
         {
            a = Math.abs(a)
            b = Math.abs(b)
            if (a > b)
                return a*Math.sqrt(1.0+(b*b/a/a))
            else if (b == 0.0) 
                return a
            return b*Math.sqrt(1.0+(a*a/b/b))
        }
    
        //Householder's reduction to bidiagonal form
    
        var f= 0.0;
        var g= 0.0;
        var h= 0.0;
        var x= 0.0;
        var y= 0.0;
        var z= 0.0;
        var s= 0.0;
        
        for (i=0; i < n; i++)
        {	
            e[i]= g;
            s= 0.0;
            l= i+1;
            for (j=i; j < m; j++) 
                s += (u[j][i]*u[j][i]);
            if (s <= tolerance)
                g= 0.0;
            else
            {	
                f= u[i][i];
                g= Math.sqrt(s);
                if (f >= 0.0) g= -g;
                h= f*g-s
                u[i][i]=f-g;
                for (j=l; j < n; j++)
                {
                    s= 0.0
                    for (k=i; k < m; k++) 
                        s += u[k][i]*u[k][j]
                    f= s/h
                    for (k=i; k < m; k++) 
                        u[k][j]+=f*u[k][i]
                }
            }
            q[i]= g
            s= 0.0
            for (j=l; j < n; j++) 
                s= s + u[i][j]*u[i][j]
            if (s <= tolerance)
                g= 0.0
            else
            {	
                f= u[i][i+1]
                g= Math.sqrt(s)
                if (f >= 0.0) g= -g
                h= f*g - s
                u[i][i+1] = f-g;
                for (j=l; j < n; j++) e[j]= u[i][j]/h
                for (j=l; j < m; j++)
                {	
                    s=0.0
                    for (k=l; k < n; k++) 
                        s += (u[j][k]*u[i][k])
                    for (k=l; k < n; k++) 
                        u[j][k]+=s*e[k]
                }	
            }
            y= Math.abs(q[i])+Math.abs(e[i])
            if (y>x) 
                x=y
        }
        
        // accumulation of right hand gtransformations
        for (i=n-1; i != -1; i+= -1)
        {	
            if (g != 0.0)
            {
                 h= g*u[i][i+1]
                for (j=l; j < n; j++) 
                    v[j][i]=u[i][j]/h
                for (j=l; j < n; j++)
                {	
                    s=0.0
                    for (k=l; k < n; k++) 
                        s += u[i][k]*v[k][j]
                    for (k=l; k < n; k++) 
                        v[k][j]+=(s*v[k][i])
                }	
            }
            for (j=l; j < n; j++)
            {
                v[i][j] = 0;
                v[j][i] = 0;
            }
            v[i][i] = 1;
            g= e[i]
            l= i
        }
        
        // accumulation of left hand transformations
        for (i=n-1; i != -1; i+= -1)
        {	
            l= i+1
            g= q[i]
            for (j=l; j < n; j++) 
                u[i][j] = 0;
            if (g != 0.0)
            {
                h= u[i][i]*g
                for (j=l; j < n; j++)
                {
                    s=0.0
                    for (k=l; k < m; k++) s += u[k][i]*u[k][j];
                    f= s/h
                    for (k=i; k < m; k++) u[k][j]+=f*u[k][i];
                }
                for (j=i; j < m; j++) u[j][i] = u[j][i]/g;
            }
            else
                for (j=i; j < m; j++) u[j][i] = 0;
            u[i][i] += 1;
        }
        
        // diagonalization of the bidiagonal form
        prec= prec*x
        for (k=n-1; k != -1; k+= -1)
        {
            for (var iteration=0; iteration < itmax; iteration++)
            {	// test f splitting
                var test_convergence = false
                for (l=k; l != -1; l+= -1)
                {	
                    if (Math.abs(e[l]) <= prec)
                    {	test_convergence= true
                        break 
                    }
                    if (Math.abs(q[l-1]) <= prec)
                        break 
                }
                if (!test_convergence)
                {	// cancellation of e[l] if l>0
                    c= 0.0
                    s= 1.0
                    var l1= l-1
                    for (i =l; i<k+1; i++)
                    {	
                        f= s*e[i]
                        e[i]= c*e[i]
                        if (Math.abs(f) <= prec)
                            break
                        g= q[i]
                        h= pythag(f,g)
                        q[i]= h
                        c= g/h
                        s= -f/h
                        for (j=0; j < m; j++)
                        {	
                            y= u[j][l1]
                            z= u[j][i]
                            u[j][l1] =  y*c+(z*s)
                            u[j][i] = -y*s+(z*c)
                        } 
                    }	
                }
                // test f convergence
                z= q[k]
                if (l== k)
                {	//convergence
                    if (z<0.0)
                    {	//q[k] is made non-negative
                        q[k]= -z
                        for (j=0; j < n; j++)
                            v[j][k] = -v[j][k]
                    }
                    break  //break out of iteration loop and move on to next k value
                }
                if (iteration >= itmax-1)
                    throw 'Error: no convergence.'
                // shift from bottom 2x2 minor
                x= q[l]
                y= q[k-1]
                g= e[k-1]
                h= e[k]
                f= ((y-z)*(y+z)+(g-h)*(g+h))/(2.0*h*y)
                g= pythag(f,1.0)
                if (f < 0.0)
                    f= ((x-z)*(x+z)+h*(y/(f-g)-h))/x
                else
                    f= ((x-z)*(x+z)+h*(y/(f+g)-h))/x
                // next QR transformation
                c= 1.0
                s= 1.0
                for (i=l+1; i< k+1; i++)
                {	
                    g= e[i]
                    y= q[i]
                    h= s*g
                    g= c*g
                    z= pythag(f,h)
                    e[i-1]= z
                    c= f/z
                    s= h/z
                    f= x*c+g*s
                    g= -x*s+g*c
                    h= y*s
                    y= y*c
                    for (j=0; j < n; j++)
                    {	
                        x= v[j][i-1]
                        z= v[j][i]
                        v[j][i-1] = x*c+z*s
                        v[j][i] = -x*s+z*c
                    }
                    z= pythag(f,h)
                    q[i-1]= z
                    c= f/z
                    s= h/z
                    f= c*g+s*y
                    x= -s*g+c*y
                    for (j=0; j < m; j++)
                    {
                        y= u[j][i-1]
                        z= u[j][i]
                        u[j][i-1] = y*c+z*s
                        u[j][i] = -y*s+z*c
                    }
                }
                e[l]= 0.0
                e[k]= f
                q[k]= x
            } 
        }
            
        //vt= transpose(v)
        //return (u,q,vt)
        for (i=0;i<q.length; i++) 
          if (q[i] < prec) q[i] = 0
          
        //sort eigenvalues	
        for (i=0; i< n; i++)
        {	 
        //writeln(q)
         for (j=i-1; j >= 0; j--)
         {
          if (q[j] < q[i])
          {
        //  writeln(i,'-',j)
           c = q[j]
           q[j] = q[i]
           q[i] = c
           for(k=0;k<u.length;k++) { temp = u[k][i]; u[k][i] = u[k][j]; u[k][j] = temp; }
           for(k=0;k<v.length;k++) { temp = v[k][i]; v[k][i] = v[k][j]; v[k][j] = temp; }
    //	   u.swapCols(i,j)
    //	   v.swapCols(i,j)
           i = j	   
          }
         }	
        }
        
        return {U:u,S:q,V:v}
    };
    
    
    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    
    },{}],66:[function(require,module,exports){
    "use strict"
    
    var twoProduct = require("two-product")
    var robustSum = require("robust-sum")
    var robustScale = require("robust-scale")
    var robustSubtract = require("robust-subtract")
    
    var NUM_EXPAND = 5
    
    var EPSILON     = 1.1102230246251565e-16
    var ERRBOUND3   = (3.0 + 16.0 * EPSILON) * EPSILON
    var ERRBOUND4   = (7.0 + 56.0 * EPSILON) * EPSILON
    
    function cofactor(m, c) {
      var result = new Array(m.length-1)
      for(var i=1; i<m.length; ++i) {
        var r = result[i-1] = new Array(m.length-1)
        for(var j=0,k=0; j<m.length; ++j) {
          if(j === c) {
            continue
          }
          r[k++] = m[i][j]
        }
      }
      return result
    }
    
    function matrix(n) {
      var result = new Array(n)
      for(var i=0; i<n; ++i) {
        result[i] = new Array(n)
        for(var j=0; j<n; ++j) {
          result[i][j] = ["m", j, "[", (n-i-1), "]"].join("")
        }
      }
      return result
    }
    
    function sign(n) {
      if(n & 1) {
        return "-"
      }
      return ""
    }
    
    function generateSum(expr) {
      if(expr.length === 1) {
        return expr[0]
      } else if(expr.length === 2) {
        return ["sum(", expr[0], ",", expr[1], ")"].join("")
      } else {
        var m = expr.length>>1
        return ["sum(", generateSum(expr.slice(0, m)), ",", generateSum(expr.slice(m)), ")"].join("")
      }
    }
    
    function determinant(m) {
      if(m.length === 2) {
        return [["sum(prod(", m[0][0], ",", m[1][1], "),prod(-", m[0][1], ",", m[1][0], "))"].join("")]
      } else {
        var expr = []
        for(var i=0; i<m.length; ++i) {
          expr.push(["scale(", generateSum(determinant(cofactor(m, i))), ",", sign(i), m[0][i], ")"].join(""))
        }
        return expr
      }
    }
    
    function orientation(n) {
      var pos = []
      var neg = []
      var m = matrix(n)
      var args = []
      for(var i=0; i<n; ++i) {
        if((i&1)===0) {
          pos.push.apply(pos, determinant(cofactor(m, i)))
        } else {
          neg.push.apply(neg, determinant(cofactor(m, i)))
        }
        args.push("m" + i)
      }
      var posExpr = generateSum(pos)
      var negExpr = generateSum(neg)
      var funcName = "orientation" + n + "Exact"
      var code = ["function ", funcName, "(", args.join(), "){var p=", posExpr, ",n=", negExpr, ",d=sub(p,n);\
    return d[d.length-1];};return ", funcName].join("")
      var proc = new Function("sum", "prod", "scale", "sub", code)
      return proc(robustSum, twoProduct, robustScale, robustSubtract)
    }
    
    var orientation3Exact = orientation(3)
    var orientation4Exact = orientation(4)
    
    var CACHED = [
      function orientation0() { return 0 },
      function orientation1() { return 0 },
      function orientation2(a, b) { 
        return b[0] - a[0]
      },
      function orientation3(a, b, c) {
        var l = (a[1] - c[1]) * (b[0] - c[0])
        var r = (a[0] - c[0]) * (b[1] - c[1])
        var det = l - r
        var s
        if(l > 0) {
          if(r <= 0) {
            return det
          } else {
            s = l + r
          }
        } else if(l < 0) {
          if(r >= 0) {
            return det
          } else {
            s = -(l + r)
          }
        } else {
          return det
        }
        var tol = ERRBOUND3 * s
        if(det >= tol || det <= -tol) {
          return det
        }
        return orientation3Exact(a, b, c)
      },
      function orientation4(a,b,c,d) {
        var adx = a[0] - d[0]
        var bdx = b[0] - d[0]
        var cdx = c[0] - d[0]
        var ady = a[1] - d[1]
        var bdy = b[1] - d[1]
        var cdy = c[1] - d[1]
        var adz = a[2] - d[2]
        var bdz = b[2] - d[2]
        var cdz = c[2] - d[2]
        var bdxcdy = bdx * cdy
        var cdxbdy = cdx * bdy
        var cdxady = cdx * ady
        var adxcdy = adx * cdy
        var adxbdy = adx * bdy
        var bdxady = bdx * ady
        var det = adz * (bdxcdy - cdxbdy) 
                + bdz * (cdxady - adxcdy)
                + cdz * (adxbdy - bdxady)
        var permanent = (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * Math.abs(adz)
                      + (Math.abs(cdxady) + Math.abs(adxcdy)) * Math.abs(bdz)
                      + (Math.abs(adxbdy) + Math.abs(bdxady)) * Math.abs(cdz)
        var tol = ERRBOUND4 * permanent
        if ((det > tol) || (-det > tol)) {
          return det
        }
        return orientation4Exact(a,b,c,d)
      }
    ]
    
    function slowOrient(args) {
      var proc = CACHED[args.length]
      if(!proc) {
        proc = CACHED[args.length] = orientation(args.length)
      }
      return proc.apply(undefined, args)
    }
    
    function generateOrientationProc() {
      while(CACHED.length <= NUM_EXPAND) {
        CACHED.push(orientation(CACHED.length))
      }
      var args = []
      var procArgs = ["slow"]
      for(var i=0; i<=NUM_EXPAND; ++i) {
        args.push("a" + i)
        procArgs.push("o" + i)
      }
      var code = [
        "function getOrientation(", args.join(), "){switch(arguments.length){case 0:case 1:return 0;"
      ]
      for(var i=2; i<=NUM_EXPAND; ++i) {
        code.push("case ", i, ":return o", i, "(", args.slice(0, i).join(), ");")
      }
      code.push("}var s=new Array(arguments.length);for(var i=0;i<arguments.length;++i){s[i]=arguments[i]};return slow(s);}return getOrientation")
      procArgs.push(code.join(""))
    
      var proc = Function.apply(undefined, procArgs)
      module.exports = proc.apply(undefined, [slowOrient].concat(CACHED))
      for(var i=0; i<=NUM_EXPAND; ++i) {
        module.exports[i] = CACHED[i]
      }
    }
    
    generateOrientationProc()
    },{"robust-scale":67,"robust-subtract":68,"robust-sum":69,"two-product":84}],67:[function(require,module,exports){
    "use strict"
    
    var twoProduct = require("two-product")
    var twoSum = require("two-sum")
    
    module.exports = scaleLinearExpansion
    
    function scaleLinearExpansion(e, scale) {
      var n = e.length
      if(n === 1) {
        var ts = twoProduct(e[0], scale)
        if(ts[0]) {
          return ts
        }
        return [ ts[1] ]
      }
      var g = new Array(2 * n)
      var q = [0.1, 0.1]
      var t = [0.1, 0.1]
      var count = 0
      twoProduct(e[0], scale, q)
      if(q[0]) {
        g[count++] = q[0]
      }
      for(var i=1; i<n; ++i) {
        twoProduct(e[i], scale, t)
        var pq = q[1]
        twoSum(pq, t[0], q)
        if(q[0]) {
          g[count++] = q[0]
        }
        var a = t[1]
        var b = q[1]
        var x = a + b
        var bv = x - a
        var y = b - bv
        q[1] = x
        if(y) {
          g[count++] = y
        }
      }
      if(q[1]) {
        g[count++] = q[1]
      }
      if(count === 0) {
        g[count++] = 0.0
      }
      g.length = count
      return g
    }
    },{"two-product":84,"two-sum":85}],68:[function(require,module,exports){
    "use strict"
    
    module.exports = robustSubtract
    
    //Easy case: Add two scalars
    function scalarScalar(a, b) {
      var x = a + b
      var bv = x - a
      var av = x - bv
      var br = b - bv
      var ar = a - av
      var y = ar + br
      if(y) {
        return [y, x]
      }
      return [x]
    }
    
    function robustSubtract(e, f) {
      var ne = e.length|0
      var nf = f.length|0
      if(ne === 1 && nf === 1) {
        return scalarScalar(e[0], -f[0])
      }
      var n = ne + nf
      var g = new Array(n)
      var count = 0
      var eptr = 0
      var fptr = 0
      var abs = Math.abs
      var ei = e[eptr]
      var ea = abs(ei)
      var fi = -f[fptr]
      var fa = abs(fi)
      var a, b
      if(ea < fa) {
        b = ei
        eptr += 1
        if(eptr < ne) {
          ei = e[eptr]
          ea = abs(ei)
        }
      } else {
        b = fi
        fptr += 1
        if(fptr < nf) {
          fi = -f[fptr]
          fa = abs(fi)
        }
      }
      if((eptr < ne && ea < fa) || (fptr >= nf)) {
        a = ei
        eptr += 1
        if(eptr < ne) {
          ei = e[eptr]
          ea = abs(ei)
        }
      } else {
        a = fi
        fptr += 1
        if(fptr < nf) {
          fi = -f[fptr]
          fa = abs(fi)
        }
      }
      var x = a + b
      var bv = x - a
      var y = b - bv
      var q0 = y
      var q1 = x
      var _x, _bv, _av, _br, _ar
      while(eptr < ne && fptr < nf) {
        if(ea < fa) {
          a = ei
          eptr += 1
          if(eptr < ne) {
            ei = e[eptr]
            ea = abs(ei)
          }
        } else {
          a = fi
          fptr += 1
          if(fptr < nf) {
            fi = -f[fptr]
            fa = abs(fi)
          }
        }
        b = q0
        x = a + b
        bv = x - a
        y = b - bv
        if(y) {
          g[count++] = y
        }
        _x = q1 + x
        _bv = _x - q1
        _av = _x - _bv
        _br = x - _bv
        _ar = q1 - _av
        q0 = _ar + _br
        q1 = _x
      }
      while(eptr < ne) {
        a = ei
        b = q0
        x = a + b
        bv = x - a
        y = b - bv
        if(y) {
          g[count++] = y
        }
        _x = q1 + x
        _bv = _x - q1
        _av = _x - _bv
        _br = x - _bv
        _ar = q1 - _av
        q0 = _ar + _br
        q1 = _x
        eptr += 1
        if(eptr < ne) {
          ei = e[eptr]
        }
      }
      while(fptr < nf) {
        a = fi
        b = q0
        x = a + b
        bv = x - a
        y = b - bv
        if(y) {
          g[count++] = y
        } 
        _x = q1 + x
        _bv = _x - q1
        _av = _x - _bv
        _br = x - _bv
        _ar = q1 - _av
        q0 = _ar + _br
        q1 = _x
        fptr += 1
        if(fptr < nf) {
          fi = -f[fptr]
        }
      }
      if(q0) {
        g[count++] = q0
      }
      if(q1) {
        g[count++] = q1
      }
      if(!count) {
        g[count++] = 0.0  
      }
      g.length = count
      return g
    }
    },{}],69:[function(require,module,exports){
    "use strict"
    
    module.exports = linearExpansionSum
    
    //Easy case: Add two scalars
    function scalarScalar(a, b) {
      var x = a + b
      var bv = x - a
      var av = x - bv
      var br = b - bv
      var ar = a - av
      var y = ar + br
      if(y) {
        return [y, x]
      }
      return [x]
    }
    
    function linearExpansionSum(e, f) {
      var ne = e.length|0
      var nf = f.length|0
      if(ne === 1 && nf === 1) {
        return scalarScalar(e[0], f[0])
      }
      var n = ne + nf
      var g = new Array(n)
      var count = 0
      var eptr = 0
      var fptr = 0
      var abs = Math.abs
      var ei = e[eptr]
      var ea = abs(ei)
      var fi = f[fptr]
      var fa = abs(fi)
      var a, b
      if(ea < fa) {
        b = ei
        eptr += 1
        if(eptr < ne) {
          ei = e[eptr]
          ea = abs(ei)
        }
      } else {
        b = fi
        fptr += 1
        if(fptr < nf) {
          fi = f[fptr]
          fa = abs(fi)
        }
      }
      if((eptr < ne && ea < fa) || (fptr >= nf)) {
        a = ei
        eptr += 1
        if(eptr < ne) {
          ei = e[eptr]
          ea = abs(ei)
        }
      } else {
        a = fi
        fptr += 1
        if(fptr < nf) {
          fi = f[fptr]
          fa = abs(fi)
        }
      }
      var x = a + b
      var bv = x - a
      var y = b - bv
      var q0 = y
      var q1 = x
      var _x, _bv, _av, _br, _ar
      while(eptr < ne && fptr < nf) {
        if(ea < fa) {
          a = ei
          eptr += 1
          if(eptr < ne) {
            ei = e[eptr]
            ea = abs(ei)
          }
        } else {
          a = fi
          fptr += 1
          if(fptr < nf) {
            fi = f[fptr]
            fa = abs(fi)
          }
        }
        b = q0
        x = a + b
        bv = x - a
        y = b - bv
        if(y) {
          g[count++] = y
        }
        _x = q1 + x
        _bv = _x - q1
        _av = _x - _bv
        _br = x - _bv
        _ar = q1 - _av
        q0 = _ar + _br
        q1 = _x
      }
      while(eptr < ne) {
        a = ei
        b = q0
        x = a + b
        bv = x - a
        y = b - bv
        if(y) {
          g[count++] = y
        }
        _x = q1 + x
        _bv = _x - q1
        _av = _x - _bv
        _br = x - _bv
        _ar = q1 - _av
        q0 = _ar + _br
        q1 = _x
        eptr += 1
        if(eptr < ne) {
          ei = e[eptr]
        }
      }
      while(fptr < nf) {
        a = fi
        b = q0
        x = a + b
        bv = x - a
        y = b - bv
        if(y) {
          g[count++] = y
        } 
        _x = q1 + x
        _bv = _x - q1
        _av = _x - _bv
        _br = x - _bv
        _ar = q1 - _av
        q0 = _ar + _br
        q1 = _x
        fptr += 1
        if(fptr < nf) {
          fi = f[fptr]
        }
      }
      if(q0) {
        g[count++] = q0
      }
      if(q1) {
        g[count++] = q1
      }
      if(!count) {
        g[count++] = 0.0  
      }
      g.length = count
      return g
    }
    },{}],70:[function(require,module,exports){
    'use strict';
    
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.resampleFloat32Array = resampleFloat32Array;
    
    var _fractionalDelay = require('fractional-delay');
    
    var _fractionalDelay2 = _interopRequireDefault(_fractionalDelay);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    /**
     * Convert an array, typed or not, to a Float32Array, with possible re-sampling.
     *
     * @param {Object} options
     * @param {Array} options.inputSamples input array
     * @param {Number} options.inputSampleRate in Hertz
     * @param {Number} [options.outputSampleRate=options.inputSampleRate]
     * @returns {Promise.<Float32Array|Error>}
     */
    function resampleFloat32Array() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    
      var promise = new Promise(function (resolve, reject) {
        var inputSamples = options.inputSamples;
        var inputSampleRate = options.inputSampleRate;
    
        var inputDelay = typeof options.inputDelay !== 'undefined' ? options.inputDelay : 0;
    
        var outputSampleRate = typeof options.outputSampleRate !== 'undefined' ? options.outputSampleRate : inputSampleRate;
    
        if (inputSampleRate === outputSampleRate && inputDelay === 0) {
          resolve(new Float32Array(inputSamples));
        } else {
          try {
            var outputSamplesNb = Math.ceil(inputSamples.length * outputSampleRate / inputSampleRate);
    
            var context = new window.OfflineAudioContext(1, outputSamplesNb, outputSampleRate);
    
            var inputBuffer = context.createBuffer(1, inputSamples.length, inputSampleRate);
    
            // create fractional delay
            var maxDelay = 1.0;
            var fractionalDelay = new _fractionalDelay2.default(inputSampleRate, maxDelay);
            fractionalDelay.setDelay(inputDelay / inputSampleRate);
    
            // create input buffer after applying fractional delay
            inputBuffer.getChannelData(0).set(fractionalDelay.process(inputSamples));
    
            var source = context.createBufferSource();
            source.buffer = inputBuffer;
            source.connect(context.destination);
    
            source.start(); // will start with offline context
    
            context.oncomplete = function (event) {
              var outputSamples = event.renderedBuffer.getChannelData(0);
              resolve(outputSamples);
            };
    
            context.startRendering();
          } catch (error) {
            reject(new Error('Unable to re-sample Float32Array. ' + error.message));
          }
        }
      });
    
      return promise;
    } /**
       * @fileOverview Audio utilities
       * @author Jean-Philippe.Lambert@ircam.fr
       * @copyright 2016 IRCAM, Paris, France
       * @license BSD-3-Clause
       */
    
    exports.default = {
      resampleFloat32Array: resampleFloat32Array
    };
    },{"fractional-delay":54}],71:[function(require,module,exports){
    'use strict';
    
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.tree = undefined;
    exports.distanceSquared = distanceSquared;
    exports.distance = distance;
    
    var _kd = require('kd.tree');
    
    var _kd2 = _interopRequireDefault(_kd);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    exports.tree = _kd2.default;
    
    /**
     * Get the squared distance between to points.
     *
     * (Avoid computing the square-root when unnecessary.)
     *
     * @param {Object} a in cartesian coordinates.
     * @param {Number} a.x
     * @param {Number} a.y
     * @param {Number} a.z
     * @param {Object} b in cartesian coordinates.
     * @param {Number} b.x
     * @param {Number} b.y
     * @param {Number} b.z
     * @returns {Number}
     */
    /**
     * @fileOverview Helpers for k-d tree.
     * @author Jean-Philippe.Lambert@ircam.fr
     * @copyright 2015-2016 IRCAM, Paris, France
     * @license BSD-3-Clause
     */
    
    function distanceSquared(a, b) {
      var x = b.x - a.x;
      var y = b.y - a.y;
      var z = b.z - a.z;
      return x * x + y * y + z * z;
    }
    
    /**
     * Get the distance between to points.
     *
     * @param {Object} a in cartesian coordinates.
     * @param {Number} a.x
     * @param {Number} a.y
     * @param {Number} a.z
     * @param {Object} b in cartesian coordinates.
     * @param {Number} b.x
     * @param {Number} b.y
     * @param {Number} b.z
     * @returns {Number}
     */
    function distance(a, b) {
      return Math.sqrt(this.distanceSquared(a, b));
    }
    
    exports.default = {
      distance: distance,
      distanceSquared: distanceSquared,
      tree: _kd2.default
    };
    },{"kd.tree":63}],72:[function(require,module,exports){
    'use strict';
    
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.sofaCartesianToGl = sofaCartesianToGl;
    exports.glToSofaCartesian = glToSofaCartesian;
    exports.sofaCartesianToSofaSpherical = sofaCartesianToSofaSpherical;
    exports.sofaSphericalToSofaCartesian = sofaSphericalToSofaCartesian;
    exports.sofaSphericalToGl = sofaSphericalToGl;
    exports.glToSofaSpherical = glToSofaSpherical;
    exports.sofaToSofaCartesian = sofaToSofaCartesian;
    exports.spat4CartesianToGl = spat4CartesianToGl;
    exports.glToSpat4Cartesian = glToSpat4Cartesian;
    exports.spat4CartesianToSpat4Spherical = spat4CartesianToSpat4Spherical;
    exports.spat4SphericalToSpat4Cartesian = spat4SphericalToSpat4Cartesian;
    exports.spat4SphericalToGl = spat4SphericalToGl;
    exports.glToSpat4Spherical = glToSpat4Spherical;
    exports.systemType = systemType;
    exports.systemToGl = systemToGl;
    exports.glToSystem = glToSystem;
    
    var _degree = require('./degree');
    
    var _degree2 = _interopRequireDefault(_degree);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    /**
     * Coordinates as an array of 3 values:
     * [x, y, z] or [azimuth, elevation, distance], depending on system
     *
     * @typedef {vec3} Coordinates
     */
    
    /**
     * Coordinate system: `gl`, `sofaCartesian`, `sofaSpherical`,
     * `spat4Cartesian`, or `spat4Spherical`.
     *
     * @typedef {String} CoordinateSystem
     */
    
    // ----------------------------- SOFA
    
    /**
     * SOFA cartesian coordinate system: `sofaCartesian`.
     *
     * SOFA distances are in metres.
     *
     * <pre>
     *
     * SOFA          +z  +x             openGL    +y
     *                | /                          |
     *                |/                           |
     *         +y ----o                            o---- +x
     *                                            /
     *                                           /
     *                                          +z
     *
     * SOFA.x = -openGL.z               openGL.x = -SOFA.y
     * SOFA.y = -openGL.x               openGL.y =  SOFA.z
     * SOFA.z =  openGL.y               openGL.z = -SOFA.x
     *
     * </pre>
     *
     * @typedef {Coordinates} SofaCartesian
     */
    
    /**
     * SOFA spherical coordinate system:  `sofaSpherical`.
     *
     * SOFA angles are in degrees.
     *
     * <pre>
     *
     * SOFA.azimuth = atan2(SOFA.y, SOFA.x)
     * SOFA.elevation = atan2(SOFA.z, sqrt(SOFA.x * SOFA.x + SOFA.y * SOFA.y) );
     * SOFA.distance = sqrt(SOFA.x * SOFA.x + SOFA.y * SOFA.y + SOFA.z * SOFA.z)
     *
     * </pre>
     *
     * @typedef {Coordinates} SofaSpherical
     */
    
    /**
     * Convert SOFA cartesian coordinates to openGL.
     *
     * @param {Coordinates} out in-place if out === a.
     * @param {Coordinates} a
     * @returns {Coordinates} out
     */
    function sofaCartesianToGl(out, a) {
      // copy to handle in-place
      var x = a[0];
      var y = a[1];
      var z = a[2];
    
      out[0] = 0 - y;
      out[1] = z;
      out[2] = 0 - x;
    
      return out;
    }
    
    /**
     * Convert openGL coordinates to SOFA cartesian.
     *
     * @param {Coordinates} out in-place if out === a.
     * @param {Coordinates} a
     * @returns {Coordinates} out
     */
    /**
     * @fileOverview Coordinate systems conversions. openGL, SOFA, and Spat4 (Ircam).
     *
     * @author Jean-Philippe.Lambert@ircam.fr
     * @copyright 2015-2016 IRCAM, Paris, France
     * @license BSD-3-Clause
     */
    
    function glToSofaCartesian(out, a) {
      // copy to handle in-place
      var x = a[0];
      var y = a[1];
      var z = a[2];
    
      out[0] = 0 - z;
      out[1] = 0 - x;
      out[2] = y;
    
      return out;
    }
    
    /**
     * Convert SOFA cartesian coordinates to SOFA spherical.
     *
     * @param {Coordinates} out in-place if out === a.
     * @param {Coordinates} a
     * @returns {Coordinates} out
     */
    function sofaCartesianToSofaSpherical(out, a) {
      // copy to handle in-place
      var x = a[0];
      var y = a[1];
      var z = a[2];
    
      var x2y2 = x * x + y * y;
    
      // from [-180, 180] to [0, 360);
      out[0] = (_degree2.default.atan2(y, x) + 360) % 360;
    
      out[1] = _degree2.default.atan2(z, Math.sqrt(x2y2));
      out[2] = Math.sqrt(x2y2 + z * z);
    
      return out;
    }
    
    /**
     * Convert SOFA spherical coordinates to SOFA spherical.
     *
     * @param {Coordinates} out in-place if out === a.
     * @param {Coordinates} a
     * @returns {Coordinates} out
     */
    function sofaSphericalToSofaCartesian(out, a) {
      // copy to handle in-place
      var azimuth = a[0];
      var elevation = a[1];
      var distance = a[2];
    
      var cosE = _degree2.default.cos(elevation);
      out[0] = distance * cosE * _degree2.default.cos(azimuth); // SOFA.x
      out[1] = distance * cosE * _degree2.default.sin(azimuth); // SOFA.y
      out[2] = distance * _degree2.default.sin(elevation); // SOFA.z
    
      return out;
    }
    
    /**
     * Convert SOFA spherical coordinates to openGL.
     *
     * @param {Coordinates} out in-place if out === a.
     * @param {Coordinates} a
     * @returns {Coordinates} out
     */
    function sofaSphericalToGl(out, a) {
      // copy to handle in-place
      var azimuth = a[0];
      var elevation = a[1];
      var distance = a[2];
    
      var cosE = _degree2.default.cos(elevation);
      out[0] = 0 - distance * cosE * _degree2.default.sin(azimuth); // -SOFA.y
      out[1] = distance * _degree2.default.sin(elevation); // SOFA.z
      out[2] = 0 - distance * cosE * _degree2.default.cos(azimuth); // -SOFA.x
    
      return out;
    }
    
    /**
     * Convert openGL coordinates to SOFA spherical.
     *
     * @param {Coordinates} out in-place if out === a.
     * @param {Coordinates} a
     * @returns {Coordinates} out
     */
    function glToSofaSpherical(out, a) {
      // copy to handle in-place
      // difference to avoid generating -0 out of 0
      var x = 0 - a[2]; // -openGL.z
      var y = 0 - a[0]; // -openGL.x
      var z = a[1]; // openGL.y
    
      var x2y2 = x * x + y * y;
    
      // from [-180, 180] to [0, 360);
      out[0] = (_degree2.default.atan2(y, x) + 360) % 360;
    
      out[1] = _degree2.default.atan2(z, Math.sqrt(x2y2));
      out[2] = Math.sqrt(x2y2 + z * z);
    
      return out;
    }
    
    /**
     * Convert coordinates to SOFA cartesian.
     *
     * @param {Coordinates} out in-place if out === a.
     * @param {Coordinates} a
     * @param {CoordinateSystem} system
     * @returns {Coordinates} out
     * @throws {Error} when the system is unknown.
     */
    function sofaToSofaCartesian(out, a, system) {
      switch (system) {
        case 'sofaCartesian':
          out[0] = a[0];
          out[1] = a[1];
          out[2] = a[2];
          break;
    
        case 'sofaSpherical':
          sofaSphericalToSofaCartesian(out, a);
          break;
    
        default:
          throw new Error('Bad coordinate system');
      }
      return out;
    }
    
    // ---------------- Spat4
    
    /**
     * Spat4 cartesian coordinate system: `spat4Cartesian`.
     *
     * Spat4 distances are in metres.
     *
     * <pre>
     *
     * Spat4         +z  +y             openGL    +y
     *                | /                          |
     *                |/                           |
     *                o---- +x                     o---- +x
     *                                            /
     *                                           /
     *                                         +z
     *
     * Spat4.x =  openGL.x               openGL.x =  Spat4.x
     * Spat4.y = -openGL.z               openGL.y =  Spat4.z
     * Spat4.z =  openGL.y               openGL.z = -Spat4.y
     *
     * </pre>
     *
     * @typedef {Coordinates} Spat4Cartesian
     */
    
    /**
     * Spat4 spherical coordinate system: `spat4Spherical`.
     *
     * Spat4 angles are in degrees.
     *
     * <pre>
     *
     * Spat4.azimuth = atan2(Spat4.x, Spat4.y)
     * Spat4.elevation = atan2(Spat4.z, sqrt(Spat4.x * Spat4.x + Spat4.y * Spat4.y) );
     * Spat4.distance = sqrt(Spat4.x * Spat4.x + Spat4.y * Spat4.y + Spat4.z * Spat4.z)
     *
     * </pre>
     *
     * @typedef {Coordinates} Spat4Spherical
     */
    
    /**
     * Convert Spat4 cartesian coordinates to openGL.
     *
     * @param {Coordinates} out in-place if out === a.
     * @param {Coordinates} a
     * @returns {Coordinates} out
     */
    function spat4CartesianToGl(out, a) {
      // copy to handle in-place
      var x = a[0];
      var y = a[1];
      var z = a[2];
    
      out[0] = x;
      out[1] = z;
      out[2] = 0 - y;
    
      return out;
    }
    
    /**
     * Convert openGL coordinates to Spat4 cartesian.
     *
     * @param {Coordinates} out in-place if out === a.
     * @param {Coordinates} a
     * @returns {Coordinates} out
     */
    function glToSpat4Cartesian(out, a) {
      // copy to handle in-place
      var x = a[0];
      var y = a[1];
      var z = a[2];
    
      out[0] = x;
      out[1] = 0 - z;
      out[2] = y;
    
      return out;
    }
    
    /**
     * Convert Spat4 cartesian coordinates to Spat4 spherical.
     *
     * @param {Coordinates} out in-place if out === a.
     * @param {Coordinates} a
     * @returns {Coordinates} out
     */
    function spat4CartesianToSpat4Spherical(out, a) {
      // copy to handle in-place
      var x = a[0];
      var y = a[1];
      var z = a[2];
    
      var x2y2 = x * x + y * y;
    
      out[0] = _degree2.default.atan2(x, y);
      out[1] = _degree2.default.atan2(z, Math.sqrt(x2y2));
      out[2] = Math.sqrt(x2y2 + z * z);
    
      return out;
    }
    
    /**
     * Convert Spat4 spherical coordinates to Spat4 spherical.
     *
     * @param {Coordinates} out in-place if out === a.
     * @param {Coordinates} a
     * @returns {Coordinates} out
     */
    function spat4SphericalToSpat4Cartesian(out, a) {
      // copy to handle in-place
      var azimuth = a[0];
      var elevation = a[1];
      var distance = a[2];
    
      var cosE = _degree2.default.cos(elevation);
      out[0] = distance * cosE * _degree2.default.sin(azimuth); // Spat4.x
      out[1] = distance * cosE * _degree2.default.cos(azimuth); // Spat4.y
      out[2] = distance * _degree2.default.sin(elevation); // Spat4.z
    
      return out;
    }
    
    /**
     * Convert Spat4 spherical coordinates to openGL.
     *
     * @param {Coordinates} out in-place if out === a.
     * @param {Coordinates} a
     * @returns {Coordinates} out
     */
    function spat4SphericalToGl(out, a) {
      // copy to handle in-place
      var azimuth = a[0];
      var elevation = a[1];
      var distance = a[2];
    
      var cosE = _degree2.default.cos(elevation);
      out[0] = distance * cosE * _degree2.default.sin(azimuth); // Spat4.x
      out[1] = distance * _degree2.default.sin(elevation); // Spat4.z
      out[2] = 0 - distance * cosE * _degree2.default.cos(azimuth); // -Spat4.y
    
      return out;
    }
    
    /**
     * Convert openGL coordinates to Spat4 spherical.
     *
     * @param {Coordinates} out in-place if out === a.
     * @param {Coordinates} a
     * @returns {Coordinates} out
     */
    function glToSpat4Spherical(out, a) {
      // copy to handle in-place
      // difference to avoid generating -0 out of 0
      var x = a[0]; // openGL.x
      var y = 0 - a[2]; // -openGL.z
      var z = a[1]; // openGL.y
    
      var x2y2 = x * x + y * y;
    
      out[0] = _degree2.default.atan2(x, y);
      out[1] = _degree2.default.atan2(z, Math.sqrt(x2y2));
      out[2] = Math.sqrt(x2y2 + z * z);
    
      return out;
    }
    
    // ---------------- named coordinate systems
    
    /**
     * Get the coordinate system general type (cartesian or spherical).
     *
     * @param {String} system
     * @returns {String} 'cartesian' or 'spherical', if `system` if of cartesian
     * or spherical type.
     */
    function systemType(system) {
      var type = void 0;
      if (system === 'sofaCartesian' || system === 'spat4Cartesian' || system === 'gl') {
        type = 'cartesian';
      } else if (system === 'sofaSpherical' || system === 'spat4Spherical') {
        type = 'spherical';
      } else {
        throw new Error('Unknown coordinate system type ' + system);
      }
      return type;
    }
    
    /**
     * Convert coordinates to openGL.
     *
     * @param {Coordinates} out in-place if out === a.
     * @param {Coordinates} a
     * @param {CoordinateSystem} system
     * @returns {Coordinates} out
     * @throws {Error} when the system is unknown.
     */
    function systemToGl(out, a, system) {
      switch (system) {
        case 'gl':
          out[0] = a[0];
          out[1] = a[1];
          out[2] = a[2];
          break;
    
        case 'sofaCartesian':
          sofaCartesianToGl(out, a);
          break;
    
        case 'sofaSpherical':
          sofaSphericalToGl(out, a);
          break;
    
        case 'spat4Cartesian':
          spat4CartesianToGl(out, a);
          break;
    
        case 'spat4Spherical':
          spat4SphericalToGl(out, a);
          break;
    
        default:
          throw new Error('Bad coordinate system');
      }
      return out;
    }
    
    /**
     * Convert openGL coordinates to other system.
     *
     * @param {Coordinates} out in-place if out === a.
     * @param {Coordinates} a
     * @param {CoordinateSystem} system
     * @returns {Coordinates} out
     * @throws {Error} when the system is unknown.
     */
    function glToSystem(out, a, system) {
      switch (system) {
        case 'gl':
          out[0] = a[0];
          out[1] = a[1];
          out[2] = a[2];
          break;
    
        case 'sofaCartesian':
          glToSofaCartesian(out, a);
          break;
    
        case 'sofaSpherical':
          glToSofaSpherical(out, a);
          break;
    
        case 'spat4Cartesian':
          glToSpat4Cartesian(out, a);
          break;
    
        case 'spat4Spherical':
          glToSpat4Spherical(out, a);
          break;
    
        default:
          throw new Error('Bad coordinate system');
      }
      return out;
    }
    
    exports.default = {
      glToSofaCartesian: glToSofaCartesian,
      glToSofaSpherical: glToSofaSpherical,
      glToSpat4Cartesian: glToSpat4Cartesian,
      glToSpat4Spherical: glToSpat4Spherical,
      glToSystem: glToSystem,
      sofaCartesianToGl: sofaCartesianToGl,
      sofaCartesianToSofaSpherical: sofaCartesianToSofaSpherical,
      sofaSphericalToGl: sofaSphericalToGl,
      sofaSphericalToSofaCartesian: sofaSphericalToSofaCartesian,
      sofaToSofaCartesian: sofaToSofaCartesian,
      spat4CartesianToGl: spat4CartesianToGl,
      spat4CartesianToSpat4Spherical: spat4CartesianToSpat4Spherical,
      spat4SphericalToGl: spat4SphericalToGl,
      spat4SphericalToSpat4Cartesian: spat4SphericalToSpat4Cartesian,
      systemToGl: systemToGl,
      systemType: systemType
    };
    },{"./degree":73}],73:[function(require,module,exports){
    "use strict";
    
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.toRadian = toRadian;
    exports.fromRadian = fromRadian;
    exports.cos = cos;
    exports.sin = sin;
    exports.atan2 = atan2;
    /**
     * @fileOverview Convert to and from degree
     * @author Jean-Philippe.Lambert@ircam.fr
     * @copyright 2015-2016 IRCAM, Paris, France
     * @license BSD-3-Clause
     */
    
    /**
     * Degree to radian multiplication factor.
     *
     * @type {Number}
     */
    var toRadianFactor = exports.toRadianFactor = Math.PI / 180;
    
    /**
     * Radian to degree multiplication factor.
     *
     * @type {Number}
     */
    var fromRadianFactor = exports.fromRadianFactor = 1 / toRadianFactor;
    
    /**
     * Convert an angle in degrees to radians.
     *
     * @param {Number} angle in degrees
     * @returns {Number} angle in radians
     */
    function toRadian(angle) {
      return angle * toRadianFactor;
    }
    
    /**
     * Convert an angle in radians to degrees.
     *
     * @param {Number} angle in radians
     * @returns {Number} angle in degrees
     */
    function fromRadian(angle) {
      return angle * fromRadianFactor;
    }
    
    /**
     * Get the cosinus of an angle in degrees.
     *
     * @param {Number} angle
     * @returns {Number}
     */
    function cos(angle) {
      return Math.cos(angle * toRadianFactor);
    }
    
    /**
     * Get the sinus of an angle in degrees.
     *
     * @param {Number} angle
     * @returns {Number}
     */
    function sin(angle) {
      return Math.sin(angle * toRadianFactor);
    }
    
    /**
     * Get the arc-tangent (2 arguments) of 2 angles in degrees.
     *
     * @param {Number} y
     * @param {Number} x
     * @returns {Number}
     */
    function atan2(y, x) {
      return Math.atan2(y, x) * fromRadianFactor;
    }
    
    exports.default = {
      atan2: atan2,
      cos: cos,
      fromRadian: fromRadian,
      fromRadianFactor: fromRadianFactor,
      sin: sin,
      toRadian: toRadian,
      toRadianFactor: toRadianFactor
    };
    },{}],74:[function(require,module,exports){
    'use strict';
    
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ServerDataBase = exports.HrtfSet = undefined;
    
    var _HrtfSet = require('./sofa/HrtfSet');
    
    var _HrtfSet2 = _interopRequireDefault(_HrtfSet);
    
    var _ServerDataBase = require('./sofa/ServerDataBase');
    
    var _ServerDataBase2 = _interopRequireDefault(_ServerDataBase);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    exports.HrtfSet = _HrtfSet2.default;
    exports.ServerDataBase = _ServerDataBase2.default;
    exports.default = {
      HrtfSet: _HrtfSet2.default,
      ServerDataBase: _ServerDataBase2.default
    };
    
    // import audio from './audio';
    // export { audio };
    // import common from './common';
    // export { common };
    // import geometry from './geometry';
    // export { geometry };
    // import info from './info';
    // export { info };
    // import sofa from './sofa';
    // export { sofa };
    
    // export default {
    //   audio,
    //   common,
    //   geometry,
    //   info,
    //   sofa,
    // };
    },{"./sofa/HrtfSet":76,"./sofa/ServerDataBase":77}],75:[function(require,module,exports){
    'use strict';
    
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.version = exports.name = exports.license = exports.description = undefined;
    
    var _package = require('../package.json');
    
    var _package2 = _interopRequireDefault(_package);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    /**
     * @module info
     */
    
    /**
     * Short description of the library.
     *
     * @type {String}
     */
    var description = _package2.default.description;
    
    /**
     * License of the library.
     *
     * @type {String}
     */
    /**
     * @fileOverview Information on the library, from the `package.json` file.
     *
     * @author Jean-Philippe.Lambert@ircam.fr
     * @copyright 2016 IRCAM, Paris, France
     * @license BSD-3-Clause
     */
    
    exports.description = description;
    var license = _package2.default.license;
    
    /**
     * Name of the library.
     *
     * @type {String}
     */
    
    exports.license = license;
    var name = _package2.default.name;
    
    /**
     * Semantic version of the library.
     *
     * @type {String}
     */
    
    exports.name = name;
    var version = _package2.default.version;
    exports.version = version;
    exports.default = {
      description: description,
      license: license,
      name: name,
      version: version
    };
    },{"../package.json":81}],76:[function(require,module,exports){
    'use strict';
    
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.HrtfSet = undefined;
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
fileOverview Container for HRTF set: load a set from an URL and get
filters from corresponding positions.

author Jean-Philippe.Lambert@ircam.fr
copyright 2015-2016 IRCAM, Paris, France
license BSD-3-Clause
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          */
    
    var _glMatrix = require('gl-matrix');
    
    var glMatrix = _interopRequireWildcard(_glMatrix);
    
    var _info = require('../info');
    
    var _info2 = _interopRequireDefault(_info);
    
    var _parseDataSet = require('./parseDataSet');
    
    var _parseSofa = require('./parseSofa');
    
    var _coordinates = require('../geometry/coordinates');
    
    var _coordinates2 = _interopRequireDefault(_coordinates);
    
    var _KdTree = require('../geometry/KdTree');
    
    var _KdTree2 = _interopRequireDefault(_KdTree);
    
    var _utilities = require('../audio/utilities');
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
    
    function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    /**
     * Container for HRTF set.
     */
    var HrtfSet = exports.HrtfSet = function () {
    
      /**
       * Constructs an HRTF set. Note that the filter positions are applied
       * during the load of an URL.
       *
       * @see {@link HrtfSet#load}
       *
       * @param {Object} options
       * @param {AudioContext} options.audioContext mandatory for the creation
       * of FIR audio buffers
       * @param {CoordinateSystem} [options.coordinateSystem='gl']
       * {@link HrtfSet#coordinateSystem}
       * @param {CoordinateSystem} [options.filterCoordinateSystem=options.coordinateSystem]
       * {@link HrtfSet#filterCoordinateSystem}
       * @param {Array.<Coordinates>} [options.filterPositions=undefined]
       * {@link HrtfSet#filterPositions}
       * array of positions to filter. Use undefined to use all positions.
       * @param {Boolean} [options.filterAfterLoad=false] true to filter after
       * full load of SOFA file, instead of multiple partial loading.
       * {@link HrtfSet#filterAfterLoad}
       */
      function HrtfSet() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    
        _classCallCheck(this, HrtfSet);
    
        this._audioContext = options.audioContext;
    
        this._ready = false;
    
        this.coordinateSystem = options.coordinateSystem;
    
        this.filterCoordinateSystem = options.filterCoordinateSystem;
        this.filterPositions = options.filterPositions;
    
        this.filterAfterLoad = options.filterAfterLoad;
      }
    
      // ------------ accessors
    
      /**
       * Set coordinate system for positions.
       * @param {CoordinateSystem} [system='gl']
       */
    
    
      _createClass(HrtfSet, [{
        key: 'applyFilterPositions',
    
    
        // ------------- public methods
    
        /**
         * Apply filter positions to an existing set of HRTF. (After a successful
         * load.)
         *
         * This is destructive.
         *
         * @see {@link HrtfSet#load}
         */
        value: function applyFilterPositions() {
          var _this = this;
    
          // do not use getter for gl positions
          var filteredPositions = this._filterPositions.map(function (current) {
            return _this._kdt.nearest({ x: current[0], y: current[1], z: current[2] }, 1).pop()[0]; // nearest data
          });
    
          // filter out duplicates
          filteredPositions = [].concat(_toConsumableArray(new Set(filteredPositions)));
    
          this._kdt = _KdTree2.default.tree.createKdTree(filteredPositions, _KdTree2.default.distanceSquared, ['x', 'y', 'z']);
        }
    
        /**
         * Load an URL and generate the corresponding set of IR buffers.
         *
         * @param {String} sourceUrl
         * @returns {Promise.<this|Error>} resolve when the URL sucessfully
         * loaded.
         */
    
      }, {
        key: 'load',
        value: function load(sourceUrl) {
          var _this2 = this;
    
          var extension = sourceUrl.split('.').pop();
    
          var url = extension === 'sofa' ? sourceUrl + '.json' : sourceUrl;
    
          var promise = void 0;
    
          // need a server for partial downloading ("sofa" extension may be naive)
          var preFilter = typeof this._filterPositions !== 'undefined' && !this.filterAfterLoad && extension === 'sofa';
          if (preFilter) {
            promise = Promise.all([this._loadMetaAndPositions(sourceUrl), this._loadDataSet(sourceUrl)]).then(function (indicesAndDataSet) {
              var indices = indicesAndDataSet[0];
              var dataSet = indicesAndDataSet[1];
              return _this2._loadSofaPartial(sourceUrl, indices, dataSet).then(function () {
                _this2._ready = true;
                return _this2; // final resolve
              });
            }).catch(function () {
              // when pre-fitering fails, for any reason, try to post-filter
              // console.log(`Error while partial loading of ${sourceUrl}. `
              //             + `${error.message}. `
              //             + `Load full and post-filtering, instead.`);
              return _this2._loadSofaFull(url).then(function () {
                _this2.applyFilterPositions();
                _this2._ready = true;
                return _this2; // final resolve
              });
            });
          } else {
            promise = this._loadSofaFull(url).then(function () {
              if (typeof _this2._filterPositions !== 'undefined' && _this2.filterAfterLoad) {
                _this2.applyFilterPositions();
              }
              _this2._ready = true;
              return _this2; // final resolve
            });
          }
    
          return promise;
        }
    
        /**
         * Export the current HRTF set as a JSON string.
         *
         * When set, `this.filterPositions` reduce the actual number of filter, and
         * thus the exported set. The coordinate system of the export is
         * `this.filterCoordinateSystem`.
         *
         * @see {@link HrtfSet#filterCoordinateSystem}
         * @see {@link HrtfSet#filterPositions}
         *
         * @returns {String} as a SOFA JSON file.
         * @throws {Error} when this.filterCoordinateSystem is unknown.
         */
    
      }, {
        key: 'export',
        value: function _export() {
          var _this3 = this;
    
          // in a SOFA file, the source positions are the HrtfSet filter positions.
    
          // SOFA listener is the reference for HrtfSet filter positions
          // which is normalised in HrtfSet
    
          var SourcePosition = void 0;
          var SourcePositionType = _coordinates2.default.systemType(this.filterCoordinateSystem);
          switch (SourcePositionType) {
            case 'cartesian':
              SourcePosition = this._sofaSourcePosition.map(function (position) {
                return _coordinates2.default.glToSofaCartesian([], position);
              });
              break;
    
            case 'spherical':
              SourcePosition = this._sofaSourcePosition.map(function (position) {
                return _coordinates2.default.glToSofaSpherical([], position);
              });
              break;
    
            default:
              throw new Error('Bad source position type ' + SourcePositionType + ' ' + 'for export.');
          }
    
          var DataIR = this._sofaSourcePosition.map(function (position) {
            // retrieve fir for each position, without conversion
            var fir = _this3._kdt.nearest({ x: position[0], y: position[1], z: position[2] }, 1).pop()[0].fir; // nearest data
            var ir = [];
            for (var channel = 0; channel < fir.numberOfChannels; ++channel) {
              // Float32Array to array for stringify
              ir.push([].concat(_toConsumableArray(fir.getChannelData(channel))));
            }
            return ir;
          });
    
          return (0, _parseSofa.stringifySofa)({
            name: this._sofaName,
            metaData: this._sofaMetaData,
            ListenerPosition: [0, 0, 0],
            ListenerPositionType: 'cartesian',
            ListenerUp: [0, 0, 1],
            ListenerUpType: 'cartesian',
            ListenerView: [1, 0, 0],
            ListenerViewType: 'cartesian',
            SourcePositionType: SourcePositionType,
            SourcePosition: SourcePosition,
            DataSamplingRate: this._audioContext.sampleRate,
            DataDelay: this._sofaDelay,
            DataIR: DataIR,
            RoomVolume: this._sofaRoomVolume
          });
        }
    
        /**
         * @typedef {Object} HrtfSet.nearestType
         * @property {Number} distance from the request
         * @property {AudioBuffer} fir 2-channels impulse response
         * @property {Number} index original index in the SOFA set
         * @property {Coordinates} position using coordinateSystem coordinates
         * system.
         */
    
        /**
         * Get the nearest point in the HRTF set, after a successful load.
         *
         * @see {@link HrtfSet#load}
         *
         * @param {Coordinates} positionRequest
         * @returns {HrtfSet.nearestType}
         */
    
      }, {
        key: 'nearest',
        value: function nearest(positionRequest) {
          var position = _coordinates2.default.systemToGl([], positionRequest, this.coordinateSystem);
          var nearest = this._kdt.nearest({
            x: position[0],
            y: position[1],
            z: position[2]
          }, 1).pop(); // nearest only
          var data = nearest[0];
          _coordinates2.default.glToSystem(position, [data.x, data.y, data.z], this.coordinateSystem);
          return {
            distance: nearest[1],
            fir: data.fir,
            index: data.index,
            position: position
          };
        }
    
        /**
         * Get the FIR AudioBuffer that corresponds to the closest position in
         * the set.
         * @param {Coordinates} positionRequest
         * @returns {AudioBuffer}
         */
    
      }, {
        key: 'nearestFir',
        value: function nearestFir(positionRequest) {
          return this.nearest(positionRequest).fir;
        }
    
        // ----------- private methods
    
        /**
         * Creates a kd-tree out of the specified indices, positions, and FIR.
         *
         * @private
         *
         * @param {Array} indicesPositionsFirs
         * @returns {this}
         */
    
      }, {
        key: '_createKdTree',
        value: function _createKdTree(indicesPositionsFirs) {
          var _this4 = this;
    
          var positions = indicesPositionsFirs.map(function (value) {
            var impulseResponses = value[2];
            var fir = _this4._audioContext.createBuffer(impulseResponses.length, impulseResponses[0].length, _this4._audioContext.sampleRate);
            impulseResponses.forEach(function (samples, channel) {
              // do not use copyToChannel because of Safari <= 9
              fir.getChannelData(channel).set(samples);
            });
    
            return {
              index: value[0],
              x: value[1][0],
              y: value[1][1],
              z: value[1][2],
              fir: fir
            };
          });
    
          this._sofaSourcePosition = positions.map(function (position) {
            return [position.x, position.y, position.z];
          });
    
          this._kdt = _KdTree2.default.tree.createKdTree(positions, _KdTree2.default.distanceSquared, ['x', 'y', 'z']);
          return this;
        }
    
        /**
         * Asynchronously create Float32Arrays, with possible re-sampling.
         *
         * @private
         *
         * @param {Array.<Number>} indices
         * @param {Array.<Coordinates>} positions
         * @param {Array.<Float32Array>} firs
         * @returns {Promise.<Array|Error>}
         * @throws {Error} assertion that the channel count is 2
         */
    
      }, {
        key: '_generateIndicesPositionsFirs',
        value: function _generateIndicesPositionsFirs(indices, positions, firs, delays) {
          var _this5 = this;
    
          var sofaFirsPromises = firs.map(function (sofaFirChannels, index) {
            var channelCount = sofaFirChannels.length;
            if (channelCount !== 2) {
              throw new Error('Bad number of channels' + (' for IR index ' + indices[index]) + (' (' + channelCount + ' instead of 2)'));
            }
    
            /**
            * input delay can either be [[delayLeft, delayRight]]: unique for all
            * fir values, or [[dL1, dR1], ..., [dLN, dRN]]: per-position specific,
            * e.g. for minimum phase firs.
            */
            if (delays[0].length !== 2) {
              throw new Error('Bad delay format' + (' for IR index ' + indices[index]) + (' (first element in Data.Delay is ' + delays[0]) + ' instead of [[delayL, delayR]] )');
            }
            var inputDelays = typeof delays[index] !== 'undefined' ? delays[index] : delays[0];
    
            var sofaFirsChannelsPromises = sofaFirChannels.map(function (fir, index2) {
              if (inputDelays[index2] < 0) {
                // accept only positive delays
                throw new Error('Negative delay detected (not handled at the moment):' + (' delay index ' + indices[index]) + (' channel ' + index2));
              }
              return (0, _utilities.resampleFloat32Array)({
                inputSamples: fir,
                inputDelay: inputDelays[index2],
                inputSampleRate: _this5._sofaSampleRate,
                outputSampleRate: _this5._audioContext.sampleRate
              });
            });
            return Promise.all(sofaFirsChannelsPromises).then(function (firChannels) {
              return [indices[index], positions[index], firChannels];
            }).catch(function (error) {
              // re-throw
              throw new Error('Unable to re-sample impulse response ' + index + '. ' + error.message);
            });
          });
          return Promise.all(sofaFirsPromises);
        }
    
        /**
         * Try to load a data set from a SOFA URL.
         *
         * @private
         *
         * @param {String} sourceUrl
         * @returns {Promise.<Object|Error>}
         */
    
      }, {
        key: '_loadDataSet',
        value: function _loadDataSet(sourceUrl) {
          var promise = new Promise(function (resolve, reject) {
            var ddsUrl = sourceUrl + '.dds';
            var request = new window.XMLHttpRequest();
            request.open('GET', ddsUrl);
            request.onerror = function () {
              reject(new Error('Unable to GET ' + ddsUrl + ', status ' + request.status + ' ' + ('' + request.responseText)));
            };
    
            request.onload = function () {
              if (request.status < 200 || request.status >= 300) {
                request.onerror();
                return;
              }
    
              try {
                var dds = (0, _parseDataSet.parseDataSet)(request.response);
                resolve(dds);
              } catch (error) {
                // re-throw
                reject(new Error('Unable to parse ' + ddsUrl + '. ' + error.message));
              }
            }; // request.onload
    
            request.send();
          });
    
          return promise;
        }
    
        /**
         * Try to load meta-data and positions from a SOFA URL, to get the
         * indices closest to the filter positions.
         *
         * @private
         *
         * @param {String} sourceUrl
         * @returns {Promise.<Array.<Number>|Error>}
         */
    
      }, {
        key: '_loadMetaAndPositions',
        value: function _loadMetaAndPositions(sourceUrl) {
          var _this6 = this;
    
          var promise = new Promise(function (resolve, reject) {
            var positionsUrl = sourceUrl + '.json?' + 'ListenerPosition,ListenerUp,ListenerView,SourcePosition,' + 'Data.Delay,Data.SamplingRate,' + 'EmitterPosition,ReceiverPosition,RoomVolume'; // meta
    
            var request = new window.XMLHttpRequest();
            request.open('GET', positionsUrl);
            request.onerror = function () {
              reject(new Error('Unable to GET ' + positionsUrl + ', status ' + request.status + ' ' + ('' + request.responseText)));
            };
    
            request.onload = function () {
              if (request.status < 200 || request.status >= 300) {
                request.onerror();
                return;
              }
    
              try {
                var data = (0, _parseSofa.parseSofa)(request.response);
                _this6._setMetaData(data, sourceUrl);
    
                var sourcePositions = _this6._sourcePositionsToGl(data);
                var hrtfPositions = sourcePositions.map(function (position, index) {
                  return {
                    x: position[0],
                    y: position[1],
                    z: position[2],
                    index: index
                  };
                });
    
                var kdt = _KdTree2.default.tree.createKdTree(hrtfPositions, _KdTree2.default.distanceSquared, ['x', 'y', 'z']);
    
                var nearestIndices = _this6._filterPositions.map(function (current) {
                  return kdt.nearest({ x: current[0], y: current[1], z: current[2] }, 1).pop()[0] // nearest data
                  .index;
                });
    
                // filter out duplicates
                nearestIndices = [].concat(_toConsumableArray(new Set(nearestIndices)));
    
                _this6._sofaUrl = sourceUrl;
                resolve(nearestIndices);
              } catch (error) {
                // re-throw
                reject(new Error('Unable to parse ' + positionsUrl + '. ' + error.message));
              }
            }; // request.onload
    
            request.send();
          });
    
          return promise;
        }
    
        /**
         * Try to load full SOFA URL.
         *
         * @private
         *
         * @param {String} url
         * @returns {Promise.<this|Error>}
         */
    
      }, {
        key: '_loadSofaFull',
        value: function _loadSofaFull(url) {
          var _this7 = this;
    
          var promise = new Promise(function (resolve, reject) {
            var request = new window.XMLHttpRequest();
            request.open('GET', url);
            request.onerror = function () {
              reject(new Error('Unable to GET ' + url + ', status ' + request.status + ' ' + ('' + request.responseText)));
            };
    
            request.onload = function () {
              if (request.status < 200 || request.status >= 300) {
                request.onerror();
                return;
              }
    
              try {
                var data = (0, _parseSofa.parseSofa)(request.response);
                _this7._setMetaData(data, url);
                var sourcePositions = _this7._sourcePositionsToGl(data);
                _this7._generateIndicesPositionsFirs(sourcePositions.map(function (position, index) {
                  return index;
                }), // full
                sourcePositions, data['Data.IR'].data, data['Data.Delay'].data).then(function (indicesPositionsFirs) {
                  _this7._createKdTree(indicesPositionsFirs);
                  _this7._sofaUrl = url;
                  resolve(_this7);
                });
              } catch (error) {
                // re-throw
                reject(new Error('Unable to parse ' + url + '. ' + error.message));
              }
            }; // request.onload
    
            request.send();
          });
    
          return promise;
        }
    
        /**
         * Try to load partial data from a SOFA URL.
         *
         * @private
         *
         * @param {Array.<String>} sourceUrl
         * @param {Array.<Number>} indices
         * @param {Object} dataSet
         * @returns {Promise.<this|Error>}
         */
    
      }, {
        key: '_loadSofaPartial',
        value: function _loadSofaPartial(sourceUrl, indices, dataSet) {
          var _this8 = this;
    
          var urlPromises = indices.map(function (index) {
            var urlPromise = new Promise(function (resolve, reject) {
              var positionUrl = sourceUrl + '.json?' + ('SourcePosition[' + index + '][0:1:' + (dataSet.SourcePosition.C - 1) + '],') + ('Data.IR[' + index + '][0:1:' + (dataSet['Data.IR'].R - 1) + ']') + ('[0:1:' + (dataSet['Data.IR'].N - 1) + ']');
    
              var request = new window.XMLHttpRequest();
              request.open('GET', positionUrl);
              request.onerror = function () {
                reject(new Error('Unable to GET ' + positionUrl + ', status ' + request.status + ' ' + ('' + request.responseText)));
              };
    
              request.onload = function () {
                if (request.status < 200 || request.status >= 300) {
                  request.onerror();
                }
    
                try {
                  var data = (0, _parseSofa.parseSofa)(request.response);
                  // (meta-data is already loaded)
    
                  var sourcePositions = _this8._sourcePositionsToGl(data);
                  _this8._generateIndicesPositionsFirs([index], sourcePositions, data['Data.IR'].data, data['Data.Delay'].data).then(function (indicesPositionsFirs) {
                    // One position per URL here
                    // Array made of multiple promises, later
                    resolve(indicesPositionsFirs[0]);
                  });
                } catch (error) {
                  // re-throw
                  reject(new Error('Unable to parse ' + positionUrl + '. ' + error.message));
                }
              }; // request.onload
    
              request.send();
            });
    
            return urlPromise;
          });
    
          return Promise.all(urlPromises).then(function (indicesPositionsFirs) {
            _this8._createKdTree(indicesPositionsFirs);
            return _this8; // final resolve
          });
        }
    
        /**
         * Set meta-data, and assert for supported HRTF type.
         *
         * @private
         *
         * @param {Object} data
         * @param {String} sourceUrl
         * @throws {Error} assertion for FIR data.
         */
    
      }, {
        key: '_setMetaData',
        value: function _setMetaData(data, sourceUrl) {
          if (typeof data.metaData.DataType !== 'undefined' && data.metaData.DataType !== 'FIR') {
            throw new Error('According to meta-data, SOFA data type is not FIR');
          }
    
          var dateString = new Date().toISOString();
    
          this._sofaName = typeof data.name !== 'undefined' ? '' + data.name : 'HRTF.sofa';
    
          this._sofaMetaData = typeof data.metaData !== 'undefined' ? data.metaData : {};
    
          // append conversion information
          if (typeof sourceUrl !== 'undefined') {
            this._sofaMetaData.OriginalUrl = sourceUrl;
          }
    
          this._sofaMetaData.Converter = 'Ircam ' + _info2.default.name + ' ' + _info2.default.version + ' ' + 'javascript API ';
          this._sofaMetaData.DateConverted = dateString;
    
          this._sofaSampleRate = typeof data['Data.SamplingRate'] !== 'undefined' ? data['Data.SamplingRate'].data[0] : 48000; // Table C.1
          if (this._sofaSampleRate !== this._audioContext.sampleRate) {
            this._sofaMetaData.OriginalSampleRate = this._sofaSampleRate;
          }
    
          this._sofaDelay = typeof data['Data.Delay'] !== 'undefined' ? data['Data.Delay'].data : [0, 0];
    
          this._sofaRoomVolume = typeof data.RoomVolume !== 'undefined' ? data.RoomVolume.data[0] : undefined;
    
          // Convert listener position, up, and view to SOFA cartesian,
          // to generate a SOFA-to-GL look-at mat4.
          // Default SOFA type is 'cartesian' (see table D.4A).
    
          var listenerPosition = _coordinates2.default.sofaToSofaCartesian([], data.ListenerPosition.data[0], (0, _parseSofa.conformSofaCoordinateSystem)(data.ListenerPosition.Type || 'cartesian'));
    
          var listenerView = _coordinates2.default.sofaToSofaCartesian([], data.ListenerView.data[0], (0, _parseSofa.conformSofaCoordinateSystem)(data.ListenerView.Type || 'cartesian'));
    
          var listenerUp = _coordinates2.default.sofaToSofaCartesian([], data.ListenerUp.data[0], (0, _parseSofa.conformSofaCoordinateSystem)(data.ListenerUp.Type || 'cartesian'));
    
          this._sofaToGl = glMatrix.mat4.lookAt([], listenerPosition, listenerView, listenerUp);
        }
    
        /**
         * Convert to GL coordinates, in-place.
         *
         * @private
         *
         * @param {Object} data
         * @returns {Array.<Coordinates>}
         * @throws {Error}
         */
    
      }, {
        key: '_sourcePositionsToGl',
        value: function _sourcePositionsToGl(data) {
          var _this9 = this;
    
          var sourcePositions = data.SourcePosition.data; // reference
          var sourceCoordinateSystem = typeof data.SourcePosition.Type !== 'undefined' ? data.SourcePosition.Type : 'spherical'; // default (SOFA Table D.4C)
          switch (sourceCoordinateSystem) {
            case 'cartesian':
              sourcePositions.forEach(function (position) {
                glMatrix.vec3.transformMat4(position, position, _this9._sofaToGl);
              });
              break;
    
            case 'spherical':
              sourcePositions.forEach(function (position) {
                _coordinates2.default.sofaSphericalToSofaCartesian(position, position); // in-place
                glMatrix.vec3.transformMat4(position, position, _this9._sofaToGl);
              });
              break;
    
            default:
              throw new Error('Bad source position type');
          }
    
          return sourcePositions;
        }
      }, {
        key: 'coordinateSystem',
        set: function set(system) {
          this._coordinateSystem = typeof system !== 'undefined' ? system : 'gl';
        }
    
        /**
         * Get coordinate system for positions.
         *
         * @returns {CoordinateSystem}
         */
        ,
        get: function get() {
          return this._coordinateSystem;
        }
    
        /**
         * Set coordinate system for filter positions.
         *
         * @param {CoordinateSystem} [system] undefined to use coordinateSystem
         */
    
      }, {
        key: 'filterCoordinateSystem',
        set: function set(system) {
          this._filterCoordinateSystem = typeof system !== 'undefined' ? system : this.coordinateSystem;
        }
    
        /**
         * Get coordinate system for filter positions.
         */
        ,
        get: function get() {
          return this._filterCoordinateSystem;
        }
    
        /**
         * Set filter positions.
         *
         * @param {Array.<Coordinates>} [positions] undefined for no filtering.
         */
    
      }, {
        key: 'filterPositions',
        set: function set(positions) {
          if (typeof positions === 'undefined') {
            this._filterPositions = undefined;
          } else {
            switch (this.filterCoordinateSystem) {
              case 'gl':
                this._filterPositions = positions.map(function (current) {
                  return current.slice(0); // copy
                });
                break;
    
              case 'sofaCartesian':
                this._filterPositions = positions.map(function (current) {
                  return _coordinates2.default.sofaCartesianToGl([], current);
                });
                break;
    
              case 'sofaSpherical':
                this._filterPositions = positions.map(function (current) {
                  return _coordinates2.default.sofaSphericalToGl([], current);
                });
                break;
    
              default:
                throw new Error('Bad filter coordinate system');
            }
          }
        }
    
        /**
         * Get filter positions.
         */
        ,
        get: function get() {
          var positions = void 0;
          if (typeof this._filterPositions !== 'undefined') {
            switch (this.filterCoordinateSystem) {
              case 'gl':
                positions = this._filterPositions.map(function (current) {
                  return current.slice(0); // copy
                });
                break;
    
              case 'sofaCartesian':
                positions = this._filterPositions.map(function (current) {
                  return _coordinates2.default.glToSofaCartesian([], current);
                });
                break;
    
              case 'sofaSpherical':
                positions = this._filterPositions.map(function (current) {
                  return _coordinates2.default.glToSofaSpherical([], current);
                });
                break;
    
              default:
                throw new Error('Bad filter coordinate system');
            }
          }
          return positions;
        }
    
        /**
         * Set post-filtering flag. When false, try to load a partial set of
         * HRTF.
         *
         * @param {Boolean} [post=false]
         */
    
      }, {
        key: 'filterAfterLoad',
        set: function set(post) {
          this._filterAfterLoad = typeof post !== 'undefined' ? post : false;
        }
    
        /**
         * Get post-filtering flag. When false, try to load a partial set of
         * HRTF.
         *
         * @returns {Boolean}
         */
        ,
        get: function get() {
          return this._filterAfterLoad;
        }
    
        /**
         * Test whether an HRTF set is actually loaded.
         *
         * @see {@link HrtfSet#load}
         *
         * @returns {Boolean} false before any successful load, true after.
         *
         */
    
      }, {
        key: 'isReady',
        get: function get() {
          return this._ready;
        }
    
        /**
         * Get the original name of the HRTF set.
         *
         * @returns {String} that is undefined before a successfully load.
         */
    
      }, {
        key: 'sofaName',
        get: function get() {
          return this._sofaName;
        }
    
        /**
         * Get the URL used to actually load the HRTF set.
         *
         * @returns {String} that is undefined before a successfully load.
         */
    
      }, {
        key: 'sofaUrl',
        get: function get() {
          return this._sofaUrl;
        }
    
        /**
         * Get the original sample-rate from the SOFA URL already loaded.
         *
         * @returns {Number} that is undefined before a successfully load.
         */
    
      }, {
        key: 'sofaSampleRate',
        get: function get() {
          return this._sofaSampleRate;
        }
    
        /**
         * Get the meta-data from the SOFA URL already loaded.
         *
         * @returns {Object} that is undefined before a successfully load.
         */
    
      }, {
        key: 'sofaMetaData',
        get: function get() {
          return this._sofaMetaData;
        }
      }]);
    
      return HrtfSet;
    }();
    
    exports.default = HrtfSet;
    },{"../audio/utilities":70,"../geometry/KdTree":71,"../geometry/coordinates":72,"../info":75,"./parseDataSet":78,"./parseSofa":79,"gl-matrix":61}],77:[function(require,module,exports){
    'use strict';
    
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ServerDataBase = undefined;
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
fileOverview Access a remote catalogue from a SOFA server, and get URLs
with filtering.

author Jean-Philippe.Lambert@ircam.fr
copyright 2015-2016 IRCAM, Paris, France
license BSD-3-Clause

    
    var _parseXml = require('./parseXml');
    
    var _parseXml2 = _interopRequireDefault(_parseXml);
    
    var _parseDataSet = require('./parseDataSet');
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    /**
     * SOFA remote data-base.
     */
    var ServerDataBase = exports.ServerDataBase = function () {
      /**
       * This is only a constructor, it does not load any thing.
       *
       * @see {@link ServerDataBase#loadCatalogue}
       *
       * @param {Object} [options]
       * @param {String} [options.serverUrl] base URL of server, including
       * protocol, eg. 'http://bili2.ircam.fr'. Default protocol is `https:` if
       * `window.location.protocol` is also `https:`, or `http:`, to avoid
       * mixed contents (that are often blocked).
       */
      function ServerDataBase() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    
        _classCallCheck(this, ServerDataBase);
    
        this._server = options.serverUrl;
    
        if (typeof this._server === 'undefined') {
          var protocol = window.location.protocol === 'https:' ? 'https:' : 'http:';
    
          this._server = protocol + '//bili2.ircam.fr';
        }
    
        this._catalogue = {};
        this._urls = [];
      }
    
      /**
       * Asynchronously load complete catalogue from the server, including the
       * catalogue links found in any partial catalogue.
       *
       * @param {String} [sourceUrl] URL of the root catalogue, including the
       * server, like 'http://bili2.ircam.fr/catalog.xml'.
       *  Default is 'catalog.xml' at serverURL supplied at
       * {@link ServerDataBase#constructor}.
       * @param {Object} [destination] Catalogue to update. Default is
       * internal.
       * @returns {Promise.<String|Error>} The promise will resolve (with
       * sourceUrl) when every sub-catalogue will successfully load, or will
       * reject (with an error) as soon as one transfer fails.
       */
    
    
      _createClass(ServerDataBase, [{
        key: 'loadCatalogue',
        value: function loadCatalogue() {
          var _this = this;
    
          var sourceUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._server + '/catalog.xml';
          var destination = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._catalogue;
    
          var promise = new Promise(function (resolve, reject) {
            var request = new window.XMLHttpRequest();
            request.open('GET', sourceUrl);
            request.onerror = function () {
              reject(new Error('Unable to GET ' + sourceUrl + ', status ' + request.status + ' ' + ('' + request.responseText)));
            };
    
            request.onload = function () {
              if (request.status < 200 || request.status >= 300) {
                request.onerror();
                return;
              }
    
              var xml = (0, _parseXml2.default)(request.response);
              var dataSet = xml.querySelector('dataset');
    
              // recursive catalogues
              var catalogueReferences = xml.querySelectorAll('dataset > catalogRef');
    
              if (catalogueReferences.length === 0) {
                // end of recursion
                destination.urls = [];
                var urls = xml.querySelectorAll('dataset > dataset');
                for (var ref = 0; ref < urls.length; ++ref) {
                  // data set name already contains a leading slash
                  var url = _this._server + dataSet.getAttribute('name') + '/' + urls[ref].getAttribute('name');
                  _this._urls.push(url);
                  destination.urls.push(url);
                }
    
                resolve(sourceUrl);
              } else {
                // recursion
                var promises = [];
                for (var _ref = 0; _ref < catalogueReferences.length; ++_ref) {
                  var name = catalogueReferences[_ref].getAttribute('name');
                  var recursiveUrl = _this._server + dataSet.getAttribute('name') + '/' + catalogueReferences[_ref].getAttribute('xlink:href');
                  destination[name] = {};
                  promises.push(_this.loadCatalogue(recursiveUrl, destination[name]));
                }
    
                Promise.all(promises).then(function () {
                  _this._urls.sort();
                  resolve(sourceUrl);
                }).catch(function (error) {
                  reject(error);
                });
              }
            }; // request.onload
    
            request.send();
          });
    
          return promise;
        }
    
        /**
         * Get URLs, possibly filtered.
         *
         * Any filter can be partial, and is case-insensitive. The result must
         * match every supplied filter. Undefined filters are not applied. For
         * any filter, `|` is the or operator.
         *
         * @param {Object} [options] optional filters
         * @param {String} [options.convention] 'HRIR' or 'SOS'
         * @param {String} [options.dataBase] 'LISTEN', 'BILI', etc.
         * @param {String} [options.equalisation] 'RAW','COMPENSATED'
         * @param {String} [options.sampleRate] in Hertz
         * @param {String} [options.sosOrder] '12order' or '24order'
         * @param {String} [options.freePattern] any pattern matched
         * globally. Use separators (spaces, tabs, etc.) to combine multiple
         * patterns: '44100 listen' will restrict on URLs matching '44100' and
         * 'listen'; '44100|48000 bili|listen' matches ('44100' or '48000') and
         * ('bili' or 'listen').
         * @returns {Array.<String>} URLs that match every filter.
         */
    
      }, {
        key: 'getUrls',
        value: function getUrls() {
          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    
          // the number and the order of the filters in the following array must
          // match the URL sub-directories
          var filters = [options.convention, options.dataBase, options.equalisation, options.sampleRate, options.sosOrder];
    
          // any where in URL
          var freePattern = typeof options.freePattern === 'number' ? options.freePattern.toString() : options.freePattern;
    
          var pattern = filters.reduce(function (global, local) {
            // partial filter inside slashes
            return global + '/' + (typeof local !== 'undefined' ? '[^/]*(?:' + local + ')[^/]*' : '[^/]*');
          }, '');
    
          var regExp = new RegExp(pattern, 'i');
    
          var urls = this._urls.filter(function (url) {
            return regExp.test(url);
          });
    
          if (typeof freePattern !== 'undefined') {
            // split patterns with separators
            var patterns = freePattern.split(/\s+/);
            patterns.forEach(function (current) {
              regExp = new RegExp(current, 'i');
    
              urls = urls.filter(function (url) {
                return regExp.test(url);
              });
            });
          }
    
          return urls;
        }
    
        /**
         * Get the data-set definitions of a given URL.
         *
         * @param {String} sourceUrl is the complete SOFA URL, with the
         * server, like
         * 'http://bili2.ircam.fr/SimpleFreeFieldHRIR/BILI/COMPENSATED/44100/IRC_1100_C_HRIR.sofa'
         *
         * @returns {Promise.<Object|String>} The promise will resolve after
         * successfully loading, with definitions as * `{definition: {key: values}}`
         * objects; the promise will reject is the transfer fails, with an error.
         */
    
      }, {
        key: 'getDataSetDefinitions',
        value: function getDataSetDefinitions(sourceUrl) {
          var promise = new Promise(function (resolve, reject) {
            var url = sourceUrl + '.dds';
            var request = new window.XMLHttpRequest();
            request.open('GET', url);
            request.onerror = function () {
              reject(new Error('Unable to GET ' + url + ', status ' + request.status + ' ' + ('' + request.responseText)));
            };
    
            request.onload = function () {
              if (request.status < 200 || request.status >= 300) {
                request.onerror();
                return;
              }
              resolve((0, _parseDataSet.parseDataSet)(request.response));
            }; // request.onload
    
            request.send();
          });
    
          return promise;
        }
    
        /**
         * Get all source positions of a given URL.
         *
         * @param {String} sourceUrl is the complete SOFA URL, with the
         * server, like
         * 'http://bili2.ircam.fr/SimpleFreeFieldHRIR/BILI/COMPENSATED/44100/IRC_1100_C_HRIR.sofa'
         *
         * @returns {Promise.<Array<Array.<Number>>|Error>} The promise will resolve
         * after successfully loading, with an array of positions (which are
         * arrays of 3 numbers); the promise will reject is the transfer fails,
         * with an error.
         */
    
      }, {
        key: 'getSourcePositions',
        value: function getSourcePositions(sourceUrl) {
          var promise = new Promise(function (resolve, reject) {
            var url = sourceUrl + '.json?SourcePosition';
    
            var request = new window.XMLHttpRequest();
            request.open('GET', url);
            request.onerror = function () {
              reject(new Error('Unable to GET ' + url + ', status ' + request.status + ' ' + ('' + request.responseText)));
            };
    
            request.onload = function () {
              if (request.status < 200 || request.status >= 300) {
                request.onerror();
                return;
              }
    
              try {
                var response = JSON.parse(request.response);
                if (response.leaves[0].name !== 'SourcePosition') {
                  throw new Error('SourcePosition not found');
                }
    
                resolve(response.leaves[0].data);
              } catch (error) {
                // re-throw
                reject(new Error('Unable to parse response from ' + url + '. ' + error.message));
              }
            }; // request.onload
    
            request.send();
          });
    
          return promise;
        }
      }]);
    
      return ServerDataBase;
    }();
    
    exports.default = ServerDataBase;
    },{"./parseDataSet":78,"./parseXml":80}],78:[function(require,module,exports){
    'use strict';
    
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports._parseDimension = _parseDimension;
    exports._parseDefinition = _parseDefinition;
    exports.parseDataSet = parseDataSet;
    /**
     * @fileOverview Parser for DDS files
     * @author Jean-Philippe.Lambert@ircam.fr
     * @copyright 2015-2016 IRCAM, Paris, France
     * @license BSD-3-Clause
     */
    
    // '[R = 2]'
    var _dimensionPattern = '\\[\\s*(\\w+)\\s*=\\s*(\\d+)\\s*\\]';
    var _dimensionMatch = new RegExp(_dimensionPattern, 'g');
    var _dimensionSplit = new RegExp(_dimensionPattern);
    
    // 'Float64 ReceiverPosition[R = 2][C = 3][I = 1];'
    //
    // do not re-use dimension pattern (for grouping)
    var _definitionPattern = '\\s*(\\w+)\\s*([\\w.]+)\\s*' + '((?:\\[[^\\]]+\\]\\s*)+)' + ';\\s*';
    var _definitionMatch = new RegExp(_definitionPattern, 'g');
    var _definitionSplit = new RegExp(_definitionPattern);
    
    // `Dataset {
    //   Float64 ListenerPosition[I = 1][C = 3];
    //   Float64 ListenerUp[I = 1][C = 3];
    //   Float64 ListenerView[I = 1][C = 3];
    //   Float64 ReceiverPosition[R = 2][C = 3][I = 1];
    //   Float64 SourcePosition[M = 1680][C = 3];
    //   Float64 EmitterPosition[E = 1][C = 3][I = 1];
    //   Float64 Data.SamplingRate[I = 1];
    //   Float64 Data.Delay[I = 1][R = 2];
    //   Float64 Data.IR[M = 1680][R = 2][N = 941];
    //   Float64 RoomVolume[I = 1];
    // } IRC_1100_C_HRIR.sofa;`
    //
    // do not re-use definition pattern (for grouping)
    var _dataSetPattern = '\\s*Dataset\\s*\\{\\s*' + '((?:[^;]+;\\s*)*)' + '\\s*\\}\\s*[\\w.]+\\s*;\\s*';
    var _dataSetSplit = new RegExp(_dataSetPattern);
    
    /**
     * Parses dimension strings into an array of [key, value] pairs.
     *
     * @private
     * @param {String} input is single or multiple dimension
     * @returns {Array.<Array.<String>>} object [key, value] pairs
     *
     * @example
     * _parseDimension('[R = 2]');
     * // [ [ 'R', 2 ] ]
     *
     * _parseDimension('[R = 2][C = 3][I = 1]');
     * // [ [ 'R', 2 ], [ 'C', 3 ], [ 'I', 1 ] ]
     */
    function _parseDimension(input) {
      var parse = [];
      var inputs = input.match(_dimensionMatch);
      if (inputs !== null) {
        inputs.forEach(function (inputSingle) {
          var parts = _dimensionSplit.exec(inputSingle);
          if (parts !== null && parts.length > 2) {
            parse.push([parts[1], Number(parts[2])]);
          }
        });
      }
      return parse;
    }
    
    /**
     * Parse definition strings into an array of [key, {values}] pairs.
     *
     * @param {String} input is single or multiple definition
     * @returns {Array.<Array<String,Object>>} [key, {values}] pairs
     *
     * @private
     * @example
     * _parseDefinition('Float64 ReceiverPosition[R = 2][C = 3][I = 1];');
     * // [ [ 'ReceiverPosition',
     * //     { type: 'Float64', R: 2, C: 3, I: 1 } ] ]
     *
     * _parseDefinition(
     * `    Float64 ReceiverPosition[R = 2][C = 3][I = 1];
     *      Float64 SourcePosition[M = 1680][C = 3];
     *      Float64 EmitterPosition[E = 1][C = 3][I = 1];`);
     * // [ [ 'ReceiverPosition',
     * //      { type: 'Float64', R: 2, C: 3, I: 1 } ],
     * //   [ 'SourcePosition', { type: 'Float64', M: 1680, C: 3 } ],
     * //   [ 'EmitterPosition',
     * //     { type: 'Float64', E: 1, C: 3, I: 1 } ] ]
     */
    function _parseDefinition(input) {
      var parse = [];
      var inputs = input.match(_definitionMatch);
      if (inputs !== null) {
        inputs.forEach(function (inputSingle) {
          var parts = _definitionSplit.exec(inputSingle);
          if (parts !== null && parts.length > 3) {
            var current = [];
            current[0] = parts[2];
            current[1] = {};
            current[1].type = parts[1];
            _parseDimension(parts[3]).forEach(function (dimension) {
              current[1][dimension[0]] = dimension[1];
            });
            parse.push(current);
          }
        });
      }
      return parse;
    }
    
    /**
     * Parse data set meta data into an object of `{definition: {key: values}}` objects.
     *
     * @param {String} input data set DDS-like.
     * @returns {Object} definitions as `{definition: {key: values}}` objects.
     *
     * @example
     * _parseDataSet(
     * `Dataset {
     *      Float64 ReceiverPosition[R = 2][C = 3][I = 1];
     *      Float64 SourcePosition[M = 1680][C = 3];
     *      Float64 EmitterPosition[E = 1][C = 3][I = 1];
     *      Float64 Data.SamplingRate[I = 1];
     * } IRC_1100_C_HRIR.sofa;`);
     * //  { ReceiverPosition: { type: 'Float64', R: 2, C: 3, I: 1 },
     * //    SourcePosition: { type: 'Float64', M: 1680, C: 3 },
     * //    EmitterPosition: { type: 'Float64', E: 1, C: 3, I: 1 }
     * //    'Data.SamplingRate': { type: 'Float64', I: 1 } }
     */
    function parseDataSet(input) {
      var parse = {};
      var definitions = _dataSetSplit.exec(input);
      if (definitions !== null && definitions.length > 1) {
        _parseDefinition(definitions[1]).forEach(function (definition) {
          parse[definition[0]] = definition[1];
        });
      }
      return parse;
    }
    
    exports.default = parseDataSet;
    },{}],79:[function(require,module,exports){
    'use strict';
    
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.parseSofa = parseSofa;
    exports.stringifySofa = stringifySofa;
    exports.conformSofaCoordinateSystem = conformSofaCoordinateSystem;
    /**
     * @fileOverview Parser functions for SOFA files
     * @author Jean-Philippe.Lambert@ircam.fr
     * @copyright 2015 IRCAM, Paris, France
     * @license BSD-3-Clause
     */
    
    /**
     * Parses a SOFA JSON string with into an object with `name`, `data` and
     * `metaData` attributes.
     *
     * @see {@link stringifySofa}
     *
     * @param {String} sofaString in SOFA JSON format
     * @returns {Object} with `data` and `metaData` attributes
     * @throws {Error} when the parsing fails
     */
    function parseSofa(sofaString) {
      try {
        var sofa = JSON.parse(sofaString);
        var sofaSet = {};
    
        sofaSet.name = sofa.name;
    
        if (typeof sofa.attributes !== 'undefined') {
          sofaSet.metaData = {};
          var metaData = sofa.attributes.find(function (e) {
            return e.name === 'NC_GLOBAL';
          });
          if (typeof metaData !== 'undefined') {
            metaData.attributes.forEach(function (e) {
              sofaSet.metaData[e.name] = e.value[0];
            });
          }
        }
    
        if (typeof sofa.leaves !== 'undefined') {
          var data = sofa.leaves;
          data.forEach(function (d) {
            sofaSet[d.name] = {};
            d.attributes.forEach(function (a) {
              sofaSet[d.name][a.name] = a.value[0];
            });
            sofaSet[d.name].shape = d.shape;
            sofaSet[d.name].data = d.data;
          });
        }
    
        return sofaSet;
      } catch (error) {
        throw new Error('Unable to parse SOFA string. ' + error.message);
      }
    }
    
    /**
     * Generates a SOFA JSON string from an object.
     *
     * Note that the properties differ from either an {@link HrtfSet} and from
     * the result of the parsing of a SOFA JSON. In particular, the listener
     * attributes correspond to the reference for the filters; the source
     * positions are the positions in the data-base.
     *
     * @see {@link parseSofa}
     * @see {@link HrtfSet}
     *
     * @param {Object} sofaSet
     * @param {Coordinates} sofaSet.ListenerPosition
     * @param {CoordinateSystem} sofaSet.ListenerPositionType
     * @param {Coordinates} sofaSet.ListenerUp
     * @param {CoordinateSystem} sofaSet.ListenerUpType
     * @param {Coordinates} sofaSet.ListenerView
     * @param {CoordinateSystem} sofaSet.ListenerViewType
     * @param {Array.<Array.<Number>>} sofaSet.SourcePosition
     * @param {CoordinateSystem} sofaSet.SourcePositionType
     * @param {Number} sofaSet.DataSamplingRate
     * @param {Array.<Array.<Array.<Number>>>} sofaSet.DataIR
     * @param {Array.<Number>} sofaSet.RoomVolume
     * @returns {String} in SOFA JSON format
     * @throws {Error} when the export fails, because of missing data or
     * unknown coordinate system
     */
    function stringifySofa(sofaSet) {
      var sofa = {};
    
      if (typeof sofaSet.name !== 'undefined') {
        sofa.name = sofaSet.name;
      }
    
      if (typeof sofaSet.metaData !== 'undefined') {
        sofa.attributes = [];
        var ncGlobal = {
          name: 'NC_GLOBAL',
          attributes: []
        };
    
        for (var attribute in sofaSet.metaData) {
          if (sofaSet.metaData.hasOwnProperty(attribute)) {
            ncGlobal.attributes.push({
              name: attribute,
              value: [sofaSet.metaData[attribute]]
            });
          }
        }
    
        sofa.attributes.push(ncGlobal);
      }
    
      // always the same;
      var type = 'Float64';
    
      var attributes = void 0;
    
      sofa.leaves = [];
    
      [['ListenerPosition', 'ListenerPositionType'], ['ListenerUp', 'ListenerUpType'], ['ListenerView', 'ListenerViewType']].forEach(function (listenerAttributeAndType) {
        var listenerAttributeName = listenerAttributeAndType[0];
        var listenerAttribute = sofaSet[listenerAttributeName];
        var listenerType = sofaSet[listenerAttributeAndType[1]];
        if (typeof listenerAttribute !== 'undefined') {
          switch (listenerType) {
            case 'cartesian':
              attributes = [{ name: 'Type', value: ['cartesian'] }, { name: 'Units', value: ['metre, metre, metre'] }];
              break;
    
            case 'spherical':
              attributes = [{ name: 'Type', value: ['spherical'] }, { name: 'Units', value: ['degree, degree, metre'] }];
              break;
    
            default:
              throw new Error('Unknown coordinate system type ' + (listenerType + ' for ' + listenerAttribute));
          }
          // in SOFA, everything is contained by an array, even an array.
          sofa.leaves.push({
            name: listenerAttributeName,
            type: type,
            attributes: attributes,
            shape: [1, 3],
            data: [listenerAttribute]
          });
        }
      });
    
      if (typeof sofaSet.SourcePosition !== 'undefined') {
        switch (sofaSet.SourcePositionType) {
          case 'cartesian':
            attributes = [{ name: 'Type', value: ['cartesian'] }, { name: 'Units', value: ['metre, metre, metre'] }];
            break;
    
          case 'spherical':
            attributes = [{ name: 'Type', value: ['spherical'] }, { name: 'Units', value: ['degree, degree, metre'] }];
            break;
    
          default:
            throw new Error('Unknown coordinate system type ' + ('' + sofaSet.SourcePositionType));
        }
        sofa.leaves.push({
          name: 'SourcePosition',
          type: type,
          attributes: attributes,
          shape: [sofaSet.SourcePosition.length, sofaSet.SourcePosition[0].length],
          data: sofaSet.SourcePosition
        });
      }
    
      if (typeof sofaSet.DataSamplingRate !== 'undefined') {
        sofa.leaves.push({
          name: 'Data.SamplingRate',
          type: type,
          attributes: [{ name: 'Unit', value: 'hertz' }],
          shape: [1],
          data: [sofaSet.DataSamplingRate]
        });
      } else {
        throw new Error('No data sampling-rate');
      }
    
      if (typeof sofaSet.DataDelay !== 'undefined') {
        sofa.leaves.push({
          name: 'Data.Delay',
          type: type,
          attributes: [],
          shape: [1, sofaSet.DataDelay.length],
          data: sofaSet.DataDelay
        });
      }
    
      if (typeof sofaSet.DataIR !== 'undefined') {
        sofa.leaves.push({
          name: 'Data.IR',
          type: type,
          attributes: [],
          shape: [sofaSet.DataIR.length, sofaSet.DataIR[0].length, sofaSet.DataIR[0][0].length],
          data: sofaSet.DataIR
        });
      } else {
        throw new Error('No data IR');
      }
    
      if (typeof sofaSet.RoomVolume !== 'undefined') {
        sofa.leaves.push({
          name: 'RoomVolume',
          type: type,
          attributes: [{ name: 'Units', value: ['cubic metre'] }],
          shape: [1],
          data: [sofaSet.RoomVolume]
        });
      }
    
      sofa.nodes = [];
    
      return JSON.stringify(sofa);
    }
    
    /**
     * Prefix SOFA coordinate system with `sofa`.
     *
     * @param {String} system : either `cartesian` or `spherical`
     * @returns {String} either `sofaCartesian` or `sofaSpherical`
     * @throws {Error} if system is unknown
     */
    function conformSofaCoordinateSystem(system) {
      var type = void 0;
    
      switch (system) {
        case 'cartesian':
          type = 'sofaCartesian';
          break;
    
        case 'spherical':
          type = 'sofaSpherical';
          break;
    
        default:
          throw new Error('Bad SOFA type ' + system);
      }
      return type;
    }
    
    exports.default = {
      parseSofa: parseSofa,
      conformSofaCoordinateSystem: conformSofaCoordinateSystem
    };
    },{}],80:[function(require,module,exports){
    'use strict';
    
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    /**
     * @fileOverview Simple XML parser, as a DOM parser.
     * @author Jean-Philippe.Lambert@ircam.fr
     * @copyright 2015-2016 IRCAM, Paris, France
     * @license BSD-3-Clause
     */
    
    /**
     * Parse an XML string into an XMLDocument object, using native browser DOM
     * parser.
     *
     * It requires a browser environment.
     *
     * @function parseXml
     * @param {String} xmlStr full valid XML data.
     * @returns {Object} XMLDocument, DOM-like. (Use any selector.)
     *
     * @example
     * const request = new window.XMLHttpRequest();
     * request.open('GET', 'http://bili2.ircam.fr/catalog.xml');
     * request.onerror =  () => {
     *    throw new Error(`Unable to GET: ${request.status}`);
     * };
     * request.onload = () => {
     *   const xml = parseXml(request.response);
     *   const catalogueReferences = xml.querySelector('dataset > catalogRef');
     *   console.log(catalogueReferences);
     * }
     * request.send();
     */
    var parseXml = exports.parseXml = void 0;
    
    if (typeof window.DOMParser !== 'undefined') {
      exports.parseXml = parseXml = function parseXmlDOM(xmlStr) {
        return new window.DOMParser().parseFromString(xmlStr, 'text/xml');
      };
    } else if (typeof window.ActiveXObject !== 'undefined' && new window.ActiveXObject('Microsoft.XMLDOM')) {
      exports.parseXml = parseXml = function parseXmlActiveX(xmlStr) {
        var xmlDoc = new window.ActiveXObject('Microsoft.XMLDOM');
        xmlDoc.async = 'false';
        xmlDoc.loadXML(xmlStr);
        return xmlDoc;
      };
    } else {
      throw new Error('No XML parser found');
    }
    
    exports.default = parseXml;
    },{}],81:[function(require,module,exports){
    module.exports={
      "_from": "github:Ircam-RnD/serveSofaHrir",
      "_id": "serve-sofa-hrir@0.4.2",
      "_inBundle": false,
      "_integrity": "",
      "_location": "/serve-sofa-hrir",
      "_phantomChildren": {},
      "_requested": {
        "type": "git",
        "raw": "serve-sofa-hrir@github:Ircam-RnD/serveSofaHrir",
        "name": "serve-sofa-hrir",
        "escapedName": "serve-sofa-hrir",
        "rawSpec": "github:Ircam-RnD/serveSofaHrir",
        "saveSpec": "github:Ircam-RnD/serveSofaHrir",
        "fetchSpec": null,
        "gitCommittish": null
      },
      "_requiredBy": [
        "/"
      ],
      "_resolved": "github:Ircam-RnD/serveSofaHrir#71df5cec963f5f99482ee51b44814a4b7f504847",
      "_spec": "serve-sofa-hrir@github:Ircam-RnD/serveSofaHrir",
      "_where": "/Users/pyrus/Projects/Cosima/JSAmbisonics",
      "authors": [
        "Jean-Philippe.Lambert@ircam.fr",
        "Arnau Julià <arnau.julia@gmail.com>",
        "Samuel.Goldszmidt@ircam.fr",
        "David.Poirier-Quinot@ircam.fr"
      ],
      "bugs": {
        "url": "https://github.com/Ircam-RnD/serveSofaHrir/issues"
      },
      "bundleDependencies": false,
      "dependencies": {
        "fractional-delay": "git://github.com/Ircam-RnD/fractional-delay.git#gh-pages",
        "gl-matrix": "^2.4.0",
        "kd.tree": "github:akshaylive/node-kdt#39bc780704a324393bca68a17cf7bc71be8544c6"
      },
      "deprecated": false,
      "description": "Utility to fetch and shape sofa formated HRIR from server",
      "devDependencies": {
        "babel-cli": "^6.5.1",
        "babel-eslint": "^4.1.8",
        "babel-preset-es2015": "^6.5.0",
        "babelify": "^7.2.0",
        "blue-tape": "^0.1.11",
        "browserify": "^12.0.2",
        "esdoc": "^0.4.6",
        "eslint": "^1.10.3",
        "eslint-config-airbnb": "^1.0.2",
        "eslint-plugin-html": "^1.4.0",
        "jscs": "2.11.0",
        "jscs-jsdoc": "^1.3.1",
        "tape": "^4.4.0",
        "tape-run": "^2.1.2",
        "testling": "^1.7.1",
        "watch": "^0.17.1"
      },
      "engines": {
        "node": "0.12 || 4",
        "npm": ">=1.0.0 <3.0.0"
      },
      "exports": "serveSofaHrir",
      "homepage": "https://github.com/Ircam-RnD/serveSofaHrir#readme",
      "license": "BSD-3-Clause",
      "main": "./dist/",
      "name": "serve-sofa-hrir",
      "repository": {
        "type": "git",
        "url": "git+https://github.com/Ircam-RnD/serveSofaHrir.git"
      },
      "scripts": {
        "browserify": "browserify ./src/index.js -t [ babelify ] --standalone serveSofaHrir > serveSofaHrir.js",
        "bundle": "npm run lint && npm run test && npm run doc && npm run compile && npm run browserify",
        "compile": "rm -rf ./dist && babel ./src/ --out-dir ./dist/",
        "doc": "esdoc -c esdoc.json",
        "lint": "eslint ./src/ ./test/ && jscs --verbose ./src/ ./test/",
        "lint-examples": "eslint -c examples/.eslintrc ./examples/*.html",
        "test": "browserify test/*/*.js -t [ babelify ] --exclude 'test/*/*_listen.js*' --exclude 'test/*/*_issues.js' | tape-run",
        "test-browser": "browserify test/*/*.js -t [ babelify ] --exclude 'test/*/*_listen.js*' --exclude 'test/*/*_issues.js' | testling -u",
        "test-issues": "browserify test/*/*_issues.js -t [ babelify ] | tape-run",
        "test-listen": "browserify test/*/*_listen.js -t [ babelify ] | tape-run",
        "watch": "watch 'npm run browserify && echo $( date ): browserified' ./src/"
      },
      "standalone": "serveSofaHrir",
      "version": "0.4.2",
      "warnings": [
        {
          "code": "ENOTSUP",
          "required": {
            "node": "0.12 || 4",
            "npm": ">=1.0.0 <3.0.0"
          },
          "pkgid": "serve-sofa-hrir@0.4.2"
        }
      ]
    }
    
    },{}],82:[function(require,module,exports){
    "use strict"; "use restrict";
    
    var bits      = require("bit-twiddle")
      , UnionFind = require("union-find")
    
    //Returns the dimension of a cell complex
    function dimension(cells) {
      var d = 0
        , max = Math.max
      for(var i=0, il=cells.length; i<il; ++i) {
        d = max(d, cells[i].length)
      }
      return d-1
    }
    exports.dimension = dimension
    
    //Counts the number of vertices in faces
    function countVertices(cells) {
      var vc = -1
        , max = Math.max
      for(var i=0, il=cells.length; i<il; ++i) {
        var c = cells[i]
        for(var j=0, jl=c.length; j<jl; ++j) {
          vc = max(vc, c[j])
        }
      }
      return vc+1
    }
    exports.countVertices = countVertices
    
    //Returns a deep copy of cells
    function cloneCells(cells) {
      var ncells = new Array(cells.length)
      for(var i=0, il=cells.length; i<il; ++i) {
        ncells[i] = cells[i].slice(0)
      }
      return ncells
    }
    exports.cloneCells = cloneCells
    
    //Ranks a pair of cells up to permutation
    function compareCells(a, b) {
      var n = a.length
        , t = a.length - b.length
        , min = Math.min
      if(t) {
        return t
      }
      switch(n) {
        case 0:
          return 0;
        case 1:
          return a[0] - b[0];
        case 2:
          var d = a[0]+a[1]-b[0]-b[1]
          if(d) {
            return d
          }
          return min(a[0],a[1]) - min(b[0],b[1])
        case 3:
          var l1 = a[0]+a[1]
            , m1 = b[0]+b[1]
          d = l1+a[2] - (m1+b[2])
          if(d) {
            return d
          }
          var l0 = min(a[0], a[1])
            , m0 = min(b[0], b[1])
            , d  = min(l0, a[2]) - min(m0, b[2])
          if(d) {
            return d
          }
          return min(l0+a[2], l1) - min(m0+b[2], m1)
        
        //TODO: Maybe optimize n=4 as well?
        
        default:
          var as = a.slice(0)
          as.sort()
          var bs = b.slice(0)
          bs.sort()
          for(var i=0; i<n; ++i) {
            t = as[i] - bs[i]
            if(t) {
              return t
            }
          }
          return 0
      }
    }
    exports.compareCells = compareCells
    
    function compareZipped(a, b) {
      return compareCells(a[0], b[0])
    }
    
    //Puts a cell complex into normal order for the purposes of findCell queries
    function normalize(cells, attr) {
      if(attr) {
        var len = cells.length
        var zipped = new Array(len)
        for(var i=0; i<len; ++i) {
          zipped[i] = [cells[i], attr[i]]
        }
        zipped.sort(compareZipped)
        for(var i=0; i<len; ++i) {
          cells[i] = zipped[i][0]
          attr[i] = zipped[i][1]
        }
        return cells
      } else {
        cells.sort(compareCells)
        return cells
      }
    }
    exports.normalize = normalize
    
    //Removes all duplicate cells in the complex
    function unique(cells) {
      if(cells.length === 0) {
        return []
      }
      var ptr = 1
        , len = cells.length
      for(var i=1; i<len; ++i) {
        var a = cells[i]
        if(compareCells(a, cells[i-1])) {
          if(i === ptr) {
            ptr++
            continue
          }
          cells[ptr++] = a
        }
      }
      cells.length = ptr
      return cells
    }
    exports.unique = unique;
    
    //Finds a cell in a normalized cell complex
    function findCell(cells, c) {
      var lo = 0
        , hi = cells.length-1
        , r  = -1
      while (lo <= hi) {
        var mid = (lo + hi) >> 1
          , s   = compareCells(cells[mid], c)
        if(s <= 0) {
          if(s === 0) {
            r = mid
          }
          lo = mid + 1
        } else if(s > 0) {
          hi = mid - 1
        }
      }
      return r
    }
    exports.findCell = findCell;
    
    //Builds an index for an n-cell.  This is more general than dual, but less efficient
    function incidence(from_cells, to_cells) {
      var index = new Array(from_cells.length)
      for(var i=0, il=index.length; i<il; ++i) {
        index[i] = []
      }
      var b = []
      for(var i=0, n=to_cells.length; i<n; ++i) {
        var c = to_cells[i]
        var cl = c.length
        for(var k=1, kn=(1<<cl); k<kn; ++k) {
          b.length = bits.popCount(k)
          var l = 0
          for(var j=0; j<cl; ++j) {
            if(k & (1<<j)) {
              b[l++] = c[j]
            }
          }
          var idx=findCell(from_cells, b)
          if(idx < 0) {
            continue
          }
          while(true) {
            index[idx++].push(i)
            if(idx >= from_cells.length || compareCells(from_cells[idx], b) !== 0) {
              break
            }
          }
        }
      }
      return index
    }
    exports.incidence = incidence
    
    //Computes the dual of the mesh.  This is basically an optimized version of buildIndex for the situation where from_cells is just the list of vertices
    function dual(cells, vertex_count) {
      if(!vertex_count) {
        return incidence(unique(skeleton(cells, 0)), cells, 0)
      }
      var res = new Array(vertex_count)
      for(var i=0; i<vertex_count; ++i) {
        res[i] = []
      }
      for(var i=0, len=cells.length; i<len; ++i) {
        var c = cells[i]
        for(var j=0, cl=c.length; j<cl; ++j) {
          res[c[j]].push(i)
        }
      }
      return res
    }
    exports.dual = dual
    
    //Enumerates all cells in the complex
    function explode(cells) {
      var result = []
      for(var i=0, il=cells.length; i<il; ++i) {
        var c = cells[i]
          , cl = c.length|0
        for(var j=1, jl=(1<<cl); j<jl; ++j) {
          var b = []
          for(var k=0; k<cl; ++k) {
            if((j >>> k) & 1) {
              b.push(c[k])
            }
          }
          result.push(b)
        }
      }
      return normalize(result)
    }
    exports.explode = explode
    
    //Enumerates all of the n-cells of a cell complex
    function skeleton(cells, n) {
      if(n < 0) {
        return []
      }
      var result = []
        , k0     = (1<<(n+1))-1
      for(var i=0; i<cells.length; ++i) {
        var c = cells[i]
        for(var k=k0; k<(1<<c.length); k=bits.nextCombination(k)) {
          var b = new Array(n+1)
            , l = 0
          for(var j=0; j<c.length; ++j) {
            if(k & (1<<j)) {
              b[l++] = c[j]
            }
          }
          result.push(b)
        }
      }
      return normalize(result)
    }
    exports.skeleton = skeleton;
    
    //Computes the boundary of all cells, does not remove duplicates
    function boundary(cells) {
      var res = []
      for(var i=0,il=cells.length; i<il; ++i) {
        var c = cells[i]
        for(var j=0,cl=c.length; j<cl; ++j) {
          var b = new Array(c.length-1)
          for(var k=0, l=0; k<cl; ++k) {
            if(k !== j) {
              b[l++] = c[k]
            }
          }
          res.push(b)
        }
      }
      return normalize(res)
    }
    exports.boundary = boundary;
    
    //Computes connected components for a dense cell complex
    function connectedComponents_dense(cells, vertex_count) {
      var labels = new UnionFind(vertex_count)
      for(var i=0; i<cells.length; ++i) {
        var c = cells[i]
        for(var j=0; j<c.length; ++j) {
          for(var k=j+1; k<c.length; ++k) {
            labels.link(c[j], c[k])
          }
        }
      }
      var components = []
        , component_labels = labels.ranks
      for(var i=0; i<component_labels.length; ++i) {
        component_labels[i] = -1
      }
      for(var i=0; i<cells.length; ++i) {
        var l = labels.find(cells[i][0])
        if(component_labels[l] < 0) {
          component_labels[l] = components.length
          components.push([cells[i].slice(0)])
        } else {
          components[component_labels[l]].push(cells[i].slice(0))
        }
      }
      return components
    }
    
    //Computes connected components for a sparse graph
    function connectedComponents_sparse(cells) {
      var vertices  = unique(normalize(skeleton(cells, 0)))
        , labels    = new UnionFind(vertices.length)
      for(var i=0; i<cells.length; ++i) {
        var c = cells[i]
        for(var j=0; j<c.length; ++j) {
          var vj = findCell(vertices, [c[j]])
          for(var k=j+1; k<c.length; ++k) {
            labels.link(vj, findCell(vertices, [c[k]]))
          }
        }
      }
      var components        = []
        , component_labels  = labels.ranks
      for(var i=0; i<component_labels.length; ++i) {
        component_labels[i] = -1
      }
      for(var i=0; i<cells.length; ++i) {
        var l = labels.find(findCell(vertices, [cells[i][0]]));
        if(component_labels[l] < 0) {
          component_labels[l] = components.length
          components.push([cells[i].slice(0)])
        } else {
          components[component_labels[l]].push(cells[i].slice(0))
        }
      }
      return components
    }
    
    //Computes connected components for a cell complex
    function connectedComponents(cells, vertex_count) {
      if(vertex_count) {
        return connectedComponents_dense(cells, vertex_count)
      }
      return connectedComponents_sparse(cells)
    }
    exports.connectedComponents = connectedComponents
    
    },{"bit-twiddle":30,"union-find":86}],83:[function(require,module,exports){
    ////////////////////////////////////////////////////////////////////
    //  Archontis Politis
    //  archontis.politis@aalto.fi
    ////////////////////////////////////////////////////////////////////
    //
    //  A JavaScript library that implements 
    //  the spherical harmonic transform for real spherical harmonics
    //  and some useful transformations in the spherical harmonic domain
    //
    //  The library uses the numeric.js library for matrix operations
    //  http://www.numericjs.com/
    //
    ////////////////////////////////////////////////////////////////////
    
    var numeric = require('numeric');
    
    
    // forwardSHT implements the forward SHT on data defined over the sphere
    var forwardSHT = function (N, data, CART_OR_SPH, DIRECT_OR_PINV) {
        
        var Ndirs = data.length, Nsh = (N+1)*(N+1);
        var invY_N;
        var mag = [,];
        if (Nsh>Ndirs)  {
            console.log("The SHT degree is too high for the number of data points")
        }
        
        // Convert cartesian to spherical if needed
        if (CART_OR_SPH==0) data = convertCart2Sph(data);
        for (var  i=0; i<data.length; i++) {
            mag[i] = data[i][2];
        }
        // SH sampling matrix
        Y_N = computeRealSH(N, data);
        // Direct SHT
        if (DIRECT_OR_PINV==0) {
            invY_N = numeric.mul(1/Ndirs,Y_N);
        }
        else {
            invY_N = pinv_direct(numeric.transpose(Y_N));
        }
        // Perform SHT
        var coeffs = numeric.dotMV(invY_N, mag);
        return coeffs;
    }
    
    // inverseSHT implements the inverse SHT from SH coefficients
    var inverseSHT = function (coeffs, aziElev) {
        
        var aziElevR = aziElev;
        var N = Math.sqrt(coeffs.length)-1;
        // SH sampling matrix
        var Y_N = computeRealSH(N, aziElev);
        // reconstruction
        var data = numeric.dotVM(coeffs, Y_N);
        // gather in data matrix
        for (var i=0; i<aziElev.length; i++) {
            aziElevR[i][2] = data[i];
        }
        return aziElevR;
    }
    
    // xxxxxxxxxxxxxxxxxx
    var print2Darray = function (array2D) {
        for (var q=0; q<array2D.length; q++) console.log(array2D[q]);
    }
    
    // convertCart2Sph converts arrays of cartesian vectors to spherical coordinates
    var convertCart2Sph = function (xyz, OMIT_MAG) {
        
        var azi, elev, r;
        var aziElevR = new Array(xyz.length);
        
        for (var i=0; i<xyz.length; i++) {
            azi = Math.atan2( xyz[i][1], xyz[i][0] );
            elev = Math.atan2( xyz[i][2], Math.sqrt(xyz[i][0]*xyz[i][0] + xyz[i][1]*xyz[i][1]) );
            if (OMIT_MAG==1) {
                aziElevR[i] = [azi,elev];
            }
            else {
                r = Math.sqrt(xyz[i][0]*xyz[i][0] + xyz[i][1]*xyz[i][1] + xyz[i][2]*xyz[i][2]);
                aziElevR[i] = [azi,elev,r];
            }
        }
        return aziElevR;
    }
    
    // convertSph2Cart converts arrays of spherical coordinates to cartesian
    var convertSph2Cart = function (aziElevR) {
        
        var x,y,z;
        var xyz = new Array(aziElevR.length);
        
        for (var i=0; i<aziElevR.length; i++) {
            x = Math.cos(aziElevR[i][0])*Math.cos(aziElevR[i][1]);
            y = Math.sin(aziElevR[i][0])*Math.cos(aziElevR[i][1]);
            z = Math.sin(aziElevR[i][1]);
            if (aziElevR[0].length==2) xyz[i] = [x,y,z];
            else if (aziElevR[0].length==3) xyz[i] = [aziElevR[i][2]*x,aziElevR[i][2]*y,aziElevR[i][2]*z];
        }
        return xyz;
    }
    
    // computeRealSH computes real spherical harmonics up to order N
    var computeRealSH = function (N, data) {
        
        var azi = new Array(data.length);
        var elev = new Array(data.length);
        
        for (var i=0; i<data.length; i++) {
            azi[i] = data[i][0];
            elev[i] = data[i][1];
        }
        
        var factorials = new Array(2*N+1);
        var Ndirs = azi.length;
        var Nsh = (N+1)*(N+1);
        var leg_n_minus1 = 0;
        var leg_n_minus2 = 0;
        var leg_n;
        var sinel = numeric.sin(elev);
        var index_n = 0;
        var Y_N = new Array(Nsh);
        var Nn0, Nnm;
        var cosmazi, sinmazi;
        
        // precompute factorials
        for (var i = 0; i < 2*N+1; i++) factorials[i] = factorial(i);
        
        for (var n = 0; n<N+1; n++) {
            if (n==0) {
                var temp0 = new Array(azi.length);
                temp0.fill(1);
                Y_N[n] = temp0;
                index_n = 1;
            }
            else {
                leg_n = recurseLegendrePoly(n, sinel, leg_n_minus1, leg_n_minus2);
                Nn0 = Math.sqrt(2*n+1);
                for (var m = 0; m<n+1; m++) {
                    if (m==0) Y_N[index_n+n] = numeric.mul(Nn0,leg_n[m]);
                    else {
                        Nnm = Nn0*Math.sqrt( 2 * factorials[n-m]/factorials[n+m] );
                        cosmazi = numeric.cos(numeric.mul(m,azi));
                        sinmazi = numeric.sin(numeric.mul(m,azi));
                        Y_N[index_n+n-m] = numeric.mul(Nnm, numeric.mul(leg_n[m], sinmazi));
                        Y_N[index_n+n+m] = numeric.mul(Nnm, numeric.mul(leg_n[m], cosmazi));
                    }
                }
                index_n = index_n+2*n+1;
            }
            leg_n_minus2 = leg_n_minus1;
            leg_n_minus1 = leg_n;
        }
        
        return Y_N;
    }
    
    // factorial compute factorial
    var factorial = function (n) {
        if (n === 0) return 1;
        return n * factorial(n - 1);
    }
    
    // recurseLegendrePoly computes associated Legendre functions recursively
    var recurseLegendrePoly = function (n, x, Pnm_minus1, Pnm_minus2) {
        
        var Pnm = new Array(n+1);
        switch(n) {
            case 1:
                var x2 = numeric.mul(x,x);
                var P10 = x;
                var P11 = numeric.sqrt(numeric.sub(1,x2));
                Pnm[0] = P10;
                Pnm[1] = P11;
                break;
            case 2:
                var x2 = numeric.mul(x,x);
                var P20 = numeric.mul(3,x2);
                P20 = numeric.sub(P20,1);
                P20 = numeric.div(P20,2);
                var P21 = numeric.sub(1,x2);
                P21 = numeric.sqrt(P21);
                P21 = numeric.mul(3,P21);
                P21 = numeric.mul(P21,x);
                var P22 = numeric.sub(1,x2);
                P22 = numeric.mul(3,P22);
                Pnm[0] = P20;
                Pnm[1] = P21;
                Pnm[2] = P22;
                break;
            default:
                var x2 = numeric.mul(x,x);
                var one_min_x2 = numeric.sub(1,x2);
                // last term m=n
                var k = 2*n-1;
                var dfact_k = 1;
                if ((k % 2) == 0) {
                    for (var kk=1; kk<k/2+1; kk++) dfact_k = dfact_k*2*kk;
                }
                else {
                    for (var kk=1; kk<(k+1)/2+1; kk++) dfact_k = dfact_k*(2*kk-1);
                }
                Pnm[n] = numeric.mul(dfact_k, numeric.pow(one_min_x2, n/2));
                // before last term
                Pnm[n-1] = numeric.mul(2*n-1, numeric.mul(x, Pnm_minus1[n-1])); // P_{n(n-1)} = (2*n-1)*x*P_{(n-1)(n-1)}
                // three term recursence for the rest
                for (var m=0; m<n-1; m++) {
                    var temp1 = numeric.mul( 2*n-1, numeric.mul(x, Pnm_minus1[m]) );
                    var temp2 = numeric.mul( n+m-1, Pnm_minus2[m] );
                    Pnm[m] = numeric.div( numeric.sub(temp1, temp2), n-m); // P_l = ( (2l-1)xP_(l-1) - (l+m-1)P_(l-2) )/(l-m)
                }
        }
        return Pnm;
    }
    
    // pinv_svd computes the pseudo-inverse using SVD
    var pinv_svd = function (A) {
        var z = numeric.svd(A), foo = z.S[0];
        var U = z.U, S = z.S, V = z.V;
        var m = A.length, n = A[0].length, tol = Math.max(m,n)*numeric.epsilon*foo,M = S.length;
        var Sinv = new Array(M);
        for(var i=M-1;i!==-1;i--) { if(S[i]>tol) Sinv[i] = 1/S[i]; else Sinv[i] = 0; }
        return numeric.dot(numeric.dot(V,numeric.diag(Sinv)),numeric.transpose(U))
    }
    
    // pinv_direct computes the left pseudo-inverse
    var pinv_direct = function (A) {
        var AT = numeric.transpose(A);
        return numeric.dot(numeric.inv(numeric.dot(AT,A)),AT);
    }
    
    // computes rotation matrices for real spherical harmonics
    var getSHrotMtx = function (Rxyz, L) {
        
        var Nsh = (L+1)*(L+1);
        // allocate total rotation matrix
        var R = numeric.rep([Nsh,Nsh],0);
        
        // initialize zeroth and first band rotation matrices for recursion
        // Rxyz = [Rxx Rxy Rxz
        //         Ryx Ryy Ryz
        //         Rzx Rzy Rzz]
        //
        // zeroth-band (l=0) is invariant to rotation
        R[0][0] = 1;
        
        // the first band (l=1) is directly related to the rotation matrix
        var R_1 = numeric.rep([3,3],0);
        R_1[0][0] = Rxyz[1][1];
        R_1[0][1] = Rxyz[1][2];
        R_1[0][2] = Rxyz[1][0];
        R_1[1][0] = Rxyz[2][1];
        R_1[1][1] = Rxyz[2][2];
        R_1[1][2] = Rxyz[2][0];
        R_1[2][0] = Rxyz[0][1];
        R_1[2][1] = Rxyz[0][2];
        R_1[2][2] = Rxyz[0][0];
        
        R = numeric.setBlock(R, [1,1], [3,3], R_1);
        var R_lm1 = R_1;
        
        // compute rotation matrix of each subsequent band recursively
        var band_idx = 3;
        for (var l=2; l<L+1; l++) {
            
            var R_l = numeric.rep([(2*l+1),(2*l+1)],0);
            for (var m=-l; m<l+1; m++) {
                for (var n=-l; n<l+1; n++) {
                    // compute u,v,w terms of Eq.8.1 (Table I)
                    var d, denom, u, v, w;
                    if (m==0) d = 1;
                    else d = 0; // the delta function d_m0
                    if (Math.abs(n)==l) denom = (2*l)*(2*l-1);
                    else denom = (l*l-n*n);
                    
                    u = Math.sqrt((l*l-m*m)/denom);
                    v = Math.sqrt((1+d)*(l+Math.abs(m)-1)*(l+Math.abs(m))/denom)*(1-2*d)*0.5;
                    w = Math.sqrt((l-Math.abs(m)-1)*(l-Math.abs(m))/denom)*(1-d)*(-0.5);
                    
                    // computes Eq.8.1
                    if (u!=0) u = u*U(l,m,n,R_1,R_lm1);
                    if (v!=0) v = v*V(l,m,n,R_1,R_lm1);
                    if (w!=0) w = w*W(l,m,n,R_1,R_lm1);
                    R_l[m+l][n+l] = u + v + w;
                }
            }
            R = numeric.setBlock(R, [band_idx+1,band_idx+1], [band_idx+2*l+1,band_idx+2*l+1], R_l);
            R_lm1 = R_l;
            band_idx = band_idx + 2*l+1;
        }
        return R;
    }
    
    // functions to compute terms U, V, W of Eq.8.1 (Table II)
    function U(l,m,n,R_1,R_lm1) {
        
        return P(0,l,m,n,R_1,R_lm1);
    }
    
    function V(l,m,n,R_1,R_lm1) {
        
        var p0, p1, ret, d;
        if (m==0) {
            p0 = P(1,l,1,n,R_1,R_lm1);
            p1 = P(-1,l,-1,n,R_1,R_lm1);
            ret = p0+p1;
        }
        else if (m>0) {
            if (m==1) d = 1;
            else d = 0;
            p0 = P(1,l,m-1,n,R_1,R_lm1);
            p1 = P(-1,l,-m+1,n,R_1,R_lm1);
            ret = p0*Math.sqrt(1+d) - p1*(1-d);
        }
        else {
            if (m==-1) d = 1;
            else d = 0;
            p0 = P(1,l,m+1,n,R_1,R_lm1);
            p1 = P(-1,l,-m-1,n,R_1,R_lm1);
            ret = p0*(1-d) + p1*Math.sqrt(1+d);
        }
        return ret;
    }
    
    function W(l,m,n,R_1,R_lm1) {
        
        var p0, p1, ret;
        if (m==0) {
            console.error("should not be called");
        }
        else {
            if (m>0) {
                p0 = P(1,l,m+1,n,R_1,R_lm1);
                p1 = P(-1,l,-m-1,n,R_1,R_lm1);
                ret = p0 + p1;
            }
            else {
                p0 = P(1,l,m-1,n,R_1,R_lm1);
                p1 = P(-1,l,-m+1,n,R_1,R_lm1);
                ret = p0 - p1;
            }
        }
        return ret;
    }
    
    // function to compute term P of U,V,W (Table II)
    function P(i,l,a,b,R_1,R_lm1) {
        
        var ri1, rim1, ri0, ret;
        ri1 = R_1[i+1][1+1];
        rim1 = R_1[i+1][-1+1];
        ri0 = R_1[i+1][0+1];
        
        if (b==-l) {
            ret = ri1*R_lm1[a+l-1][0] + rim1*R_lm1[a+l-1][2*l-2];
        }
        else {
            if (b==l) ret = ri1*R_lm1[a+l-1][2*l-2] - rim1*R_lm1[a+l-1][0];
            else ret = ri0*R_lm1[a+l-1][b+l-1];
        }
        return ret;
    }
    
    // yawPitchRoll2Rzyx computes the rotation matrix from ZY'X'' rotation angles
    var yawPitchRoll2Rzyx = function (yaw, pitch, roll) {
        
        var Rx, Ry, Rz;
        if (roll == 0) Rx = [[1,0,0],[0,1,0],[0,0,1]];
        else Rx = [[1, 0, 0], [0, Math.cos(roll), Math.sin(roll)], [0, -Math.sin(roll), Math.cos(roll)]];
        if (pitch == 0) Ry = [[1,0,0],[0,1,0],[0,0,1]];
        else Ry = [[Math.cos(pitch), 0, -Math.sin(pitch)], [0, 1, 0], [Math.sin(pitch), 0, Math.cos(pitch)]];
        if (yaw == 0) Rz = [[1,0,0],[0,1,0],[0,0,1]];
        else Rz = [[Math.cos(yaw), Math.sin(yaw), 0], [-Math.sin(yaw), Math.cos(yaw), 0], [0, 0, 1]];
        
        var R = numeric.dotMMsmall(Ry,Rz);
        R = numeric.dotMMsmall(Rx,R);
        return R;
    }
    
    
    // exports
    module.exports.forwardSHT = forwardSHT;
    module.exports.inverseSHT = inverseSHT;
    module.exports.print2Darray = print2Darray;
    module.exports.convertCart2Sph = convertCart2Sph;
    module.exports.convertSph2Cart = convertSph2Cart;
    module.exports.computeRealSH = computeRealSH;
    module.exports.factorial = factorial;
    module.exports.recurseLegendrePoly = recurseLegendrePoly;
    module.exports.pinv_svd = pinv_svd;
    module.exports.pinv_direct = pinv_direct;
    module.exports.getSHrotMtx = getSHrotMtx;
    module.exports.yawPitchRoll2Rzyx = yawPitchRoll2Rzyx;
    
    },{"numeric":65}],84:[function(require,module,exports){
    "use strict"
    
    module.exports = twoProduct
    
    var SPLITTER = +(Math.pow(2, 27) + 1.0)
    
    function twoProduct(a, b, result) {
      var x = a * b
    
      var c = SPLITTER * a
      var abig = c - a
      var ahi = c - abig
      var alo = a - ahi
    
      var d = SPLITTER * b
      var bbig = d - b
      var bhi = d - bbig
      var blo = b - bhi
    
      var err1 = x - (ahi * bhi)
      var err2 = err1 - (alo * bhi)
      var err3 = err2 - (ahi * blo)
    
      var y = alo * blo - err3
    
      if(result) {
        result[0] = y
        result[1] = x
        return result
      }
    
      return [ y, x ]
    }
    },{}],85:[function(require,module,exports){
    "use strict"
    
    module.exports = fastTwoSum
    
    function fastTwoSum(a, b, result) {
        var x = a + b
        var bv = x - a
        var av = x - bv
        var br = b - bv
        var ar = a - av
        if(result) {
            result[0] = ar + br
            result[1] = x
            return result
        }
        return [ar+br, x]
    }
    },{}],86:[function(require,module,exports){
    "use strict"; "use restrict";
    
    module.exports = UnionFind;
    
    function UnionFind(count) {
      this.roots = new Array(count);
      this.ranks = new Array(count);
      
      for(var i=0; i<count; ++i) {
        this.roots[i] = i;
        this.ranks[i] = 0;
      }
    }
    
    var proto = UnionFind.prototype
    
    Object.defineProperty(proto, "length", {
      "get": function() {
        return this.roots.length
      }
    })
    
    proto.makeSet = function() {
      var n = this.roots.length;
      this.roots.push(n);
      this.ranks.push(0);
      return n;
    }
    
    proto.find = function(x) {
      var x0 = x
      var roots = this.roots;
      while(roots[x] !== x) {
        x = roots[x]
      }
      while(roots[x0] !== x) {
        var y = roots[x0]
        roots[x0] = x
        x0 = y
      }
      return x;
    }
    
    proto.link = function(x, y) {
      var xr = this.find(x)
        , yr = this.find(y);
      if(xr === yr) {
        return;
      }
      var ranks = this.ranks
        , roots = this.roots
        , xd    = ranks[xr]
        , yd    = ranks[yr];
      if(xd < yd) {
        roots[xr] = yr;
      } else if(yd < xd) {
        roots[yr] = xr;
      } else {
        roots[yr] = xr;
        ++ranks[xr];
      }
    }
    },{}]},{},[24])(24)
    });
    
    //# sourceMappingURL=data:application/json;charset=utf-8;base64,